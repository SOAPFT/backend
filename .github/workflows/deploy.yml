name: Deploy to ECS

on:
  push:
    branches: main
  workflow_dispatch:

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: soapft-dev
  ECS_SERVICE: soapft-dev
  ECS_CLUSTER: soapft-dev-cluster
  CONTAINER_NAME: soapft-dev

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create APNs certificate file
        run: |
          # APNs 인증서 디렉토리 생성
          mkdir -p certs
          
          # APNs 인증서 파일 생성
          echo "${{ secrets.APNS_AUTH_KEY }}" > certs/AuthKey_${{ secrets.APNS_KEY_ID }}.p8

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Docker 이미지 빌드 및 ECR Push
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

          # latest 태그 설정
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download current task definition
        run: |
          # Download current task definition
          aws ecs describe-task-definition --task-definition ${{ env.ECS_SERVICE }}-v2 --query taskDefinition > task-definition.json

      - name: Update task definition environment variables
        run: |
          # Update task definition with SERVER_ENV while preserving Fargate settings
          cat > update-task-def.py << 'EOF'
          import json
          import os

          # Read task definition
          with open('task-definition.json', 'r') as f:
              task_def = json.load(f)

          # Parse SERVER_ENV into environment variables
          env_vars = []
          server_env = os.environ.get('SERVER_ENV', '')
          for line in server_env.strip().split('\n'):
              if '=' in line:
                  key, value = line.split('=', 1)
                  env_vars.append({'name': key.strip(), 'value': value.strip()})

          # Update environment variables for the target container
          container_name = os.environ.get('CONTAINER_NAME')
          found_container = False
          
          for container in task_def.get('containerDefinitions', []):
              if container.get('name') == container_name:
                  if env_vars:
                      container['environment'] = env_vars
                  found_container = True
                  break
          
          if not found_container:
              raise SystemExit(f'Container {container_name} not found in task definition')

          # Remove only fields that prevent new task definition registration
          # CRITICAL: Do NOT remove 'compatibilities' - it's required for Fargate
          for field in ['taskDefinitionArn', 'revision', 'status', 'requiresAttributes', 'registeredAt', 'registeredBy']:
              if field in task_def:
                  del task_def[field]

          # Ensure Fargate compatibility is preserved
          if 'requiresCompatibilities' not in task_def:
              task_def['requiresCompatibilities'] = ['FARGATE']
          
          if 'networkMode' not in task_def:
              task_def['networkMode'] = 'awsvpc'

          # Write updated task definition
          with open('task-definition.json', 'w') as f:
              json.dump(task_def, f, indent=2)
          EOF

          SERVER_ENV="${{ secrets.SERVER_ENV }}" CONTAINER_NAME="${{ env.CONTAINER_NAME }}" python3 update-task-def.py

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
