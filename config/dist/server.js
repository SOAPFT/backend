/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => {
  // webpackBootstrap
  /******/ var __webpack_modules__ = {
    /***/ './config/logging.config.ts':
      /*!**********************************!*\
  !*** ./config/logging.config.ts ***!
  \**********************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.winstonConfig = void 0;\nconst nest_winston_1 = __webpack_require__(/*! nest-winston */ \"nest-winston\");\nconst winston = __webpack_require__(/*! winston */ \"winston\");\nconst DailyRotateFile = __webpack_require__(/*! winston-daily-rotate-file */ \"winston-daily-rotate-file\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nif (!fs.existsSync('logs')) {\n    fs.mkdirSync('logs');\n}\nconst fileFormat = winston.format.combine(winston.format.timestamp(), winston.format.json());\nconst fileOptions = {\n    flags: 'a',\n    flush: true,\n};\nexports.winstonConfig = {\n    transports: [\n        new winston.transports.Console({\n            level:  false ? 0 : 'debug',\n            format: winston.format.combine(winston.format.timestamp(), nest_winston_1.utilities.format.nestLike('SOAPFT', {\n                prettyPrint: true,\n                colors: true,\n            })),\n        }),\n        new DailyRotateFile({\n            filename: 'logs/error-%DATE%.log',\n            datePattern: 'YYYY-MM-DD',\n            level: 'error',\n            maxSize: '20m',\n            maxFiles: '14d',\n            format: fileFormat,\n            options: fileOptions,\n            auditFile: 'logs/error-audit.json',\n        }),\n        new DailyRotateFile({\n            filename: 'logs/combined-%DATE%.log',\n            datePattern: 'YYYY-MM-DD',\n            maxSize: '20m',\n            maxFiles: '14d',\n            format: fileFormat,\n            options: fileOptions,\n            auditFile: 'logs/combined-audit.json',\n        }),\n        new DailyRotateFile({\n            filename: 'logs/http-%DATE%.log',\n            datePattern: 'YYYY-MM-DD',\n            level: 'debug',\n            maxSize: '20m',\n            maxFiles: '7d',\n            options: fileOptions,\n            auditFile: 'logs/http-audit.json',\n            format: winston.format.combine(winston.format.timestamp(), winston.format.json(), winston.format.printf((info) => {\n                if (info.context === 'HttpLogger') {\n                    return JSON.stringify(info);\n                }\n                return null;\n            })),\n        }),\n    ],\n    exitOnError: false,\n    handleExceptions: true,\n};\n\n\n//# sourceURL=webpack://soapft-backend/./config/logging.config.ts?\n}",
        );

        /***/
      },

    /***/ './config/orm.config.ts':
      /*!******************************!*\
  !*** ./config/orm.config.ts ***!
  \******************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AppDataSource = exports.dataSourceOptions = exports.typeOrmConfig = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst dotenv_1 = __webpack_require__(/*! dotenv */ \"dotenv\");\nconst nodeEnv = \"development\" || 0;\n(0, dotenv_1.config)({ path: `env/.${nodeEnv}.env` });\nconst isProd = \"development\" === 'production';\nconst entityPath = isProd\n    ? 'dist/src/entities/*.entity.js'\n    : 'src/entities/*.entity.ts';\nconst migrationPath = isProd\n    ? 'dist/database/migrations/**/*.js'\n    : 'database/migrations/**/*.js';\nconst typeOrmConfig = (configService) => {\n    return {\n        type: 'postgres',\n        host: configService.get('DB_HOST') || 'localhost',\n        port: parseInt(configService.get('DB_PORT') || '5432', 10),\n        username: configService.get('DB_USERNAME') || 'postgres',\n        password: configService.get('DB_PASSWORD') || 'postgres',\n        database: configService.get('DB_DATABASE') || 'soapft',\n        entities: [entityPath],\n        synchronize: configService.get('NODE_ENV') !== 'production',\n        logging: configService.get('NODE_ENV') !== 'production',\n        migrations: [migrationPath],\n        migrationsTableName: 'migrations',\n        ssl: configService.get('NODE_ENV') === 'production'\n            ? { rejectUnauthorized: false }\n            : false,\n    };\n};\nexports.typeOrmConfig = typeOrmConfig;\nexports.dataSourceOptions = {\n    type: 'postgres',\n    host: process.env.DB_HOST || 'localhost',\n    port: parseInt(process.env.DB_PORT || '5432', 10),\n    username: process.env.DB_USERNAME || 'postgres',\n    password: process.env.DB_PASSWORD || 'postgres',\n    database: process.env.DB_DATABASE || 'soapft',\n    entities: [entityPath],\n    migrations: [migrationPath],\n    migrationsTableName: 'migrations',\n    ssl:  false\n        ? 0\n        : false,\n};\nexports.AppDataSource = new typeorm_1.DataSource(exports.dataSourceOptions);\nexports[\"default\"] = exports.typeOrmConfig;\n\n\n//# sourceURL=webpack://soapft-backend/./config/orm.config.ts?\n}",
        );

        /***/
      },

    /***/ './node_modules/webpack/hot/log-apply-result.js':
      /*!******************************************************!*\
  !*** ./node_modules/webpack/hot/log-apply-result.js ***!
  \******************************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        eval(
          '{/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\n/**\n * @param {(string | number)[]} updatedModules updated modules\n * @param {(string | number)[] | null} renewedModules renewed modules\n */\nmodule.exports = function (updatedModules, renewedModules) {\n\tvar unacceptedModules = updatedModules.filter(function (moduleId) {\n\t\treturn renewedModules && renewedModules.indexOf(moduleId) < 0;\n\t});\n\tvar log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");\n\n\tif (unacceptedModules.length > 0) {\n\t\tlog(\n\t\t\t"warning",\n\t\t\t"[HMR] The following modules couldn\'t be hot updated: (They would need a full reload!)"\n\t\t);\n\t\tunacceptedModules.forEach(function (moduleId) {\n\t\t\tlog("warning", "[HMR]  - " + moduleId);\n\t\t});\n\t}\n\n\tif (!renewedModules || renewedModules.length === 0) {\n\t\tlog("info", "[HMR] Nothing hot updated.");\n\t} else {\n\t\tlog("info", "[HMR] Updated modules:");\n\t\trenewedModules.forEach(function (moduleId) {\n\t\t\tif (typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {\n\t\t\t\tvar parts = moduleId.split("!");\n\t\t\t\tlog.groupCollapsed("info", "[HMR]  - " + parts.pop());\n\t\t\t\tlog("info", "[HMR]  - " + moduleId);\n\t\t\t\tlog.groupEnd("info");\n\t\t\t} else {\n\t\t\t\tlog("info", "[HMR]  - " + moduleId);\n\t\t\t}\n\t\t});\n\t\tvar numberIds = renewedModules.every(function (moduleId) {\n\t\t\treturn typeof moduleId === "number";\n\t\t});\n\t\tif (numberIds)\n\t\t\tlog(\n\t\t\t\t"info",\n\t\t\t\t\'[HMR] Consider using the optimization.moduleIds: "named" for module names.\'\n\t\t\t);\n\t}\n};\n\n\n//# sourceURL=webpack://soapft-backend/./node_modules/webpack/hot/log-apply-result.js?\n}',
        );

        /***/
      },

    /***/ './node_modules/webpack/hot/log.js':
      /*!*****************************************!*\
  !*** ./node_modules/webpack/hot/log.js ***!
  \*****************************************/
      /***/ (module) => {
        eval(
          '{/** @typedef {"info" | "warning" | "error"} LogLevel */\n\n/** @type {LogLevel} */\nvar logLevel = "info";\n\nfunction dummy() {}\n\n/**\n * @param {LogLevel} level log level\n * @returns {boolean} true, if should log\n */\nfunction shouldLog(level) {\n\tvar shouldLog =\n\t\t(logLevel === "info" && level === "info") ||\n\t\t(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||\n\t\t(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");\n\treturn shouldLog;\n}\n\n/**\n * @param {(msg?: string) => void} logFn log function\n * @returns {(level: LogLevel, msg?: string) => void} function that logs when log level is sufficient\n */\nfunction logGroup(logFn) {\n\treturn function (level, msg) {\n\t\tif (shouldLog(level)) {\n\t\t\tlogFn(msg);\n\t\t}\n\t};\n}\n\n/**\n * @param {LogLevel} level log level\n * @param {string|Error} msg message\n */\nmodule.exports = function (level, msg) {\n\tif (shouldLog(level)) {\n\t\tif (level === "info") {\n\t\t\tconsole.log(msg);\n\t\t} else if (level === "warning") {\n\t\t\tconsole.warn(msg);\n\t\t} else if (level === "error") {\n\t\t\tconsole.error(msg);\n\t\t}\n\t}\n};\n\n/**\n * @param {Error} err error\n * @returns {string} formatted error\n */\nmodule.exports.formatError = function (err) {\n\tvar message = err.message;\n\tvar stack = err.stack;\n\tif (!stack) {\n\t\treturn message;\n\t} else if (stack.indexOf(message) < 0) {\n\t\treturn message + "\\n" + stack;\n\t}\n\treturn stack;\n};\n\nvar group = console.group || dummy;\nvar groupCollapsed = console.groupCollapsed || dummy;\nvar groupEnd = console.groupEnd || dummy;\n\nmodule.exports.group = logGroup(group);\n\nmodule.exports.groupCollapsed = logGroup(groupCollapsed);\n\nmodule.exports.groupEnd = logGroup(groupEnd);\n\n/**\n * @param {LogLevel} level log level\n */\nmodule.exports.setLogLevel = function (level) {\n\tlogLevel = level;\n};\n\n\n//# sourceURL=webpack://soapft-backend/./node_modules/webpack/hot/log.js?\n}',
        );

        /***/
      },

    /***/ './node_modules/webpack/hot/poll.js?100':
      /*!**********************************************!*\
  !*** ./node_modules/webpack/hot/poll.js?100 ***!
  \**********************************************/
      /***/ (module, __unused_webpack_exports, __webpack_require__) => {
        eval(
          '{var __resourceQuery = "?100";\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n/* globals __resourceQuery */\nif (true) {\n\t// eslint-disable-next-line no-implicit-coercion\n\tvar hotPollInterval = +__resourceQuery.slice(1) || 0;\n\tvar log = __webpack_require__(/*! ./log */ "./node_modules/webpack/hot/log.js");\n\n\t/**\n\t * @param {boolean=} fromUpdate true when called from update\n\t */\n\tvar checkForUpdate = function checkForUpdate(fromUpdate) {\n\t\tif (module.hot.status() === "idle") {\n\t\t\tmodule.hot\n\t\t\t\t.check(true)\n\t\t\t\t.then(function (updatedModules) {\n\t\t\t\t\tif (!updatedModules) {\n\t\t\t\t\t\tif (fromUpdate) log("info", "[HMR] Update applied.");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t__webpack_require__(/*! ./log-apply-result */ "./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);\n\t\t\t\t\tcheckForUpdate(true);\n\t\t\t\t})\n\t\t\t\t.catch(function (err) {\n\t\t\t\t\tvar status = module.hot.status();\n\t\t\t\t\tif (["abort", "fail"].indexOf(status) >= 0) {\n\t\t\t\t\t\tlog("warning", "[HMR] Cannot apply update.");\n\t\t\t\t\t\tlog("warning", "[HMR] " + log.formatError(err));\n\t\t\t\t\t\tlog("warning", "[HMR] You need to restart the application!");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlog("warning", "[HMR] Update failed: " + log.formatError(err));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t};\n\tsetInterval(checkForUpdate, hotPollInterval);\n} else // removed by dead control flow\n{}\n\n\n//# sourceURL=webpack://soapft-backend/./node_modules/webpack/hot/poll.js?\n}',
        );

        /***/
      },

    /***/ './src/app.controller.ts':
      /*!*******************************!*\
  !*** ./src/app.controller.ts ***!
  \*******************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AppController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst app_service_1 = __webpack_require__(/*! ./app.service */ "./src/app.service.ts");\nconst winston_1 = __webpack_require__(/*! winston */ "winston");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst swagger_decorator_1 = __webpack_require__(/*! ./decorators/swagger.decorator */ "./src/decorators/swagger.decorator.ts");\nlet AppController = class AppController {\n    constructor(appService, logger) {\n        this.appService = appService;\n        this.logger = logger;\n    }\n    getHello() {\n        this.logger.info(\'Called getHello()\');\n        this.logger.debug(\'Debug message\');\n        this.logger.error(\'Error message\');\n        return this.appService.getHello();\n    }\n    healthCheck() {\n        return {\n            status: \'ok\',\n            timestamp: new Date().toISOString(),\n            uptime: process.uptime(),\n        };\n    }\n};\nexports.AppController = AppController;\n__decorate([\n    (0, common_1.Get)(\'logger\'),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", []),\n    __metadata("design:returntype", String)\n], AppController.prototype, "getHello", null);\n__decorate([\n    (0, common_1.Get)(\'health\'),\n    (0, swagger_decorator_1.ApiHealthCheck)(),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", []),\n    __metadata("design:returntype", void 0)\n], AppController.prototype, "healthCheck", null);\nexports.AppController = AppController = __decorate([\n    (0, swagger_1.ApiTags)(\'System\'),\n    (0, common_1.Controller)(),\n    __param(1, (0, common_1.Inject)(\'winston\')),\n    __metadata("design:paramtypes", [app_service_1.AppService,\n        winston_1.Logger])\n], AppController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/app.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/app.module.ts':
      /*!***************************!*\
  !*** ./src/app.module.ts ***!
  \***************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AppModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst app_controller_1 = __webpack_require__(/*! ./app.controller */ "./src/app.controller.ts");\nconst app_service_1 = __webpack_require__(/*! ./app.service */ "./src/app.service.ts");\nconst nest_winston_1 = __webpack_require__(/*! nest-winston */ "nest-winston");\nconst config_1 = __webpack_require__(/*! @nestjs/config */ "@nestjs/config");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst orm_config_1 = __webpack_require__(/*! ../config/orm.config */ "./config/orm.config.ts");\nconst logging_config_1 = __webpack_require__(/*! ../config/logging.config */ "./config/logging.config.ts");\nconst uploads_module_1 = __webpack_require__(/*! ./modules/uploads/uploads.module */ "./src/modules/uploads/uploads.module.ts");\nconst s3_module_1 = __webpack_require__(/*! ./modules/s3/s3.module */ "./src/modules/s3/s3.module.ts");\nconst auth_module_1 = __webpack_require__(/*! ./auth/auth.module */ "./src/auth/auth.module.ts");\nconst posts_module_1 = __webpack_require__(/*! ./modules/posts/posts.module */ "./src/modules/posts/posts.module.ts");\nconst http_logger_middleware_1 = __webpack_require__(/*! ./middlewares/http-logger.middleware */ "./src/middlewares/http-logger.middleware.ts");\nconst comments_module_1 = __webpack_require__(/*! ./modules/comments/comments.module */ "./src/modules/comments/comments.module.ts");\nconst likes_module_1 = __webpack_require__(/*! ./modules/likes/likes.module */ "./src/modules/likes/likes.module.ts");\nconst users_module_1 = __webpack_require__(/*! ./modules/users/users.module */ "./src/modules/users/users.module.ts");\nconst challenge_module_1 = __webpack_require__(/*! ./modules/challenges/challenge.module */ "./src/modules/challenges/challenge.module.ts");\nconst chat_module_1 = __webpack_require__(/*! ./modules/chat/chat.module */ "./src/modules/chat/chat.module.ts");\nconst notifications_module_1 = __webpack_require__(/*! ./modules/notifications/notifications.module */ "./src/modules/notifications/notifications.module.ts");\nconst schedule_1 = __webpack_require__(/*! @nestjs/schedule */ "@nestjs/schedule");\nconst friendship_module_1 = __webpack_require__(/*! ./modules/friendship/friendship.module */ "./src/modules/friendship/friendship.module.ts");\nconst bo_module_1 = __webpack_require__(/*! ./modules/bo/bo.module */ "./src/modules/bo/bo.module.ts");\nconst ai_module_1 = __webpack_require__(/*! ./modules/ai/ai.module */ "./src/modules/ai/ai.module.ts");\nconst mission_module_1 = __webpack_require__(/*! ./modules/mission/mission.module */ "./src/modules/mission/mission.module.ts");\nconst payment_module_1 = __webpack_require__(/*! ./modules/payment/payment.module */ "./src/modules/payment/payment.module.ts");\nlet AppModule = class AppModule {\n    configure(consumer) {\n        consumer.apply(http_logger_middleware_1.HttpLoggerMiddleware).forRoutes(\'*\');\n    }\n};\nexports.AppModule = AppModule;\nexports.AppModule = AppModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            schedule_1.ScheduleModule.forRoot(),\n            config_1.ConfigModule.forRoot({\n                envFilePath: `env/.${"development" || 0}.env`,\n                isGlobal: true,\n            }),\n            nest_winston_1.WinstonModule.forRoot(logging_config_1.winstonConfig),\n            typeorm_1.TypeOrmModule.forRootAsync({\n                imports: [config_1.ConfigModule],\n                inject: [config_1.ConfigService],\n                useFactory: (configService) => (0, orm_config_1.default)(configService),\n            }),\n            uploads_module_1.UploadsModule,\n            s3_module_1.S3Module,\n            auth_module_1.AuthModule,\n            posts_module_1.PostsModule,\n            comments_module_1.CommentsModule,\n            likes_module_1.LikesModule,\n            users_module_1.UsersModule,\n            challenge_module_1.ChallengeModule,\n            chat_module_1.ChatModule,\n            notifications_module_1.NotificationsModule,\n            friendship_module_1.FriendshipModule,\n            bo_module_1.BoModule,\n            ai_module_1.AiModule,\n            mission_module_1.MissionModule,\n            payment_module_1.PaymentModule,\n        ],\n        controllers: [app_controller_1.AppController],\n        providers: [app_service_1.AppService],\n    })\n], AppModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/app.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/app.service.ts':
      /*!****************************!*\
  !*** ./src/app.service.ts ***!
  \****************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AppService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nlet AppService = class AppService {\n    getHello() {\n        console.log(process.env.PORT);\n        return \'Hello World!\';\n    }\n};\nexports.AppService = AppService;\nexports.AppService = AppService = __decorate([\n    (0, common_1.Injectable)()\n], AppService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/app.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/auth/auth.controller.ts':
      /*!*************************************!*\
  !*** ./src/auth/auth.controller.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AuthController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/auth/auth.service.ts");\nconst auth_swagger_1 = __webpack_require__(/*! ./decorators/auth.swagger */ "./src/auth/decorators/auth.swagger.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst auth_dto_1 = __webpack_require__(/*! ./dto/auth.dto */ "./src/auth/dto/auth.dto.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! ./guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nlet AuthController = class AuthController {\n    constructor(authService) {\n        this.authService = authService;\n    }\n    async kakaoAuthCallback(body, res) {\n        return this.authService.kakaoLogin(body, res);\n    }\n    async naverAuthCallback(body, res) {\n        return this.authService.naverLogin(body, res);\n    }\n    async appleAuthCallback(body, res) {\n        return this.authService.appleLogin(body, res);\n    }\n    async Refresh(req, res) {\n        return this.authService.RefreshToken(req, res);\n    }\n    async getDevToken(res) {\n        return this.authService.generateDevToken(res);\n    }\n    async getSeedUsersTokens(res) {\n        return this.authService.generateSeedUsersTokens(res);\n    }\n    async getSeedUsers(res) {\n        return this.authService.getSeedUsers(res);\n    }\n    async getSeedUserToken(userUuid, res) {\n        return this.authService.generateSeedUserToken(userUuid, res);\n    }\n    async testAuth(userUuid) {\n        return {\n            message: \'인증 성공\',\n            userUuid,\n            timestamp: new Date().toISOString(),\n        };\n    }\n    async testNickname() {\n        const nickname = await this.authService.generateUniqueNickname();\n        return {\n            message: \'닉네임 생성 성공\',\n            nickname: nickname,\n        };\n    }\n};\nexports.AuthController = AuthController;\n__decorate([\n    (0, common_1.Post)(\'kakao\'),\n    (0, auth_swagger_1.ApiKakaoLogin)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [auth_dto_1.SocialLoginDto, Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "kakaoAuthCallback", null);\n__decorate([\n    (0, common_1.Post)(\'naver\'),\n    (0, auth_swagger_1.ApiNaverLogin)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [auth_dto_1.SocialLoginDto, Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "naverAuthCallback", null);\n__decorate([\n    (0, common_1.Post)(\'apple\'),\n    (0, auth_swagger_1.ApiAppleLogin)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [auth_dto_1.SocialLoginDto, Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "appleAuthCallback", null);\n__decorate([\n    (0, common_1.Post)(\'refresh\'),\n    (0, auth_swagger_1.ApiRefreshToken)(),\n    __param(0, (0, common_1.Req)()),\n    __param(1, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object, Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "Refresh", null);\n__decorate([\n    (0, common_1.Post)(\'dev-token\'),\n    (0, auth_swagger_1.ApiDevToken)(),\n    __param(0, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "getDevToken", null);\n__decorate([\n    (0, common_1.Post)(\'seed-tokens\'),\n    (0, swagger_1.ApiOperation)({\n        summary: \'시드 데이터 유저들의 토큰 생성\',\n        description: \'개발 환경에서만 사용 가능한 시드 데이터 유저들의 JWT 토큰을 생성합니다.\',\n    }),\n    __param(0, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "getSeedUsersTokens", null);\n__decorate([\n    (0, common_1.Get)(\'seed-users\'),\n    (0, swagger_1.ApiOperation)({\n        summary: \'시드 데이터 사용자 목록 조회\',\n        description: \'시드 데이터로 생성된 사용자들의 목록을 조회합니다.\',\n    }),\n    __param(0, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "getSeedUsers", null);\n__decorate([\n    (0, common_1.Post)(\'seed-token/:userUuid\'),\n    (0, swagger_1.ApiOperation)({\n        summary: \'특정 시드 데이터 사용자의 토큰 생성\',\n        description: \'특정 시드 데이터 사용자를 선택해서 JWT 토큰을 생성합니다.\',\n    }),\n    __param(0, (0, common_1.Param)(\'userUuid\')),\n    __param(1, (0, common_1.Res)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Object]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "getSeedUserToken", null);\n__decorate([\n    (0, common_1.Get)(\'auth-test\'),\n    (0, auth_swagger_1.ApiTestAuth)(),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "testAuth", null);\n__decorate([\n    (0, common_1.Get)(\'test-nickname\'),\n    (0, swagger_1.ApiOperation)({ summary: \'닉네임 생성 테스트\' }),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", []),\n    __metadata("design:returntype", Promise)\n], AuthController.prototype, "testNickname", null);\nexports.AuthController = AuthController = __decorate([\n    (0, swagger_1.ApiTags)(\'auth\'),\n    (0, common_1.Controller)(\'auth\'),\n    __metadata("design:paramtypes", [auth_service_1.AuthService])\n], AuthController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/auth/auth.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/auth/auth.module.ts':
      /*!*********************************!*\
  !*** ./src/auth/auth.module.ts ***!
  \*********************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AuthModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst auth_controller_1 = __webpack_require__(/*! ./auth.controller */ "./src/auth/auth.controller.ts");\nconst auth_service_1 = __webpack_require__(/*! ./auth.service */ "./src/auth/auth.service.ts");\nconst auth_entity_1 = __webpack_require__(/*! @/entities/auth.entity */ "./src/entities/auth.entity.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst users_service_1 = __webpack_require__(/*! @/modules/users/users.service */ "./src/modules/users/users.service.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");\nconst jwt_1 = __webpack_require__(/*! @nestjs/jwt */ "@nestjs/jwt");\nconst jwt_strategy_1 = __webpack_require__(/*! ./strategy/jwt.strategy */ "./src/auth/strategy/jwt.strategy.ts");\nconst config_1 = __webpack_require__(/*! @nestjs/config */ "@nestjs/config");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ "./src/entities/post.entity.ts");\nconst users_module_1 = __webpack_require__(/*! @/modules/users/users.module */ "./src/modules/users/users.module.ts");\nconst friendship_entity_1 = __webpack_require__(/*! @/entities/friendship.entity */ "./src/entities/friendship.entity.ts");\nlet AuthModule = class AuthModule {\n};\nexports.AuthModule = AuthModule;\nexports.AuthModule = AuthModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            config_1.ConfigModule.forRoot(),\n            typeorm_1.TypeOrmModule.forFeature([auth_entity_1.Auth, user_entity_1.User, post_entity_1.Post, friendship_entity_1.Friendship]),\n            passport_1.PassportModule,\n            jwt_1.JwtModule.register({}),\n            (0, common_1.forwardRef)(() => users_module_1.UsersModule),\n        ],\n        controllers: [auth_controller_1.AuthController],\n        providers: [auth_service_1.AuthService, users_service_1.UsersService, jwt_strategy_1.JwtStrategy],\n        exports: [jwt_strategy_1.JwtStrategy, passport_1.PassportModule],\n    })\n], AuthModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/auth/auth.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/auth/auth.service.ts':
      /*!**********************************!*\
  !*** ./src/auth/auth.service.ts ***!
  \**********************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AuthService = void 0;\nconst auth_entity_1 = __webpack_require__(/*! ../entities/auth.entity */ \"./src/entities/auth.entity.ts\");\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ \"@nestjs/typeorm\");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst users_service_1 = __webpack_require__(/*! ../modules/users/users.service */ \"./src/modules/users/users.service.ts\");\nconst jwt_1 = __webpack_require__(/*! @nestjs/jwt */ \"@nestjs/jwt\");\nconst axios_1 = __webpack_require__(/*! axios */ \"axios\");\nconst bcrypt = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\nconst social_provider_enum_1 = __webpack_require__(/*! ../types/social-provider.enum */ \"./src/types/social-provider.enum.ts\");\nconst ms = __webpack_require__(/*! ms */ \"ms\");\nconst user_status_enum_1 = __webpack_require__(/*! ../types/user-status.enum */ \"./src/types/user-status.enum.ts\");\nconst apple_jwt_util_1 = __webpack_require__(/*! ../utils/apple-jwt.util */ \"./src/utils/apple-jwt.util.ts\");\nconst jwks_rsa_1 = __webpack_require__(/*! jwks-rsa */ \"jwks-rsa\");\nconst ulid_1 = __webpack_require__(/*! ulid */ \"ulid\");\nconst error_code_enum_1 = __webpack_require__(/*! ../types/error-code.enum */ \"./src/types/error-code.enum.ts\");\nconst custom_exception_1 = __webpack_require__(/*! ../utils/custom-exception */ \"./src/utils/custom-exception.ts\");\nconst starving_orange_1 = __webpack_require__(/*! starving-orange */ \"starving-orange\");\nlet AuthService = class AuthService {\n    constructor(authRepository, userService, jwtService) {\n        this.authRepository = authRepository;\n        this.userService = userService;\n        this.jwtService = jwtService;\n        this.jwksClient = new jwks_rsa_1.JwksClient({\n            jwksUri: 'https://appleid.apple.com/auth/keys',\n            cache: true,\n            cacheMaxAge: 86400000,\n            cacheMaxEntries: 5,\n            timeout: 30000,\n            rateLimit: true,\n            jwksRequestsPerMinute: 5,\n        });\n    }\n    getRefreshTokenExpiryMs() {\n        const expiresIn = process.env.JWT_REFRESH_TOKEN_EXPIRES_IN || '14d';\n        return typeof expiresIn === 'string'\n            ? ms(expiresIn)\n            : parseInt(expiresIn);\n    }\n    async generateUniqueNickname() {\n        let attempts = 0;\n        const maxAttempts = 10;\n        while (attempts < maxAttempts) {\n            try {\n                const generatedNickname = (0, starving_orange_1.generateNickname)();\n                const existingUser = await this.userService.findOneByNickname(generatedNickname.nickname);\n                if (!existingUser) {\n                    return generatedNickname.nickname;\n                }\n            }\n            catch (error) {\n                console.error('starving-orange 라이브러리 오류:', error);\n                break;\n            }\n            attempts++;\n        }\n        const adjectives = [\n            '귀여운',\n            '멋진',\n            '행복한',\n            '즐거운',\n            '신나는',\n            '사랑스러운',\n            '용감한',\n            '친절한',\n            '배고픈',\n            '달콤한',\n            '상냥한',\n        ];\n        const nouns = [\n            '토마토',\n            '바나나',\n            '사과',\n            '오렌지',\n            '포도',\n            '딸기',\n            '배',\n            '복숭아',\n            '귤',\n            '한라봉',\n            '두리안',\n            '코코넛',\n            '브로콜리',\n        ];\n        const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n        const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\n        const timestamp = Date.now().toString().slice(-4);\n        return `${randomAdjective} ${randomNoun}_${timestamp}`;\n    }\n    async handleSocialLogin(user, deviceInfo, res) {\n        let isNewUser = false;\n        let findUser = await this.userService.findOneBySocialId(user.socialId);\n        if (!findUser) {\n            const uuid = (0, ulid_1.ulid)();\n            findUser = await this.userService.createUser(user, uuid);\n            isNewUser = true;\n        }\n        else if (findUser.status === user_status_enum_1.UserStatusType.INCOMPLETE) {\n            isNewUser = true;\n        }\n        const findUserPayload = { userUuid: findUser.userUuid };\n        const access_token = await this.jwtService.signAsync(findUserPayload, {\n            secret: process.env.JWT_ACCESS_TOKEN_SECRET,\n            expiresIn: process.env.JWT_ACCESS_TOKEN_EXPIRES_IN,\n        });\n        const refresh_token = await this.jwtService.signAsync(findUserPayload, {\n            secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n            expiresIn: process.env.JWT_REFRESH_TOKEN_EXPIRES_IN,\n        });\n        const hashedRefreshToken = await bcrypt.hash(refresh_token, 10);\n        const existingAuth = await this.authRepository.findOne({\n            where: { userUuid: findUser.userUuid },\n        });\n        const now = new Date();\n        const authData = {\n            userUuid: findUser.userUuid,\n            refreshToken: hashedRefreshToken,\n            deviceId: deviceInfo.deviceId || null,\n            deviceType: deviceInfo.deviceType || null,\n            appVersion: deviceInfo.appVersion || null,\n            lastLoginAt: now,\n            expiresAt: new Date(now.getTime() + this.getRefreshTokenExpiryMs()),\n        };\n        if (existingAuth) {\n            Object.assign(existingAuth, authData);\n            await this.authRepository.save(existingAuth);\n        }\n        else {\n            const newAuth = this.authRepository.create(authData);\n            await this.authRepository.save(newAuth);\n        }\n        return res.json({\n            accessToken: access_token,\n            refreshToken: refresh_token,\n            isNewUser,\n            message: '로그인 성공',\n        });\n    }\n    async kakaoLogin(body, res) {\n        try {\n            const userResponse = await axios_1.default.get('https://kapi.kakao.com/v2/user/me', {\n                headers: {\n                    Authorization: `Bearer ${body.accessToken}`,\n                },\n            });\n            const kakaoUser = userResponse.data;\n            const uniqueNickname = await this.generateUniqueNickname();\n            console.log(kakaoUser);\n            console.log(body);\n            const user = {\n                socialId: kakaoUser.id.toString(),\n                socialNickname: kakaoUser.kakao_account?.profile.nickname || '',\n                nickname: uniqueNickname,\n                profileImage: kakaoUser.kakao_account?.profile.profile_image_url || '',\n                socialProvider: social_provider_enum_1.SocialProvider.KAKAO,\n                pushToken: body.pushToken || null,\n            };\n            return await this.handleSocialLogin(user, {\n                deviceId: body.deviceId,\n                deviceType: body.deviceType,\n                appVersion: body.appVersion,\n            }, res);\n        }\n        catch (error) {\n            console.log(error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.UNAUTHORIZED, '유효하지 않은 토큰입니다.');\n        }\n    }\n    async naverLogin(body, res) {\n        try {\n            const userRes = await axios_1.default.get('https://openapi.naver.com/v1/nid/me', {\n                headers: {\n                    Authorization: `Bearer ${body.accessToken}`,\n                },\n            });\n            const profile = userRes.data.response;\n            const uniqueNickname = await this.generateUniqueNickname();\n            const user = {\n                socialId: profile.id,\n                socialNickname: profile.nickname || '',\n                nickname: uniqueNickname,\n                profileImage: profile.profile_image || '',\n                socialProvider: social_provider_enum_1.SocialProvider.NAVER,\n                pushToken: body.pushToken || null,\n            };\n            return this.handleSocialLogin(user, {\n                deviceId: body.deviceId,\n                deviceType: body.deviceType,\n                appVersion: body.appVersion,\n            }, res);\n        }\n        catch (error) {\n            console.log(error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.UNAUTHORIZED, '유효하지 않은 토큰입니다.');\n        }\n    }\n    async appleLogin(body, res) {\n        try {\n            const identityToken = body.accessToken;\n            if (!identityToken) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.SOCIAL_LOGIN_FAILED, 'Apple identity token이 필요합니다.');\n            }\n            console.log('Apple Login - Identity Token received');\n            const header = (0, apple_jwt_util_1.decodeTokenHeader)(identityToken);\n            const kid = header.kid;\n            if (!kid) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.SOCIAL_LOGIN_FAILED, 'Invalid Apple identity token - missing kid');\n            }\n            console.log('Apple Login - Token header decoded, kid:', kid);\n            const key = await this.jwksClient.getSigningKey(kid);\n            const publicKey = key.getPublicKey();\n            console.log('Apple Login - Public key retrieved');\n            const payload = await this.jwtService.verifyAsync(identityToken, {\n                algorithms: ['RS256'],\n                publicKey,\n                issuer: 'https://appleid.apple.com',\n                audience: process.env.APPLE_CLIENT_ID,\n            });\n            console.log('Apple Login - Token verified successfully');\n            const appleUserId = payload.sub;\n            const email = payload.email || '';\n            const isPrivateEmail = payload.is_private_email === true ||\n                payload.is_private_email === 'true';\n            const realUserStatus = payload.real_user_status || 1;\n            console.log('Apple Login - User ID:', appleUserId);\n            console.log('Apple Login - Email:', email);\n            console.log('Apple Login - Is Private Email:', isPrivateEmail);\n            console.log('Apple Login - Real User Status:', realUserStatus);\n            const uniqueNickname = await this.generateUniqueNickname();\n            const user = {\n                socialId: appleUserId,\n                socialNickname: email,\n                nickname: uniqueNickname,\n                profileImage: null,\n                socialProvider: social_provider_enum_1.SocialProvider.APPLE,\n                pushToken: body.pushToken || null,\n            };\n            console.log('Apple Login - User object created:', {\n                socialId: user.socialId,\n                socialNickname: user.socialNickname,\n                nickname: user.nickname,\n            });\n            return this.handleSocialLogin(user, {\n                deviceId: body.deviceId,\n                deviceType: body.deviceType,\n                appVersion: body.appVersion,\n            }, res);\n        }\n        catch (error) {\n            console.log(error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.UNAUTHORIZED, '유효하지 않은 토큰입니다.');\n        }\n    }\n    async RefreshToken(req, res) {\n        console.log('req.headers: ', req.headers);\n        const refreshToken = req.headers['authorization']?.replace('Bearer ', '');\n        console.log('refreshToken:', refreshToken);\n        if (!refreshToken) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.REFRESH_TOKEN_NOT_FOUND, '리프레시 토큰이 없습니다.');\n        }\n        try {\n            const payload = await this.jwtService.verifyAsync(refreshToken, {\n                secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n            });\n            console.log('payload:', payload);\n            const auth = await this.authRepository.findOne({\n                where: { userUuid: payload.userUuid },\n            });\n            if (!auth) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.UNAUTHORIZED, '토큰이 유효하지 않음');\n            }\n            console.log('auth.refereshToken:', auth.refreshToken);\n            if (!auth || !(await bcrypt.compare(refreshToken, auth.refreshToken))) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.UNAUTHORIZED, '리프레시 토큰 불일치');\n            }\n            const newAccessToken = this.jwtService.sign({\n                userUuid: payload.userUuid,\n            }, {\n                secret: process.env.JWT_ACCESS_TOKEN_SECRET,\n                expiresIn: `${process.env.JWT_ACCESS_TOKEN_EXPIRES_IN}`,\n            });\n            const nowInSec = Math.floor(Date.now() / 1000);\n            let newRefreshToken = null;\n            let hashedRefreshToken = null;\n            if (payload.exp && payload.exp < nowInSec) {\n                newRefreshToken = this.jwtService.sign({ userUuid: payload.userUuid }, {\n                    secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n                    expiresIn: `${process.env.JWT_REFRESH_TOKEN_EXPIRES_IN}`,\n                });\n                hashedRefreshToken = await bcrypt.hash(newRefreshToken, 10);\n                auth.refreshToken = hashedRefreshToken;\n                await this.authRepository.save(auth);\n            }\n            return res.json({\n                message: newRefreshToken\n                    ? 'accessToken 및 refreshToken 재발급 완료'\n                    : 'accessToken 재발급 완료',\n                accessToken: newAccessToken,\n                refreshToken: newRefreshToken ? newRefreshToken : null,\n            });\n        }\n        catch (error) {\n            console.log(error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.UNAUTHORIZED, '리프레시 토큰 만료 혹은 잘못됨');\n        }\n    }\n    async generateDevToken(res) {\n        try {\n            const userUuid = '01JYKVN18MCW5B9FZ1PP7T14XS';\n            const exists = await this.userService.checkUserExists(userUuid);\n            if (!exists) {\n                await this.userService.createUser({\n                    socialId: userUuid,\n                    socialNickname: '개발계정',\n                    nickname: '개발계정',\n                    profileImage: null,\n                    socialProvider: social_provider_enum_1.SocialProvider.KAKAO,\n                    pushToken: null,\n                }, userUuid);\n            }\n            const payload = { userUuid };\n            const access_token = await this.jwtService.signAsync(payload, {\n                secret: process.env.JWT_ACCESS_TOKEN_SECRET,\n                expiresIn: '30d',\n            });\n            const refresh_token = await this.jwtService.signAsync(payload, {\n                secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n                expiresIn: '30d',\n            });\n            const hashedRefreshToken = await bcrypt.hash(refresh_token, 10);\n            const existingAuth = await this.authRepository.findOne({\n                where: { userUuid },\n            });\n            if (existingAuth) {\n                existingAuth.refreshToken = hashedRefreshToken;\n                await this.authRepository.save(existingAuth);\n            }\n            else {\n                const newAuth = this.authRepository.create({\n                    userUuid,\n                    refreshToken: hashedRefreshToken,\n                });\n                await this.authRepository.save(newAuth);\n            }\n            return res.json({\n                accessToken: access_token,\n                refreshToken: refresh_token,\n            });\n        }\n        catch (error) {\n            console.error('개발용 토큰 생성 에러:', error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INTERNAL_SERVER_ERROR, '개발용 토큰 생성 실패');\n        }\n    }\n    async generateSeedUsersTokens(res) {\n        try {\n            const userRepository = this.userService['userRepository'];\n            const users = await userRepository.find();\n            if (users.length === 0) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, '시드 데이터 사용자가 없습니다. 먼저 시드를 실행해주세요.');\n            }\n            const userTokens = [];\n            for (const user of users) {\n                const payload = { userUuid: user.userUuid };\n                const access_token = await this.jwtService.signAsync(payload, {\n                    secret: process.env.JWT_ACCESS_TOKEN_SECRET,\n                    expiresIn: '30d',\n                });\n                const refresh_token = await this.jwtService.signAsync(payload, {\n                    secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n                    expiresIn: '30d',\n                });\n                const hashedRefreshToken = await bcrypt.hash(refresh_token, 10);\n                const existingAuth = await this.authRepository.findOne({\n                    where: { userUuid: user.userUuid },\n                });\n                const now = new Date();\n                const authData = {\n                    userUuid: user.userUuid,\n                    refreshToken: hashedRefreshToken,\n                    deviceId: 'dev-device',\n                    deviceType: 'DEV',\n                    appVersion: '1.0.0',\n                    lastLoginAt: now,\n                    expiresAt: new Date(now.getTime() + this.getRefreshTokenExpiryMs()),\n                };\n                if (existingAuth) {\n                    Object.assign(existingAuth, authData);\n                    await this.authRepository.save(existingAuth);\n                }\n                else {\n                    const newAuth = this.authRepository.create(authData);\n                    await this.authRepository.save(newAuth);\n                }\n                userTokens.push({\n                    userId: user.id,\n                    userUuid: user.userUuid,\n                    nickname: user.nickname,\n                    socialProvider: user.socialProvider,\n                    accessToken: access_token,\n                    refreshToken: refresh_token,\n                });\n            }\n            return res.json({\n                message: '시드 데이터 사용자들의 토큰이 성공적으로 생성되었습니다.',\n                totalUsers: users.length,\n                users: userTokens,\n            });\n        }\n        catch (error) {\n            console.error('시드 사용자 토큰 생성 에러:', error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INTERNAL_SERVER_ERROR, '시드 사용자 토큰 생성 실패');\n        }\n    }\n    async getSeedUsers(res) {\n        try {\n            const userRepository = this.userService['userRepository'];\n            const users = await userRepository.find({\n                select: [\n                    'id',\n                    'userUuid',\n                    'nickname',\n                    'socialProvider',\n                    'profileImage',\n                    'status',\n                ],\n            });\n            if (users.length === 0) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, '시드 데이터 사용자가 없습니다. 먼저 시드를 실행해주세요.');\n            }\n            return res.json({\n                message: '시드 데이터 사용자 목록 조회 성공',\n                totalUsers: users.length,\n                users: users.map((user) => ({\n                    userId: user.id,\n                    userUuid: user.userUuid,\n                    nickname: user.nickname,\n                    socialProvider: user.socialProvider,\n                    profileImage: user.profileImage,\n                    status: user.status,\n                })),\n            });\n        }\n        catch (error) {\n            console.error('시드 사용자 목록 조회 에러:', error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INTERNAL_SERVER_ERROR, '시드 사용자 목록 조회 실패');\n        }\n    }\n    async generateSeedUserToken(userUuid, res) {\n        try {\n            const userRepository = this.userService['userRepository'];\n            const user = await userRepository.findOne({ where: { userUuid } });\n            if (!user) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, '해당 사용자를 찾을 수 없습니다.');\n            }\n            const payload = { userUuid: user.userUuid };\n            const access_token = await this.jwtService.signAsync(payload, {\n                secret: process.env.JWT_ACCESS_TOKEN_SECRET,\n                expiresIn: '30d',\n            });\n            const refresh_token = await this.jwtService.signAsync(payload, {\n                secret: process.env.JWT_REFRESH_TOKEN_SECRET,\n                expiresIn: '30d',\n            });\n            const hashedRefreshToken = await bcrypt.hash(refresh_token, 10);\n            const existingAuth = await this.authRepository.findOne({\n                where: { userUuid: user.userUuid },\n            });\n            const now = new Date();\n            const authData = {\n                userUuid: user.userUuid,\n                refreshToken: hashedRefreshToken,\n                deviceId: 'dev-device',\n                deviceType: 'DEV',\n                appVersion: '1.0.0',\n                lastLoginAt: now,\n                expiresAt: new Date(now.getTime() + this.getRefreshTokenExpiryMs()),\n            };\n            if (existingAuth) {\n                Object.assign(existingAuth, authData);\n                await this.authRepository.save(existingAuth);\n            }\n            else {\n                const newAuth = this.authRepository.create(authData);\n                await this.authRepository.save(newAuth);\n            }\n            return res.json({\n                message: '토큰이 성공적으로 생성되었습니다.',\n                user: {\n                    userId: user.id,\n                    userUuid: user.userUuid,\n                    nickname: user.nickname,\n                    socialProvider: user.socialProvider,\n                    accessToken: access_token,\n                    refreshToken: refresh_token,\n                },\n            });\n        }\n        catch (error) {\n            console.error('시드 사용자 토큰 생성 에러:', error);\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INTERNAL_SERVER_ERROR, '시드 사용자 토큰 생성 실패');\n        }\n    }\n};\nexports.AuthService = AuthService;\nexports.AuthService = AuthService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(auth_entity_1.Auth)),\n    __metadata(\"design:paramtypes\", [typeorm_2.Repository,\n        users_service_1.UsersService,\n        jwt_1.JwtService])\n], AuthService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/auth/auth.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/auth/decorators/auth.swagger.ts':
      /*!*********************************************!*\
  !*** ./src/auth/decorators/auth.swagger.ts ***!
  \*********************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiKakaoLogin = ApiKakaoLogin;\nexports.ApiNaverLogin = ApiNaverLogin;\nexports.ApiAppleLogin = ApiAppleLogin;\nexports.ApiRefreshToken = ApiRefreshToken;\nexports.ApiDevToken = ApiDevToken;\nexports.ApiTestAuth = ApiTestAuth;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nconst auth_dto_1 = __webpack_require__(/*! ../dto/auth.dto */ \"./src/auth/dto/auth.dto.ts\");\nfunction ApiKakaoLogin() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '카카오 로그인',\n        description: '카카오 access token으로 로그인하고, access/refresh 토큰을 반환합니다.',\n    }), (0, swagger_1.ApiBody)({ type: auth_dto_1.SocialLoginDto }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '로그인 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                access_token: { type: 'string', example: 'access_token_string' },\n                refresh_token: { type: 'string', example: 'refresh_token_string' },\n                isNewUser: { type: 'boolean', example: true },\n                message: { type: 'string', example: '로그인 성공' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('AUTH_001', '유효하지 않은 토큰입니다.', 401)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiNaverLogin() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '네이버 로그인',\n        description: '네이버 access token으로 로그인하고, access/refresh 토큰을 반환합니다.',\n    }), (0, swagger_1.ApiBody)({ type: auth_dto_1.SocialLoginDto }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '로그인 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                access_token: { type: 'string', example: 'access_token_string' },\n                refresh_token: { type: 'string', example: 'refresh_token_string' },\n                isNewUser: { type: 'boolean', example: false },\n                message: { type: 'string', example: '로그인 성공' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('AUTH_001', '유효하지 않은 토큰입니다.', 401)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiAppleLogin() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: 'Apple 로그인',\n        description: 'Apple identity token으로 로그인하고, access/refresh 토큰을 반환합니다.',\n    }), (0, swagger_1.ApiBody)({ type: auth_dto_1.SocialLoginDto }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '로그인 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                access_token: { type: 'string', example: 'access_token_string' },\n                refresh_token: { type: 'string', example: 'refresh_token_string' },\n                isNewUser: { type: 'boolean', example: true },\n                message: { type: 'string', example: '로그인 성공' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('AUTH_001', '유효하지 않은 토큰입니다.', 401)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiRefreshToken() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '토큰 갱신',\n        description: '리프레시 토큰을 사용하여 액세스 토큰을 갱신합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            required: ['refreshToken'],\n            properties: {\n                refreshToken: {\n                    type: 'string',\n                    description: '리프레시 토큰',\n                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '토큰 갱신 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                accessToken: {\n                    type: 'string',\n                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n                },\n                refreshToken: {\n                    type: 'string',\n                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('AUTH_001', '유효하지 않은 리프레시 토큰입니다.', 401)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.TokenExpired), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiDevToken() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '개발용 토큰 발급',\n        description: '바디 없이 호출 시 개발용 accessToken 및 refreshToken 발급',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '토큰 발급 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                accessToken: { type: 'string', example: 'access_token_value' },\n                refreshToken: { type: 'string', example: 'refresh_token_value' },\n            },\n        },\n    }));\n}\nfunction ApiTestAuth() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '[개발용] 인증 테스트',\n        description: '인증이 필요한 엔드포인트 테스트용입니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '인증 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '인증된 사용자입니다.',\n                },\n                user: {\n                    type: 'object',\n                    properties: {\n                        id: { type: 'number', example: 1 },\n                        nickname: { type: 'string', example: '사용자' },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.TokenExpired), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/auth/decorators/auth.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/auth/dto/auth.dto.ts':
      /*!**********************************!*\
  !*** ./src/auth/dto/auth.dto.ts ***!
  \**********************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SocialLoginDto = exports.DevLoginDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nclass DevLoginDto {\n}\nexports.DevLoginDto = DevLoginDto;\n__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    __metadata("design:type", String)\n], DevLoginDto.prototype, "userUuid", void 0);\nclass SocialLoginDto {\n}\nexports.SocialLoginDto = SocialLoginDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'소셜 access token\',\n        example: \'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SocialLoginDto.prototype, "accessToken", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'디바이스 고유 식별자 (iOS UUID 등)\',\n        required: false,\n        example: \'BFF12E03-81AE-4E30-91DE-8D2F78A4A10F\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SocialLoginDto.prototype, "deviceId", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'디바이스 종류 (iOS, Android 등)\',\n        required: false,\n        example: \'iOS\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SocialLoginDto.prototype, "deviceType", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'FCM 등 푸시 토큰\',\n        required: false,\n        example: \'f2YbkmwqT2ydIOh8A7fMnZ:APA91bE...\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SocialLoginDto.prototype, "pushToken", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'앱 버전 정보\',\n        required: false,\n        example: \'1.0.3\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SocialLoginDto.prototype, "appVersion", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/auth/dto/auth.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/auth/guards/jwt-auth.guard.ts':
      /*!*******************************************!*\
  !*** ./src/auth/guards/jwt-auth.guard.ts ***!
  \*******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.JwtAuthGuard = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");\nlet JwtAuthGuard = class JwtAuthGuard extends (0, passport_1.AuthGuard)(\'jwt\') {\n    canActivate(context) {\n        return super.canActivate(context);\n    }\n    handleRequest(err, user, info) {\n        if (err || !user) {\n            console.log(\'JwtAuthGuard error:\', err, info);\n            throw err || new common_1.UnauthorizedException();\n        }\n        return user;\n    }\n};\nexports.JwtAuthGuard = JwtAuthGuard;\nexports.JwtAuthGuard = JwtAuthGuard = __decorate([\n    (0, common_1.Injectable)()\n], JwtAuthGuard);\n\n\n//# sourceURL=webpack://soapft-backend/./src/auth/guards/jwt-auth.guard.ts?\n}',
        );

        /***/
      },

    /***/ './src/auth/strategy/jwt.strategy.ts':
      /*!*******************************************!*\
  !*** ./src/auth/strategy/jwt.strategy.ts ***!
  \*******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.JwtStrategy = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst passport_1 = __webpack_require__(/*! @nestjs/passport */ "@nestjs/passport");\nconst passport_jwt_1 = __webpack_require__(/*! passport-jwt */ "passport-jwt");\nlet JwtStrategy = class JwtStrategy extends (0, passport_1.PassportStrategy)(passport_jwt_1.Strategy, \'jwt\') {\n    constructor() {\n        super({\n            jwtFromRequest: passport_jwt_1.ExtractJwt.fromAuthHeaderAsBearerToken(),\n            secretOrKey: process.env.JWT_ACCESS_TOKEN_SECRET,\n            passReqToCallback: true,\n        });\n    }\n    async validate(req, payload) {\n        const { userUuid } = payload;\n        if (!userUuid) {\n            console.log(\'Invalid token\');\n            throw new common_1.UnauthorizedException(\'Invalid token\');\n        }\n        req.user = { userUuid };\n        return { userUuid };\n    }\n};\nexports.JwtStrategy = JwtStrategy;\nexports.JwtStrategy = JwtStrategy = __decorate([\n    (0, common_1.Injectable)(),\n    __metadata("design:paramtypes", [])\n], JwtStrategy);\n\n\n//# sourceURL=webpack://soapft-backend/./src/auth/strategy/jwt.strategy.ts?\n}',
        );

        /***/
      },

    /***/ './src/decorators/file-interceptor.decorator.ts':
      /*!******************************************************!*\
  !*** ./src/decorators/file-interceptor.decorator.ts ***!
  \******************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ImageFileInterceptor = ImageFileInterceptor;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst platform_express_1 = __webpack_require__(/*! @nestjs/platform-express */ "@nestjs/platform-express");\nfunction ImageFileInterceptor(fieldName = \'image\', maxSize = 10 * 1024 * 1024) {\n    return (0, common_1.UseInterceptors)((0, platform_express_1.FileInterceptor)(fieldName, {\n        limits: {\n            fileSize: maxSize,\n        },\n        fileFilter: (req, file, cb) => {\n            if (!file.mimetype.match(/^image\\/(jpg|jpeg|png|gif)$/)) {\n                return cb(new common_1.BadRequestException(\'이미지 파일만 업로드 가능합니다.\'), false);\n            }\n            cb(null, true);\n        },\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/decorators/file-interceptor.decorator.ts?\n}',
        );

        /***/
      },

    /***/ './src/decorators/swagger.decorator.ts':
      /*!*********************************************!*\
  !*** ./src/decorators/swagger.decorator.ts ***!
  \*********************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PaginationSchema = exports.ErrorResponses = exports.CommonErrorResponses = exports.CommonAuthResponses = exports.CommonErrorSchema = void 0;\nexports.createErrorResponse = createErrorResponse;\nexports.ApiHealthCheck = ApiHealthCheck;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nexports.CommonErrorSchema = {\n    type: 'object',\n    properties: {\n        success: {\n            type: 'boolean',\n            example: false,\n            description: '요청 성공 여부',\n        },\n        errorCode: {\n            type: 'string',\n            description: '에러 코드',\n            example: 'SYS_001',\n        },\n        message: {\n            type: 'string',\n            description: '에러 메시지',\n            example: '잘못된 요청입니다.',\n        },\n        timestamp: {\n            type: 'string',\n            format: 'date-time',\n            description: '에러 발생 시각',\n            example: '2025-06-22T12:00:00.000Z',\n        },\n        path: {\n            type: 'string',\n            description: '요청 경로',\n            example: '/api/users/profile',\n        },\n        method: {\n            type: 'string',\n            description: 'HTTP 메서드',\n            example: 'POST',\n        },\n        details: {\n            type: 'object',\n            description: '에러 상세 정보 (선택적)',\n            additionalProperties: true,\n            example: {},\n        },\n    },\n    required: ['success', 'errorCode', 'message', 'timestamp', 'path', 'method'],\n};\nfunction createErrorResponse(errorCode, message, statusCode, example, method) {\n    return {\n        status: statusCode,\n        description: message,\n        schema: {\n            ...exports.CommonErrorSchema,\n            properties: {\n                ...exports.CommonErrorSchema.properties,\n                errorCode: {\n                    ...exports.CommonErrorSchema.properties.errorCode,\n                    example: errorCode,\n                },\n                message: {\n                    ...exports.CommonErrorSchema.properties.message,\n                    example: message,\n                },\n                method: method\n                    ? {\n                        ...exports.CommonErrorSchema.properties.method,\n                        example: method,\n                    }\n                    : exports.CommonErrorSchema.properties.method,\n                details: example\n                    ? {\n                        ...exports.CommonErrorSchema.properties.details,\n                        example,\n                    }\n                    : exports.CommonErrorSchema.properties.details,\n            },\n        },\n    };\n}\nexports.CommonAuthResponses = {\n    Unauthorized: createErrorResponse('AUTH_001', '유효하지 않은 토큰입니다.', 401),\n    Forbidden: createErrorResponse('AUTH_002', '권한이 없습니다.', 403),\n    TokenExpired: createErrorResponse('AUTH_003', '토큰이 만료되었습니다.', 401),\n};\nexports.CommonErrorResponses = {\n    BadRequest: createErrorResponse('SYS_001', '잘못된 요청입니다.', 400),\n    ValidationFailed: createErrorResponse('SYS_002', '입력값 검증에 실패했습니다.', 400),\n    NotFound: createErrorResponse('SYS_003', '요청한 리소스를 찾을 수 없습니다.', 404),\n    InternalServerError: createErrorResponse('SYS_005', '서버 내부 오류가 발생했습니다.', 500),\n    DatabaseError: createErrorResponse('SYS_006', '데이터베이스 오류가 발생했습니다.', 500),\n    ExternalApiError: createErrorResponse('SYS_007', '외부 API 호출에 실패했습니다.', 502),\n};\nexports.ErrorResponses = {\n    GET: (errorCode, message, statusCode, example) => createErrorResponse(errorCode, message, statusCode, example, 'GET'),\n    POST: (errorCode, message, statusCode, example) => createErrorResponse(errorCode, message, statusCode, example, 'POST'),\n    PUT: (errorCode, message, statusCode, example) => createErrorResponse(errorCode, message, statusCode, example, 'PUT'),\n    PATCH: (errorCode, message, statusCode, example) => createErrorResponse(errorCode, message, statusCode, example, 'PATCH'),\n    DELETE: (errorCode, message, statusCode, example) => createErrorResponse(errorCode, message, statusCode, example, 'DELETE'),\n};\nexports.PaginationSchema = {\n    type: 'object',\n    properties: {\n        currentPage: {\n            type: 'number',\n            description: '현재 페이지',\n            example: 1,\n        },\n        totalPages: {\n            type: 'number',\n            description: '전체 페이지 수',\n            example: 10,\n        },\n        totalItems: {\n            type: 'number',\n            description: '전체 항목 수',\n            example: 100,\n        },\n        itemsPerPage: {\n            type: 'number',\n            description: '페이지당 항목 수',\n            example: 10,\n        },\n        hasNext: {\n            type: 'boolean',\n            description: '다음 페이지 존재 여부',\n            example: true,\n        },\n        hasPrev: {\n            type: 'boolean',\n            description: '이전 페이지 존재 여부',\n            example: false,\n        },\n    },\n};\nfunction ApiHealthCheck() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '헬스 체크',\n        description: '서버 상태를 확인합니다.',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '서버 정상 동작',\n        schema: {\n            type: 'object',\n            properties: {\n                status: {\n                    type: 'string',\n                    example: 'ok',\n                },\n                timestamp: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n                uptime: {\n                    type: 'number',\n                    description: '서버 가동 시간 (초)',\n                    example: 3600,\n                },\n            },\n        },\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/decorators/swagger.decorator.ts?\n}",
        );

        /***/
      },

    /***/ './src/decorators/user-uuid.decorator.ts':
      /*!***********************************************!*\
  !*** ./src/decorators/user-uuid.decorator.ts ***!
  \***********************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UserUuid = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nexports.UserUuid = (0, common_1.createParamDecorator)((data, ctx) => {\n    const request = ctx.switchToHttp().getRequest();\n    return request.user?.userUuid;\n});\n\n\n//# sourceURL=webpack://soapft-backend/./src/decorators/user-uuid.decorator.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/auth.entity.ts':
      /*!*************************************!*\
  !*** ./src/entities/auth.entity.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Auth = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Auth = class Auth {\n};\nexports.Auth = Auth;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], Auth.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'user_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Auth.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'refresh_token\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Auth.prototype, "refreshToken", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'device_id\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Auth.prototype, "deviceId", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'device_type\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Auth.prototype, "deviceType", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'app_version\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Auth.prototype, "appVersion", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'last_login_at\', type: \'timestamptz\', nullable: true }),\n    __metadata("design:type", Date)\n], Auth.prototype, "lastLoginAt", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'expires_at\', type: \'timestamptz\', nullable: true }),\n    __metadata("design:type", Date)\n], Auth.prototype, "expiresAt", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_active\', type: \'boolean\', default: true }),\n    __metadata("design:type", Boolean)\n], Auth.prototype, "isActive", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Auth.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Auth.prototype, "updatedAt", void 0);\nexports.Auth = Auth = __decorate([\n    (0, typeorm_1.Entity)(\'auth\')\n], Auth);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/auth.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/challenge.entity.ts':
      /*!******************************************!*\
  !*** ./src/entities/challenge.entity.ts ***!
  \******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Challenge = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nconst challenge_enum_1 = __webpack_require__(/*! ../types/challenge.enum */ "./src/types/challenge.enum.ts");\nlet Challenge = class Challenge {\n};\nexports.Challenge = Challenge;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], Challenge.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'challenge_uuid\', type: \'varchar\', length: 26, unique: true }),\n    __metadata("design:type", String)\n], Challenge.prototype, "challengeUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'title\', type: \'varchar\' }),\n    __metadata("design:type", String)\n], Challenge.prototype, "title", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'type\',\n        type: \'enum\',\n        enum: challenge_enum_1.ChallengeType,\n    }),\n    __metadata("design:type", String)\n], Challenge.prototype, "type", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'profile\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Challenge.prototype, "profile", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'banner\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Challenge.prototype, "banner", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'introduce\', type: \'text\' }),\n    __metadata("design:type", String)\n], Challenge.prototype, "introduce", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'verificationGuide\', type: \'text\', nullable: true }),\n    __metadata("design:type", String)\n], Challenge.prototype, "verificationGuide", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'start_date\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Challenge.prototype, "startDate", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'end_date\', type: \'timestamptz\', nullable: true }),\n    __metadata("design:type", Date)\n], Challenge.prototype, "endDate", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'goal\', type: \'int\' }),\n    __metadata("design:type", Number)\n], Challenge.prototype, "goal", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'start_age\', type: \'int\' }),\n    __metadata("design:type", Number)\n], Challenge.prototype, "startAge", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'end_age\', type: \'int\', nullable: true }),\n    __metadata("design:type", Number)\n], Challenge.prototype, "endAge", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'gender\',\n        type: \'enum\',\n        enum: challenge_enum_1.GenderType,\n    }),\n    __metadata("design:type", String)\n], Challenge.prototype, "gender", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'max_member\', type: \'int\' }),\n    __metadata("design:type", Number)\n], Challenge.prototype, "maxMember", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'creator_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Challenge.prototype, "creatorUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'participant_uuid\', type: \'varchar\', array: true }),\n    __metadata("design:type", Array)\n], Challenge.prototype, "participantUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'coin_amount\', type: \'int\' }),\n    __metadata("design:type", Number)\n], Challenge.prototype, "coinAmount", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_started\', type: \'boolean\' }),\n    __metadata("design:type", Boolean)\n], Challenge.prototype, "isStarted", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_finished\', type: \'boolean\' }),\n    __metadata("design:type", Boolean)\n], Challenge.prototype, "isFinished", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'success_participants_uuid\',\n        type: \'varchar\',\n        array: true,\n    }),\n    __metadata("design:type", Array)\n], Challenge.prototype, "successParticipantsUuid", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Challenge.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Challenge.prototype, "updatedAt", void 0);\nexports.Challenge = Challenge = __decorate([\n    (0, typeorm_1.Entity)(\'challenge\')\n], Challenge);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/challenge.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/chat-message.entity.ts':
      /*!*********************************************!*\
  !*** ./src/entities/chat-message.entity.ts ***!
  \*********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChatMessage = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nconst chat_enum_1 = __webpack_require__(/*! ../types/chat.enum */ "./src/types/chat.enum.ts");\nlet ChatMessage = class ChatMessage {\n};\nexports.ChatMessage = ChatMessage;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], ChatMessage.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'room_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], ChatMessage.prototype, "roomUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'sender_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], ChatMessage.prototype, "senderUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'type\',\n        type: \'enum\',\n        enum: chat_enum_1.MessageType,\n        default: chat_enum_1.MessageType.TEXT,\n    }),\n    __metadata("design:type", String)\n], ChatMessage.prototype, "type", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'content\', type: \'text\' }),\n    __metadata("design:type", String)\n], ChatMessage.prototype, "content", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'image_url\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], ChatMessage.prototype, "imageUrl", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_read\', type: \'boolean\', default: false }),\n    __metadata("design:type", Boolean)\n], ChatMessage.prototype, "isRead", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'read_by_uuids\',\n        type: \'varchar\',\n        array: true,\n        default: \'{}\',\n    }),\n    __metadata("design:type", Array)\n], ChatMessage.prototype, "readByUuids", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], ChatMessage.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], ChatMessage.prototype, "updatedAt", void 0);\nexports.ChatMessage = ChatMessage = __decorate([\n    (0, typeorm_1.Entity)(\'chat_message\')\n], ChatMessage);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/chat-message.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/chat-room.entity.ts':
      /*!******************************************!*\
  !*** ./src/entities/chat-room.entity.ts ***!
  \******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChatRoom = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nconst chat_enum_1 = __webpack_require__(/*! ../types/chat.enum */ "./src/types/chat.enum.ts");\nlet ChatRoom = class ChatRoom {\n};\nexports.ChatRoom = ChatRoom;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], ChatRoom.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'room_uuid\', type: \'varchar\', length: 26, unique: true }),\n    __metadata("design:type", String)\n], ChatRoom.prototype, "roomUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'type\',\n        type: \'enum\',\n        enum: chat_enum_1.ChatRoomType,\n    }),\n    __metadata("design:type", String)\n], ChatRoom.prototype, "type", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'name\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], ChatRoom.prototype, "name", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'participant_uuids\', type: \'varchar\', array: true }),\n    __metadata("design:type", Array)\n], ChatRoom.prototype, "participantUuids", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'challenge_uuid\',\n        type: \'varchar\',\n        length: 26,\n        nullable: true,\n    }),\n    __metadata("design:type", String)\n], ChatRoom.prototype, "challengeUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_active\', type: \'boolean\', default: true }),\n    __metadata("design:type", Boolean)\n], ChatRoom.prototype, "isActive", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'last_message_at\', type: \'timestamptz\', nullable: true }),\n    __metadata("design:type", Date)\n], ChatRoom.prototype, "lastMessageAt", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], ChatRoom.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], ChatRoom.prototype, "updatedAt", void 0);\nexports.ChatRoom = ChatRoom = __decorate([\n    (0, typeorm_1.Entity)(\'chat_room\')\n], ChatRoom);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/chat-room.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/comment.entity.ts':
      /*!****************************************!*\
  !*** ./src/entities/comment.entity.ts ***!
  \****************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Comment = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Comment = class Comment {\n};\nexports.Comment = Comment;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], Comment.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'user_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Comment.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'post_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Comment.prototype, "postUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'parent_comment_id\', type: \'int\', nullable: true }),\n    __metadata("design:type", Number)\n], Comment.prototype, "parentCommentId", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'content\', type: \'text\' }),\n    __metadata("design:type", String)\n], Comment.prototype, "content", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'mentioned_users\',\n        type: \'varchar\',\n        array: true,\n        default: \'{}\',\n    }),\n    __metadata("design:type", Array)\n], Comment.prototype, "mentionedUsers", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Comment.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Comment.prototype, "updatedAt", void 0);\nexports.Comment = Comment = __decorate([\n    (0, typeorm_1.Entity)(\'comment\')\n], Comment);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/comment.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/friendship.entity.ts':
      /*!*******************************************!*\
  !*** ./src/entities/friendship.entity.ts ***!
  \*******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Friendship = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nconst friendship_enum_1 = __webpack_require__(/*! ../types/friendship.enum */ "./src/types/friendship.enum.ts");\nlet Friendship = class Friendship {\n};\nexports.Friendship = Friendship;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], Friendship.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'requester_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Friendship.prototype, "requesterUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'addressee_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Friendship.prototype, "addresseeUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'status\',\n        type: \'enum\',\n        enum: friendship_enum_1.FriendshipStatus,\n        default: friendship_enum_1.FriendshipStatus.PENDING,\n    }),\n    __metadata("design:type", String)\n], Friendship.prototype, "status", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Friendship.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Friendship.prototype, "updatedAt", void 0);\nexports.Friendship = Friendship = __decorate([\n    (0, typeorm_1.Entity)(\'friendship\'),\n    (0, typeorm_1.Unique)([\'requesterUuid\', \'addresseeUuid\'])\n], Friendship);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/friendship.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/image-verification.entity.ts':
      /*!***************************************************!*\
  !*** ./src/entities/image-verification.entity.ts ***!
  \***************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ImageVerification = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet ImageVerification = class ImageVerification {\n};\nexports.ImageVerification = ImageVerification;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], ImageVerification.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'post_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], ImageVerification.prototype, "postUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'image_url\', type: \'varchar\' }),\n    __metadata("design:type", String)\n], ImageVerification.prototype, "imageUrl", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_relevant\', type: \'boolean\' }),\n    __metadata("design:type", Boolean)\n], ImageVerification.prototype, "isRelevant", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'confidence\', type: \'decimal\', precision: 5, scale: 2 }),\n    __metadata("design:type", Number)\n], ImageVerification.prototype, "confidence", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'reasoning\', type: \'text\' }),\n    __metadata("design:type", String)\n], ImageVerification.prototype, "reasoning", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'suggested_action\',\n        type: \'varchar\',\n        enum: [\'approve\', \'reject\', \'review\'],\n    }),\n    __metadata("design:type", String)\n], ImageVerification.prototype, "suggestedAction", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'status\',\n        type: \'varchar\',\n        default: \'pending\',\n    }),\n    __metadata("design:type", String)\n], ImageVerification.prototype, "status", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'reviewer_uuid\',\n        type: \'varchar\',\n        length: 26,\n        nullable: true,\n    }),\n    __metadata("design:type", String)\n], ImageVerification.prototype, "reviewerUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'review_comment\', type: \'text\', nullable: true }),\n    __metadata("design:type", String)\n], ImageVerification.prototype, "reviewComment", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], ImageVerification.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], ImageVerification.prototype, "updatedAt", void 0);\nexports.ImageVerification = ImageVerification = __decorate([\n    (0, typeorm_1.Entity)(\'image_verification\')\n], ImageVerification);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/image-verification.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/like.entity.ts':
      /*!*************************************!*\
  !*** ./src/entities/like.entity.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Like = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Like = class Like {\n};\nexports.Like = Like;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], Like.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'user_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Like.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'post_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Like.prototype, "postUuid", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Like.prototype, "createdAt", void 0);\nexports.Like = Like = __decorate([\n    (0, typeorm_1.Entity)(\'like\')\n], Like);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/like.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/mission-participation.entity.ts':
      /*!******************************************************!*\
  !*** ./src/entities/mission-participation.entity.ts ***!
  \******************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MissionParticipation = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet MissionParticipation = class MissionParticipation {\n};\nexports.MissionParticipation = MissionParticipation;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)(),\n    __metadata("design:type", Number)\n], MissionParticipation.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)(),\n    __metadata("design:type", String)\n], MissionParticipation.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)(),\n    __metadata("design:type", Number)\n], MissionParticipation.prototype, "missionId", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'timestamp\' }),\n    __metadata("design:type", Date)\n], MissionParticipation.prototype, "joinedAt", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ default: false }),\n    __metadata("design:type", Boolean)\n], MissionParticipation.prototype, "completed", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'double precision\', nullable: true }),\n    __metadata("design:type", Number)\n], MissionParticipation.prototype, "resultData", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)(),\n    __metadata("design:type", Date)\n], MissionParticipation.prototype, "createdAt", void 0);\nexports.MissionParticipation = MissionParticipation = __decorate([\n    (0, typeorm_1.Entity)()\n], MissionParticipation);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/mission-participation.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/mission.entity.ts':
      /*!****************************************!*\
  !*** ./src/entities/mission.entity.ts ***!
  \****************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Mission = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Mission = class Mission {\n};\nexports.Mission = Mission;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)(),\n    __metadata("design:type", Number)\n], Mission.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)(),\n    __metadata("design:type", String)\n], Mission.prototype, "title", void 0);\n__decorate([\n    (0, typeorm_1.Column)(\'text\'),\n    __metadata("design:type", String)\n], Mission.prototype, "description", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'enum\', enum: [\'distance\', \'steps\', \'calories\'] }),\n    __metadata("design:type", String)\n], Mission.prototype, "type", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'timestamp\' }),\n    __metadata("design:type", Date)\n], Mission.prototype, "startTime", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'timestamp\' }),\n    __metadata("design:type", Date)\n], Mission.prototype, "endTime", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'int\', nullable: true }),\n    __metadata("design:type", Number)\n], Mission.prototype, "durationSeconds", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'int\', default: 0 }),\n    __metadata("design:type", Number)\n], Mission.prototype, "reward", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'boolean\', default: false }),\n    __metadata("design:type", Boolean)\n], Mission.prototype, "isLongTerm", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)(),\n    __metadata("design:type", Date)\n], Mission.prototype, "createdAt", void 0);\nexports.Mission = Mission = __decorate([\n    (0, typeorm_1.Entity)()\n], Mission);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/mission.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/notification.entity.ts':
      /*!*********************************************!*\
  !*** ./src/entities/notification.entity.ts ***!
  \*********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Notification = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nconst notification_enum_1 = __webpack_require__(/*! ../types/notification.enum */ "./src/types/notification.enum.ts");\nlet Notification = class Notification {\n};\nexports.Notification = Notification;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], Notification.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'recipient_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Notification.prototype, "recipientUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'sender_uuid\', type: \'varchar\', length: 26, nullable: true }),\n    __metadata("design:type", String)\n], Notification.prototype, "senderUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'type\',\n        type: \'enum\',\n        enum: notification_enum_1.NotificationType,\n    }),\n    __metadata("design:type", String)\n], Notification.prototype, "type", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'title\', type: \'varchar\' }),\n    __metadata("design:type", String)\n], Notification.prototype, "title", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'content\', type: \'text\' }),\n    __metadata("design:type", String)\n], Notification.prototype, "content", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'data\', type: \'json\', nullable: true }),\n    __metadata("design:type", Object)\n], Notification.prototype, "data", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_read\', type: \'boolean\', default: false }),\n    __metadata("design:type", Boolean)\n], Notification.prototype, "isRead", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_sent\', type: \'boolean\', default: false }),\n    __metadata("design:type", Boolean)\n], Notification.prototype, "isSent", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Notification.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Notification.prototype, "updatedAt", void 0);\nexports.Notification = Notification = __decorate([\n    (0, typeorm_1.Entity)(\'notification\')\n], Notification);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/notification.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/payment.entity.ts':
      /*!****************************************!*\
  !*** ./src/entities/payment.entity.ts ***!
  \****************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Payment = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Payment = class Payment {\n};\nexports.Payment = Payment;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)(),\n    __metadata("design:type", Number)\n], Payment.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)(),\n    __metadata("design:type", String)\n], Payment.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ nullable: true }),\n    __metadata("design:type", String)\n], Payment.prototype, "orderId", void 0);\n__decorate([\n    (0, typeorm_1.Column)(\'int\'),\n    __metadata("design:type", Number)\n], Payment.prototype, "amount", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ default: \'PENDING\' }),\n    __metadata("design:type", String)\n], Payment.prototype, "status", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)(),\n    __metadata("design:type", Date)\n], Payment.prototype, "createdAt", void 0);\nexports.Payment = Payment = __decorate([\n    (0, typeorm_1.Entity)()\n], Payment);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/payment.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/post.entity.ts':
      /*!*************************************!*\
  !*** ./src/entities/post.entity.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Post = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Post = class Post {\n};\nexports.Post = Post;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], Post.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'post_uuid\', type: \'varchar\', length: 26, unique: true }),\n    __metadata("design:type", String)\n], Post.prototype, "postUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'title\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Post.prototype, "title", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'user_uuid\', type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Post.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'challenge_uuid\',\n        type: \'varchar\',\n        length: 26,\n        nullable: true,\n    }),\n    __metadata("design:type", String)\n], Post.prototype, "challengeUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'content\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], Post.prototype, "content", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'image_url\', type: \'simple-array\' }),\n    __metadata("design:type", Array)\n], Post.prototype, "imageUrl", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_public\', type: \'boolean\', default: true }),\n    __metadata("design:type", Boolean)\n], Post.prototype, "isPublic", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'views\', type: \'int\', default: 0 }),\n    __metadata("design:type", Number)\n], Post.prototype, "views", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'verification_status\',\n        type: \'varchar\',\n        default: \'pending\',\n        nullable: true,\n    }),\n    __metadata("design:type", String)\n], Post.prototype, "verificationStatus", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'ai_confidence\',\n        type: \'decimal\',\n        precision: 5,\n        scale: 2,\n        nullable: true,\n    }),\n    __metadata("design:type", Number)\n], Post.prototype, "aiConfidence", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'ai_analysis_result\', type: \'text\', nullable: true }),\n    __metadata("design:type", String)\n], Post.prototype, "aiAnalysisResult", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'verified_at\', type: \'timestamptz\', nullable: true }),\n    __metadata("design:type", Date)\n], Post.prototype, "verifiedAt", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Post.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Post.prototype, "updatedAt", void 0);\nexports.Post = Post = __decorate([\n    (0, typeorm_1.Entity)(\'post\')\n], Post);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/post.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/suspicion.entity.ts':
      /*!******************************************!*\
  !*** ./src/entities/suspicion.entity.ts ***!
  \******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Suspicion = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Suspicion = class Suspicion {\n};\nexports.Suspicion = Suspicion;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)(),\n    __metadata("design:type", Number)\n], Suspicion.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Suspicion.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ type: \'varchar\', length: 26 }),\n    __metadata("design:type", String)\n], Suspicion.prototype, "postUuid", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], Suspicion.prototype, "createdAt", void 0);\nexports.Suspicion = Suspicion = __decorate([\n    (0, typeorm_1.Entity)(\'suspicion\'),\n    (0, typeorm_1.Unique)([\'userUuid\', \'postUuid\'])\n], Suspicion);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/suspicion.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/user.entity.ts':
      /*!*************************************!*\
  !*** ./src/entities/user.entity.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.User = void 0;\nconst social_provider_enum_1 = __webpack_require__(/*! ../types/social-provider.enum */ "./src/types/social-provider.enum.ts");\nconst user_status_enum_1 = __webpack_require__(/*! ../types/user-status.enum */ "./src/types/user-status.enum.ts");\nconst challenge_enum_1 = __webpack_require__(/*! ../types/challenge.enum */ "./src/types/challenge.enum.ts");\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet User = class User {\n};\nexports.User = User;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)({ name: \'id\' }),\n    __metadata("design:type", Number)\n], User.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'user_uuid\', type: \'varchar\', length: 26, unique: true }),\n    __metadata("design:type", String)\n], User.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'nickname\', type: \'varchar\', unique: true, nullable: true }),\n    __metadata("design:type", String)\n], User.prototype, "nickname", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'socialNickname\', type: \'varchar\' }),\n    __metadata("design:type", String)\n], User.prototype, "socialNickname", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'profile_image\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], User.prototype, "profileImage", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'social_provider\', type: \'enum\', enum: social_provider_enum_1.SocialProvider }),\n    __metadata("design:type", String)\n], User.prototype, "socialProvider", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'social_id\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], User.prototype, "socialId", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'introduction\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], User.prototype, "introduction", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'birth_date\', type: \'date\', nullable: true }),\n    __metadata("design:type", Date)\n], User.prototype, "birthDate", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'gender\',\n        type: \'enum\',\n        enum: challenge_enum_1.GenderType,\n        default: challenge_enum_1.GenderType.NONE,\n    }),\n    __metadata("design:type", String)\n], User.prototype, "gender", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'coins\', type: \'int\', default: 0 }),\n    __metadata("design:type", Number)\n], User.prototype, "coins", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'push_tokens\',\n        type: \'json\',\n        nullable: true,\n        comment: \'iOS/Android 푸시 토큰들을 JSON 배열로 저장\',\n    }),\n    __metadata("design:type", Array)\n], User.prototype, "pushTokens", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'push_token\', type: \'varchar\', nullable: true }),\n    __metadata("design:type", String)\n], User.prototype, "pushToken", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ name: \'is_push_enabled\', type: \'boolean\', default: true }),\n    __metadata("design:type", Boolean)\n], User.prototype, "isPushEnabled", void 0);\n__decorate([\n    (0, typeorm_1.Column)({\n        name: \'status\',\n        type: \'enum\',\n        enum: user_status_enum_1.UserStatusType,\n        default: user_status_enum_1.UserStatusType.INCOMPLETE,\n    }),\n    __metadata("design:type", String)\n], User.prototype, "status", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)({ name: \'created_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], User.prototype, "createdAt", void 0);\n__decorate([\n    (0, typeorm_1.UpdateDateColumn)({ name: \'updated_at\', type: \'timestamptz\' }),\n    __metadata("design:type", Date)\n], User.prototype, "updatedAt", void 0);\nexports.User = User = __decorate([\n    (0, typeorm_1.Entity)(\'user\')\n], User);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/user.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/entities/withdrawal.entity.ts':
      /*!*******************************************!*\
  !*** ./src/entities/withdrawal.entity.ts ***!
  \*******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Withdrawal = void 0;\nconst typeorm_1 = __webpack_require__(/*! typeorm */ "typeorm");\nlet Withdrawal = class Withdrawal {\n};\nexports.Withdrawal = Withdrawal;\n__decorate([\n    (0, typeorm_1.PrimaryGeneratedColumn)(),\n    __metadata("design:type", Number)\n], Withdrawal.prototype, "id", void 0);\n__decorate([\n    (0, typeorm_1.Column)(),\n    __metadata("design:type", String)\n], Withdrawal.prototype, "userUuid", void 0);\n__decorate([\n    (0, typeorm_1.Column)(),\n    __metadata("design:type", String)\n], Withdrawal.prototype, "accountNumber", void 0);\n__decorate([\n    (0, typeorm_1.Column)(\'int\'),\n    __metadata("design:type", Number)\n], Withdrawal.prototype, "amount", void 0);\n__decorate([\n    (0, typeorm_1.Column)({ default: \'PENDING\' }),\n    __metadata("design:type", String)\n], Withdrawal.prototype, "status", void 0);\n__decorate([\n    (0, typeorm_1.CreateDateColumn)(),\n    __metadata("design:type", Date)\n], Withdrawal.prototype, "createdAt", void 0);\nexports.Withdrawal = Withdrawal = __decorate([\n    (0, typeorm_1.Entity)()\n], Withdrawal);\n\n\n//# sourceURL=webpack://soapft-backend/./src/entities/withdrawal.entity.ts?\n}',
        );

        /***/
      },

    /***/ './src/main.ts':
      /*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
      /***/ (module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst dotenv = __webpack_require__(/*! dotenv */ \"dotenv\");\ndotenv.config({ path: `env/.${\"development\" || 0}.env` });\nconst crypto = __webpack_require__(/*! crypto */ \"crypto\");\ntry {\n    if (typeof global !== 'undefined' && !global.crypto) {\n        Object.defineProperty(global, 'crypto', {\n            value: crypto,\n            writable: false,\n            configurable: true,\n        });\n    }\n}\ncatch { }\nconst core_1 = __webpack_require__(/*! @nestjs/core */ \"@nestjs/core\");\nconst app_module_1 = __webpack_require__(/*! ./app.module */ \"./src/app.module.ts\");\nconst config_1 = __webpack_require__(/*! @nestjs/config */ \"@nestjs/config\");\nconst nest_winston_1 = __webpack_require__(/*! nest-winston */ \"nest-winston\");\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst global_exception_filter_1 = __webpack_require__(/*! ./utils/global-exception.filter */ \"./src/utils/global-exception.filter.ts\");\nasync function bootstrap() {\n    const app = await core_1.NestFactory.create(app_module_1.AppModule, {\n        logger:  false\n            ? 0\n            : ['error', 'warn', 'log', 'debug', 'verbose'],\n    });\n    const configService = app.get(config_1.ConfigService);\n    app.useLogger(app.get(nest_winston_1.WINSTON_MODULE_NEST_PROVIDER));\n    app.setGlobalPrefix('api');\n    app.useGlobalPipes(new common_1.ValidationPipe({\n        whitelist: true,\n        forbidNonWhitelisted: true,\n        transform: true,\n    }));\n    app.useGlobalFilters(new global_exception_filter_1.GlobalExceptionFilter());\n    app.enableCors({\n        origin: true,\n        credentials: true,\n    });\n    const config = new swagger_1.DocumentBuilder()\n        .setTitle('SOAPFT API')\n        .setDescription('SOAPFT API documentation')\n        .setVersion(process.env.npm_package_version || '0.0.1')\n        .addBearerAuth({\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n        name: 'Authorization',\n        description: 'Enter JWT token',\n        in: 'header',\n    }, 'JWT-auth')\n        .build();\n    const document = swagger_1.SwaggerModule.createDocument(app, config);\n    swagger_1.SwaggerModule.setup('api/docs', app, document, {\n        swaggerOptions: {\n            filter: true,\n            persistAuthorization: true,\n            defaultModelsExpandDepth: -1,\n            displayRequestDuration: true,\n            deepLinking: true,\n        },\n    });\n    const port = configService.get('PORT') ?? 7777;\n    await app.listen(port);\n    console.log(`💧SOAPFT ${port}번 포트에서 실행중입니다.`);\n    if (true) {\n        module.hot.accept();\n        module.hot.dispose(() => app.close());\n    }\n}\nbootstrap();\n\n\n//# sourceURL=webpack://soapft-backend/./src/main.ts?\n}",
        );

        /***/
      },

    /***/ './src/middlewares/http-logger.middleware.ts':
      /*!***************************************************!*\
  !*** ./src/middlewares/http-logger.middleware.ts ***!
  \***************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpLoggerMiddleware = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst logger_service_1 = __webpack_require__(/*! ../utils/logger.service */ \"./src/utils/logger.service.ts\");\nlet HttpLoggerMiddleware = class HttpLoggerMiddleware {\n    constructor() {\n        this.logger = logger_service_1.LoggerService.getInstance().logger;\n    }\n    use(req, res, next) {\n        const { method, originalUrl, ip, body } = req;\n        const userAgent = req.get('user-agent') || '';\n        const startTime = Date.now();\n        this.logger.debug(`Request: ${method} ${originalUrl}`, {\n            ip,\n            userAgent,\n            body: this.sanitizeBody(body),\n            context: 'HttpLogger',\n        });\n        const originalEnd = res.end;\n        res.end = function (chunk, encoding) {\n            const responseTime = Date.now() - startTime;\n            originalEnd.call(this, chunk, encoding);\n            logger_service_1.LoggerService.getInstance().logger.debug(`Response: ${method} ${originalUrl} ${res.statusCode}`, {\n                responseTime: `${responseTime}ms`,\n                context: 'HttpLogger',\n            });\n        };\n        next();\n    }\n    sanitizeBody(body) {\n        if (!body)\n            return body;\n        const sanitized = { ...body };\n        const sensitiveFields = ['password', 'token', 'secret', 'authorization'];\n        for (const field of sensitiveFields) {\n            if (field in sanitized) {\n                sanitized[field] = '***';\n            }\n        }\n        return sanitized;\n    }\n};\nexports.HttpLoggerMiddleware = HttpLoggerMiddleware;\nexports.HttpLoggerMiddleware = HttpLoggerMiddleware = __decorate([\n    (0, common_1.Injectable)()\n], HttpLoggerMiddleware);\n\n\n//# sourceURL=webpack://soapft-backend/./src/middlewares/http-logger.middleware.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/ai/ai.module.ts':
      /*!*************************************!*\
  !*** ./src/modules/ai/ai.module.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AiModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst ai_service_1 = __webpack_require__(/*! ./ai.service */ "./src/modules/ai/ai.service.ts");\nlet AiModule = class AiModule {\n};\nexports.AiModule = AiModule;\nexports.AiModule = AiModule = __decorate([\n    (0, common_1.Module)({\n        providers: [ai_service_1.AiService],\n        exports: [ai_service_1.AiService],\n    })\n], AiModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/ai/ai.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/ai/ai.service.ts':
      /*!**************************************!*\
  !*** ./src/modules/ai/ai.service.ts ***!
  \**************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar AiService_1;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.AiService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst client_bedrock_runtime_1 = __webpack_require__(/*! @aws-sdk/client-bedrock-runtime */ "@aws-sdk/client-bedrock-runtime");\nlet AiService = AiService_1 = class AiService {\n    constructor() {\n        this.logger = new common_1.Logger(AiService_1.name);\n        this.bedrockClient = new client_bedrock_runtime_1.BedrockRuntimeClient({\n            region: process.env.BEDROCK_AWS_REGION || \'us-west-2\',\n            credentials: {\n                accessKeyId: process.env.AWS_ACCESS_KEY_ID,\n                secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,\n            },\n        });\n    }\n    async analyzeImageRelevance(imageBase64, challengeTitle, challengeDescription, verificationGuide) {\n        try {\n            const prompt = this.buildAnalysisPrompt(challengeTitle, challengeDescription, verificationGuide);\n            const modelId = process.env.BEDROCK_MODEL_ID ||\n                \'anthropic.claude-3-5-sonnet-20241022-v2:0\';\n            const command = new client_bedrock_runtime_1.InvokeModelCommand({\n                modelId: modelId,\n                body: JSON.stringify({\n                    anthropic_version: \'bedrock-2023-05-31\',\n                    max_tokens: 1000,\n                    messages: [\n                        {\n                            role: \'user\',\n                            content: [\n                                {\n                                    type: \'text\',\n                                    text: prompt,\n                                },\n                                {\n                                    type: \'image\',\n                                    source: {\n                                        type: \'base64\',\n                                        media_type: \'image/jpeg\',\n                                        data: imageBase64,\n                                    },\n                                },\n                            ],\n                        },\n                    ],\n                }),\n            });\n            const response = await this.bedrockClient.send(command);\n            const responseBody = JSON.parse(new TextDecoder().decode(response.body));\n            const analysisText = responseBody.content[0].text;\n            this.logger.debug(`AI 분석 응답: ${analysisText}`);\n            return this.parseAnalysisResult(analysisText);\n        }\n        catch (error) {\n            this.logger.error(\'이미지 분석 중 오류 발생:\', error);\n            return {\n                isRelevant: false,\n                confidence: 0,\n                reasoning: `이미지 분석 중 오류가 발생했습니다.: ${error.message}`,\n                suggestedAction: \'reject\',\n            };\n        }\n    }\n    buildAnalysisPrompt(challengeTitle, challengeDescription, verificationGuide) {\n        const parseVerificationSteps = (guide) => {\n            if (!guide)\n                return [];\n            const steps = guide\n                .split(/\\n/)\n                .filter((line) => /^\\d+\\.|^step\\s+\\d+/i.test(line.trim()));\n            if (steps.length === 0) {\n                return guide.split(/\\n/).filter((line) => line.trim());\n            }\n            return steps;\n        };\n        const verificationSteps = parseVerificationSteps(verificationGuide);\n        const stepsText = verificationSteps.length > 0\n            ? verificationSteps\n                .map((step, idx) => `  ${idx + 1}. ${step.replace(/^\\d+\\.|^step\\s+\\d+\\.?/i, \'\').trim()}`)\n                .join(\'\\n\')\n            : verificationGuide || \'가이드 없음\';\n        return `\n당신은 챌린지 인증 이미지를 매우 엄격하게 분석하는 AI 전문가입니다. \n사용자가 업로드한 이미지가 챌린지의 인증 가이드를 정확히 따르고 있는지 단계별로 검증해주세요.\n\n**챌린지 정보:**\n- 제목: ${challengeTitle}\n- 설명: ${challengeDescription || \'설명 없음\'}\n\n**인증 가이드 (모든 단계를 빠짐없이 확인):**\n${stepsText}\n\n**⚠️ 핵심 검증 원칙:**\n1. 인증 가이드를 문자 그대로 해석하여 엄격하게 검증\n2. "보이도록", "표시", "인증할만한 요소" 등의 키워드가 있으면 해당 내용이 이미지에 반드시 명확히 보여야 함\n3. 간접적 증거나 관련 환경만으로는 불충분 - 직접적인 증빙 필요\n\n**검증 프로세스:**\n\n【Step 1】 인증 가이드 요구사항 분석\n각 단계별로 반드시 확인해야 할 핵심 요소 추출:\n- "걸음수/횟수/시간" 등 수치 언급 → 해당 숫자가 화면에 표시되어야 함\n- "측정한다" → 측정 결과가 보여야 함  \n- "인증할만한 요소가 보이도록" → 명시된 요소가 명확히 식별 가능해야 함\n- "사진을 찍어" → 해당 활동의 직접적 증거 필요\n\n【Step 2】 이미지 검증\n인증 가이드의 각 요구사항별로 체크:\n□ Step 1 요구사항: [충족/미충족] - 구체적 근거\n□ Step 2 요구사항: [충족/미충족] - 구체적 근거  \n□ Step 3 요구사항: [충족/미충족] - 구체적 근거\n\n【Step 3】 엄격한 평가 기준 적용\n\n**구체적 검증 예시:**\n- "만보 이상의 걸음수를 인증할만한 요소가 보이도록" \n  → ✅ 10,000보 이상 숫자가 앱/기기 화면에 표시\n  → ❌ 단순 런닝머신이나 운동 장비 사진\n  \n- "운동 시간이 표시된 화면"\n  → ✅ 운동 시간이 숫자로 명확히 표시된 화면\n  → ❌ 시계나 운동 중인 모습만 있는 사진\n\n- "독서 페이지 인증"  \n  → ✅ 책과 함께 읽은 페이지 수가 표시된 증빙\n  → ❌ 단순 책 표지나 독서 공간 사진\n\n**신뢰도 점수 기준:**\n- 80-100점: 모든 인증 가이드 요구사항을 명확하게 충족 → APPROVE\n- 60-79점: 핵심 요구사항은 충족하나 일부 불명확 → 엄격 판단하여 APPROVE/REJECT 결정\n- 40-59점: 일부 요구사항만 충족, 핵심 증빙 불충분 → REJECT\n- 0-39점: 요구사항 대부분 미충족 또는 무관 → REJECT\n\n**APPROVE 조건 (모두 충족해야 함):**\n✓ 인증 가이드의 모든 핵심 요구사항 충족\n✓ "보이도록", "표시" 등 요구한 요소가 명확히 식별 가능\n✓ 실제 활동을 직접적으로 증명하는 내용\n\n**REJECT 조건 (하나라도 해당되면):**\n✗ 인증 가이드 핵심 요구사항 중 하나라도 미충족\n✗ "보이도록" 요구한 요소가 보이지 않음  \n✗ 수치/데이터를 요구했는데 해당 정보 없음\n✗ 간접적 증거만 있고 직접적 증빙 없음\n✗ 관련 환경이나 도구만 보이고 실제 활동 증빙 없음\n\n**명확한 판단 원칙:**\n- 의심스럽거나 불확실하면 → REJECT\n- 요구사항을 "거의" 충족하면 → REJECT (거의는 미충족)\n- 관련은 있지만 정확하지 않으면 → REJECT\n\n**응답 형식 (JSON):**\n{\n  "isRelevant": true/false,\n  "confidence": 0-100 (숫자),\n  "reasoning": "인증 가이드 각 Step별로: [Step 1] 충족/미충족 - 구체적 이유, [Step 2] 충족/미충족 - 구체적 이유, [Step 3] 충족/미충족 - 구체적 이유. 미충족시 정확히 어떤 요소가 부족한지 명시",\n  "suggestedAction": "approve/reject"\n}\n\n**최종 판단 (review 사용 금지):**\n- approve: 모든 핵심 요구사항을 명확히 충족하는 경우만\n- reject: 그 외 모든 경우 (애매하면 reject)\n\n이미지를 분석하고 reasoning 필드는 반드시 한글로 작성하여 JSON 형식으로만 응답해주세요.\n    `;\n    }\n    parseAnalysisResult(analysisText) {\n        try {\n            const jsonMatch = analysisText.match(/\\{[\\s\\S]*\\}/);\n            if (!jsonMatch) {\n                throw new Error(\'JSON 형식을 찾을 수 없습니다.\');\n            }\n            const result = JSON.parse(jsonMatch[0]);\n            return {\n                isRelevant: Boolean(result.isRelevant),\n                confidence: Math.max(0, Math.min(100, Number(result.confidence) || 0)),\n                reasoning: String(result.reasoning || \'분석 결과 없음\'),\n                suggestedAction: [\'approve\', \'reject\'].includes(result.suggestedAction)\n                    ? result.suggestedAction\n                    : \'reject\',\n            };\n        }\n        catch (error) {\n            this.logger.error(\'AI 분석 결과 파싱 오류:\', error);\n            return {\n                isRelevant: false,\n                confidence: 0,\n                reasoning: \'분석 결과를 파싱할 수 없습니다.\',\n                suggestedAction: \'reject\',\n            };\n        }\n    }\n    async analyzeMultipleImages(imageBase64Array, challengeTitle, challengeDescription, verificationGuide) {\n        const promises = imageBase64Array.map((imageBase64) => this.analyzeImageRelevance(imageBase64, challengeTitle, challengeDescription, verificationGuide));\n        return Promise.all(promises);\n    }\n    getFinalVerificationResult(results) {\n        if (results.length === 0) {\n            return {\n                overallResult: \'rejected\',\n                averageConfidence: 0,\n                details: [],\n            };\n        }\n        const approvedCount = results.filter((r) => r.suggestedAction === \'approve\').length;\n        const averageConfidence = results.reduce((sum, r) => sum + r.confidence, 0) / results.length;\n        if (approvedCount === results.length) {\n            return {\n                overallResult: \'approved\',\n                averageConfidence,\n                details: results,\n            };\n        }\n        return {\n            overallResult: \'rejected\',\n            averageConfidence,\n            details: results,\n        };\n    }\n};\nexports.AiService = AiService;\nexports.AiService = AiService = AiService_1 = __decorate([\n    (0, common_1.Injectable)(),\n    __metadata("design:paramtypes", [])\n], AiService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/ai/ai.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/bo/bo.controller.ts':
      /*!*****************************************!*\
  !*** ./src/modules/bo/bo.controller.ts ***!
  \*****************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst bo_service_1 = __webpack_require__(/*! ./bo.service */ \"./src/modules/bo/bo.service.ts\");\nconst update_user_dto_1 = __webpack_require__(/*! ./dto/update-user.dto */ \"./src/modules/bo/dto/update-user.dto.ts\");\nconst update_post_dto_1 = __webpack_require__(/*! ./dto/update-post.dto */ \"./src/modules/bo/dto/update-post.dto.ts\");\nconst update_comment_dto_1 = __webpack_require__(/*! ./dto/update-comment.dto */ \"./src/modules/bo/dto/update-comment.dto.ts\");\nconst update_challenge_dto_1 = __webpack_require__(/*! ./dto/update-challenge.dto */ \"./src/modules/bo/dto/update-challenge.dto.ts\");\nconst bo_swagger_1 = __webpack_require__(/*! ./decorators/bo.swagger */ \"./src/modules/bo/decorators/bo.swagger.ts\");\nlet BoController = class BoController {\n    constructor(boService) {\n        this.boService = boService;\n    }\n    async getDashboardStats() {\n        return this.boService.getDashboardStats();\n    }\n    async getUsers(page, limit, search) {\n        return this.boService.getUsers(page, limit, search);\n    }\n    async getUserDetail(userUuid) {\n        return this.boService.getUserDetail(userUuid);\n    }\n    async getPosts(page, limit, search) {\n        return this.boService.getPosts(page, limit, search);\n    }\n    async getPostDetail(postUuid) {\n        return this.boService.getPostDetail(postUuid);\n    }\n    async getComments(page, limit, search) {\n        return this.boService.getComments(page, limit, search);\n    }\n    async getChallenges(page, limit, search) {\n        return this.boService.getChallenges(page, limit, search);\n    }\n    async getChallengeDetail(challengeUuid) {\n        return this.boService.getChallengeDetail(challengeUuid);\n    }\n    async getNotifications(page, limit) {\n        return this.boService.getNotifications(page, limit);\n    }\n    async getFriendships(page, limit) {\n        return this.boService.getFriendships(page, limit);\n    }\n    async updateUser(userUuid, updateUserDto) {\n        return this.boService.updateUser(userUuid, updateUserDto);\n    }\n    async deleteUser(userUuid) {\n        return this.boService.deleteUser(userUuid);\n    }\n    async updatePost(postUuid, updatePostDto) {\n        return this.boService.updatePost(postUuid, updatePostDto);\n    }\n    async deletePost(postUuid) {\n        return this.boService.deletePost(postUuid);\n    }\n    async updateComment(commentId, updateCommentDto) {\n        return this.boService.updateComment(commentId, updateCommentDto);\n    }\n    async deleteComment(commentId) {\n        return this.boService.deleteComment(commentId);\n    }\n    async updateChallenge(challengeUuid, updateChallengeDto) {\n        return this.boService.updateChallenge(challengeUuid, updateChallengeDto);\n    }\n    async deleteChallenge(challengeUuid) {\n        return this.boService.deleteChallenge(challengeUuid);\n    }\n};\nexports.BoController = BoController;\n__decorate([\n    (0, common_1.Get)('dashboard/stats'),\n    (0, swagger_1.ApiOperation)({\n        summary: '대시보드 통계 조회',\n        description: '전체 데이터 통계와 오늘 생성된 데이터 통계를 조회합니다.',\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getDashboardStats\", null);\n__decorate([\n    (0, common_1.Get)('users'),\n    (0, swagger_1.ApiOperation)({\n        summary: '사용자 목록 조회',\n        description: '페이지네이션과 검색 기능이 포함된 사용자 목록을 조회합니다.',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지 크기 (기본값: 20)',\n    }),\n    (0, swagger_1.ApiQuery)({ name: 'search', required: false, description: '닉네임 검색어' }),\n    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(20), common_1.ParseIntPipe)),\n    __param(2, (0, common_1.Query)('search')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, Number, String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getUsers\", null);\n__decorate([\n    (0, common_1.Get)('users/:userUuid'),\n    (0, swagger_1.ApiOperation)({\n        summary: '사용자 상세 조회',\n        description: '특정 사용자의 상세 정보와 통계를 조회합니다.',\n    }),\n    (0, swagger_1.ApiParam)({ name: 'userUuid', description: '사용자 UUID' }),\n    __param(0, (0, common_1.Param)('userUuid')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getUserDetail\", null);\n__decorate([\n    (0, common_1.Get)('posts'),\n    (0, swagger_1.ApiOperation)({\n        summary: '게시글 목록 조회',\n        description: '페이지네이션과 검색 기능이 포함된 게시글 목록을 조회합니다.',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지 크기 (기본값: 20)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'search',\n        required: false,\n        description: '제목/내용 검색어',\n    }),\n    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(20), common_1.ParseIntPipe)),\n    __param(2, (0, common_1.Query)('search')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, Number, String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getPosts\", null);\n__decorate([\n    (0, common_1.Get)('posts/:postUuid'),\n    (0, swagger_1.ApiOperation)({\n        summary: '게시글 상세 조회',\n        description: '특정 게시글의 상세 정보, 댓글, 좋아요 수를 조회합니다.',\n    }),\n    (0, swagger_1.ApiParam)({ name: 'postUuid', description: '게시글 UUID' }),\n    __param(0, (0, common_1.Param)('postUuid')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getPostDetail\", null);\n__decorate([\n    (0, common_1.Get)('comments'),\n    (0, swagger_1.ApiOperation)({\n        summary: '댓글 목록 조회',\n        description: '페이지네이션과 검색 기능이 포함된 댓글 목록을 조회합니다.',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지 크기 (기본값: 20)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'search',\n        required: false,\n        description: '댓글 내용 검색어',\n    }),\n    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(20), common_1.ParseIntPipe)),\n    __param(2, (0, common_1.Query)('search')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, Number, String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getComments\", null);\n__decorate([\n    (0, common_1.Get)('challenges'),\n    (0, swagger_1.ApiOperation)({\n        summary: '챌린지 목록 조회',\n        description: '페이지네이션과 검색 기능이 포함된 챌린지 목록을 조회합니다.',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지 크기 (기본값: 20)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'search',\n        required: false,\n        description: '제목/소개 검색어',\n    }),\n    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(20), common_1.ParseIntPipe)),\n    __param(2, (0, common_1.Query)('search')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, Number, String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getChallenges\", null);\n__decorate([\n    (0, common_1.Get)('challenges/:challengeUuid'),\n    (0, swagger_1.ApiOperation)({\n        summary: '챌린지 상세 조회',\n        description: '특정 챌린지의 상세 정보와 관련 게시글을 조회합니다.',\n    }),\n    (0, swagger_1.ApiParam)({ name: 'challengeUuid', description: '챌린지 UUID' }),\n    __param(0, (0, common_1.Param)('challengeUuid')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getChallengeDetail\", null);\n__decorate([\n    (0, common_1.Get)('notifications'),\n    (0, swagger_1.ApiOperation)({\n        summary: '알림 목록 조회',\n        description: '페이지네이션이 포함된 알림 목록을 조회합니다.',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지 크기 (기본값: 20)',\n    }),\n    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(20), common_1.ParseIntPipe)),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, Number]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getNotifications\", null);\n__decorate([\n    (0, common_1.Get)('friendships'),\n    (0, swagger_1.ApiOperation)({\n        summary: '친구 관계 목록 조회',\n        description: '페이지네이션이 포함된 친구 관계 목록을 조회합니다.',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n    }),\n    (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지 크기 (기본값: 20)',\n    }),\n    __param(0, (0, common_1.Query)('page', new common_1.DefaultValuePipe(1), common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Query)('limit', new common_1.DefaultValuePipe(20), common_1.ParseIntPipe)),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, Number]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"getFriendships\", null);\n__decorate([\n    (0, common_1.Put)('users/:userUuid'),\n    (0, bo_swagger_1.ApiUpdateUser)(),\n    __param(0, (0, common_1.Param)('userUuid')),\n    __param(1, (0, common_1.Body)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String, update_user_dto_1.UpdateUserDto]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"updateUser\", null);\n__decorate([\n    (0, common_1.Delete)('users/:userUuid'),\n    (0, bo_swagger_1.ApiDeleteUser)(),\n    __param(0, (0, common_1.Param)('userUuid')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"deleteUser\", null);\n__decorate([\n    (0, common_1.Put)('posts/:postUuid'),\n    (0, bo_swagger_1.ApiUpdatePost)(),\n    __param(0, (0, common_1.Param)('postUuid')),\n    __param(1, (0, common_1.Body)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String, update_post_dto_1.UpdatePostDto]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"updatePost\", null);\n__decorate([\n    (0, common_1.Delete)('posts/:postUuid'),\n    (0, bo_swagger_1.ApiDeletePost)(),\n    __param(0, (0, common_1.Param)('postUuid')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"deletePost\", null);\n__decorate([\n    (0, common_1.Put)('comments/:commentId'),\n    (0, bo_swagger_1.ApiUpdateComment)(),\n    __param(0, (0, common_1.Param)('commentId', common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Body)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number, update_comment_dto_1.UpdateCommentDto]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"updateComment\", null);\n__decorate([\n    (0, common_1.Delete)('comments/:commentId'),\n    (0, bo_swagger_1.ApiDeleteComment)(),\n    __param(0, (0, common_1.Param)('commentId', common_1.ParseIntPipe)),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Number]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"deleteComment\", null);\n__decorate([\n    (0, common_1.Put)('challenges/:challengeUuid'),\n    (0, bo_swagger_1.ApiUpdateChallenge)(),\n    __param(0, (0, common_1.Param)('challengeUuid')),\n    __param(1, (0, common_1.Body)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String, update_challenge_dto_1.UpdateChallengeDto]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"updateChallenge\", null);\n__decorate([\n    (0, common_1.Delete)('challenges/:challengeUuid'),\n    (0, bo_swagger_1.ApiDeleteChallenge)(),\n    __param(0, (0, common_1.Param)('challengeUuid')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Promise)\n], BoController.prototype, \"deleteChallenge\", null);\nexports.BoController = BoController = __decorate([\n    (0, swagger_1.ApiTags)('BO (Back Office)'),\n    (0, common_1.Controller)('bo'),\n    __metadata(\"design:paramtypes\", [bo_service_1.BoService])\n], BoController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/bo.controller.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/bo/bo.module.ts':
      /*!*************************************!*\
  !*** ./src/modules/bo/bo.module.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.BoModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst user_entity_1 = __webpack_require__(/*! ../../entities/user.entity */ "./src/entities/user.entity.ts");\nconst post_entity_1 = __webpack_require__(/*! ../../entities/post.entity */ "./src/entities/post.entity.ts");\nconst comment_entity_1 = __webpack_require__(/*! ../../entities/comment.entity */ "./src/entities/comment.entity.ts");\nconst challenge_entity_1 = __webpack_require__(/*! ../../entities/challenge.entity */ "./src/entities/challenge.entity.ts");\nconst like_entity_1 = __webpack_require__(/*! ../../entities/like.entity */ "./src/entities/like.entity.ts");\nconst friendship_entity_1 = __webpack_require__(/*! ../../entities/friendship.entity */ "./src/entities/friendship.entity.ts");\nconst chat_room_entity_1 = __webpack_require__(/*! ../../entities/chat-room.entity */ "./src/entities/chat-room.entity.ts");\nconst chat_message_entity_1 = __webpack_require__(/*! ../../entities/chat-message.entity */ "./src/entities/chat-message.entity.ts");\nconst notification_entity_1 = __webpack_require__(/*! ../../entities/notification.entity */ "./src/entities/notification.entity.ts");\nconst bo_controller_1 = __webpack_require__(/*! ./bo.controller */ "./src/modules/bo/bo.controller.ts");\nconst bo_service_1 = __webpack_require__(/*! ./bo.service */ "./src/modules/bo/bo.service.ts");\nlet BoModule = class BoModule {\n};\nexports.BoModule = BoModule;\nexports.BoModule = BoModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([\n                user_entity_1.User,\n                post_entity_1.Post,\n                comment_entity_1.Comment,\n                challenge_entity_1.Challenge,\n                like_entity_1.Like,\n                friendship_entity_1.Friendship,\n                chat_room_entity_1.ChatRoom,\n                chat_message_entity_1.ChatMessage,\n                notification_entity_1.Notification,\n            ]),\n        ],\n        controllers: [bo_controller_1.BoController],\n        providers: [bo_service_1.BoService],\n    })\n], BoModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/bo.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/bo/bo.service.ts':
      /*!**************************************!*\
  !*** ./src/modules/bo/bo.service.ts ***!
  \**************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BoService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ \"@nestjs/typeorm\");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst user_entity_1 = __webpack_require__(/*! ../../entities/user.entity */ \"./src/entities/user.entity.ts\");\nconst post_entity_1 = __webpack_require__(/*! ../../entities/post.entity */ \"./src/entities/post.entity.ts\");\nconst comment_entity_1 = __webpack_require__(/*! ../../entities/comment.entity */ \"./src/entities/comment.entity.ts\");\nconst challenge_entity_1 = __webpack_require__(/*! ../../entities/challenge.entity */ \"./src/entities/challenge.entity.ts\");\nconst like_entity_1 = __webpack_require__(/*! ../../entities/like.entity */ \"./src/entities/like.entity.ts\");\nconst friendship_entity_1 = __webpack_require__(/*! ../../entities/friendship.entity */ \"./src/entities/friendship.entity.ts\");\nconst chat_room_entity_1 = __webpack_require__(/*! ../../entities/chat-room.entity */ \"./src/entities/chat-room.entity.ts\");\nconst chat_message_entity_1 = __webpack_require__(/*! ../../entities/chat-message.entity */ \"./src/entities/chat-message.entity.ts\");\nconst notification_entity_1 = __webpack_require__(/*! ../../entities/notification.entity */ \"./src/entities/notification.entity.ts\");\nlet BoService = class BoService {\n    constructor(userRepository, postRepository, commentRepository, challengeRepository, likeRepository, friendshipRepository, chatRoomRepository, chatMessageRepository, notificationRepository) {\n        this.userRepository = userRepository;\n        this.postRepository = postRepository;\n        this.commentRepository = commentRepository;\n        this.challengeRepository = challengeRepository;\n        this.likeRepository = likeRepository;\n        this.friendshipRepository = friendshipRepository;\n        this.chatRoomRepository = chatRoomRepository;\n        this.chatMessageRepository = chatMessageRepository;\n        this.notificationRepository = notificationRepository;\n    }\n    async getDashboardStats() {\n        const [totalUsers, totalPosts, totalComments, totalChallenges, totalLikes, totalFriendships, totalChatRooms, totalNotifications,] = await Promise.all([\n            this.userRepository.count(),\n            this.postRepository.count(),\n            this.commentRepository.count(),\n            this.challengeRepository.count(),\n            this.likeRepository.count(),\n            this.friendshipRepository.count(),\n            this.chatRoomRepository.count(),\n            this.notificationRepository.count(),\n        ]);\n        const today = new Date();\n        today.setHours(0, 0, 0, 0);\n        const [todayUsers, todayPosts, todayComments, todayChallenges] = await Promise.all([\n            this.userRepository.count({\n                where: { createdAt: (0, typeorm_2.MoreThanOrEqual)(today) },\n            }),\n            this.postRepository.count({\n                where: { createdAt: (0, typeorm_2.MoreThanOrEqual)(today) },\n            }),\n            this.commentRepository.count({\n                where: { createdAt: (0, typeorm_2.MoreThanOrEqual)(today) },\n            }),\n            this.challengeRepository.count({\n                where: { createdAt: (0, typeorm_2.MoreThanOrEqual)(today) },\n            }),\n        ]);\n        return {\n            total: {\n                users: totalUsers,\n                posts: totalPosts,\n                comments: totalComments,\n                challenges: totalChallenges,\n                likes: totalLikes,\n                friendships: totalFriendships,\n                chatRooms: totalChatRooms,\n                notifications: totalNotifications,\n            },\n            today: {\n                users: todayUsers,\n                posts: todayPosts,\n                comments: todayComments,\n                challenges: todayChallenges,\n            },\n        };\n    }\n    async getUsers(page = 1, limit = 20, search) {\n        const queryBuilder = this.userRepository.createQueryBuilder('user');\n        if (search) {\n            queryBuilder.where('user.nickname ILIKE :search OR user.socialNickname ILIKE :search', { search: `%${search}%` });\n        }\n        const [users, total] = await queryBuilder\n            .orderBy('user.createdAt', 'DESC')\n            .skip((page - 1) * limit)\n            .take(limit)\n            .getManyAndCount();\n        return {\n            users,\n            total,\n            page,\n            limit,\n            totalPages: Math.ceil(total / limit),\n        };\n    }\n    async getUserDetail(userUuid) {\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n        });\n        if (!user) {\n            throw new Error('사용자를 찾을 수 없습니다.');\n        }\n        const [postCount, commentCount, likeCount, friendCount] = await Promise.all([\n            this.postRepository.count({ where: { userUuid } }),\n            this.commentRepository.count({ where: { userUuid } }),\n            this.likeRepository.count({ where: { userUuid } }),\n            this.friendshipRepository.count({\n                where: [{ requesterUuid: userUuid }, { addresseeUuid: userUuid }],\n            }),\n        ]);\n        return {\n            user,\n            stats: {\n                posts: postCount,\n                comments: commentCount,\n                likes: likeCount,\n                friends: friendCount,\n            },\n        };\n    }\n    async getPosts(page = 1, limit = 20, search) {\n        const queryBuilder = this.postRepository.createQueryBuilder('post');\n        if (search) {\n            queryBuilder.where('post.title ILIKE :search OR post.content ILIKE :search', { search: `%${search}%` });\n        }\n        const [posts, total] = await queryBuilder\n            .orderBy('post.createdAt', 'DESC')\n            .skip((page - 1) * limit)\n            .take(limit)\n            .getManyAndCount();\n        return {\n            posts,\n            total,\n            page,\n            limit,\n            totalPages: Math.ceil(total / limit),\n        };\n    }\n    async getPostDetail(postUuid) {\n        const post = await this.postRepository\n            .createQueryBuilder('post')\n            .where('post.postUuid = :postUuid', { postUuid })\n            .getOne();\n        if (!post) {\n            throw new Error('게시글을 찾을 수 없습니다.');\n        }\n        const comments = await this.commentRepository\n            .createQueryBuilder('comment')\n            .where('comment.postUuid = :postUuid', { postUuid })\n            .orderBy('comment.createdAt', 'ASC')\n            .getMany();\n        const likeCount = await this.likeRepository.count({\n            where: { postUuid },\n        });\n        return {\n            post,\n            comments,\n            likeCount,\n        };\n    }\n    async getComments(page = 1, limit = 20, search) {\n        const queryBuilder = this.commentRepository.createQueryBuilder('comment');\n        if (search) {\n            queryBuilder.where('comment.content ILIKE :search', {\n                search: `%${search}%`,\n            });\n        }\n        const [comments, total] = await queryBuilder\n            .orderBy('comment.createdAt', 'DESC')\n            .skip((page - 1) * limit)\n            .take(limit)\n            .getManyAndCount();\n        return {\n            comments,\n            total,\n            page,\n            limit,\n            totalPages: Math.ceil(total / limit),\n        };\n    }\n    async getChallenges(page = 1, limit = 20, search) {\n        const queryBuilder = this.challengeRepository.createQueryBuilder('challenge');\n        if (search) {\n            queryBuilder.where('challenge.title ILIKE :search OR challenge.introduce ILIKE :search', { search: `%${search}%` });\n        }\n        const [challenges, total] = await queryBuilder\n            .orderBy('challenge.createdAt', 'DESC')\n            .skip((page - 1) * limit)\n            .take(limit)\n            .getManyAndCount();\n        return {\n            challenges,\n            total,\n            page,\n            limit,\n            totalPages: Math.ceil(total / limit),\n        };\n    }\n    async getChallengeDetail(challengeUuid) {\n        const challenge = await this.challengeRepository\n            .createQueryBuilder('challenge')\n            .where('challenge.challengeUuid = :challengeUuid', { challengeUuid })\n            .getOne();\n        if (!challenge) {\n            throw new Error('챌린지를 찾을 수 없습니다.');\n        }\n        const posts = await this.postRepository\n            .createQueryBuilder('post')\n            .where('post.challengeUuid = :challengeUuid', { challengeUuid })\n            .orderBy('post.createdAt', 'DESC')\n            .limit(10)\n            .getMany();\n        return {\n            challenge,\n            posts,\n            participantCount: challenge.participantUuid?.length || 0,\n            successCount: challenge.successParticipantsUuid?.length || 0,\n        };\n    }\n    async getNotifications(page = 1, limit = 20) {\n        const [notifications, total] = await this.notificationRepository\n            .createQueryBuilder('notification')\n            .orderBy('notification.createdAt', 'DESC')\n            .skip((page - 1) * limit)\n            .take(limit)\n            .getManyAndCount();\n        return {\n            notifications,\n            total,\n            page,\n            limit,\n            totalPages: Math.ceil(total / limit),\n        };\n    }\n    async getFriendships(page = 1, limit = 20) {\n        const [friendships, total] = await this.friendshipRepository\n            .createQueryBuilder('friendship')\n            .orderBy('friendship.createdAt', 'DESC')\n            .skip((page - 1) * limit)\n            .take(limit)\n            .getManyAndCount();\n        return {\n            friendships,\n            total,\n            page,\n            limit,\n            totalPages: Math.ceil(total / limit),\n        };\n    }\n    async updateUser(userUuid, updateData) {\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n        });\n        if (!user) {\n            throw new Error('사용자를 찾을 수 없습니다.');\n        }\n        Object.assign(user, updateData);\n        user.updatedAt = new Date();\n        const updatedUser = await this.userRepository.save(user);\n        return {\n            success: true,\n            message: '사용자 정보가 수정되었습니다.',\n            user: updatedUser,\n        };\n    }\n    async deleteUser(userUuid) {\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n        });\n        if (!user) {\n            throw new Error('사용자를 찾을 수 없습니다.');\n        }\n        await this.userRepository.remove(user);\n        return {\n            success: true,\n            message: '사용자가 삭제되었습니다.',\n            deletedId: userUuid,\n        };\n    }\n    async updatePost(postUuid, updateData) {\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n        });\n        if (!post) {\n            throw new Error('게시글을 찾을 수 없습니다.');\n        }\n        Object.assign(post, updateData);\n        post.updatedAt = new Date();\n        const updatedPost = await this.postRepository.save(post);\n        return {\n            success: true,\n            message: '게시글이 수정되었습니다.',\n            post: updatedPost,\n        };\n    }\n    async deletePost(postUuid) {\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n        });\n        if (!post) {\n            throw new Error('게시글을 찾을 수 없습니다.');\n        }\n        await this.postRepository.remove(post);\n        return {\n            success: true,\n            message: '게시글이 삭제되었습니다.',\n            deletedId: postUuid,\n        };\n    }\n    async updateComment(commentId, updateData) {\n        const comment = await this.commentRepository.findOne({\n            where: { id: commentId },\n        });\n        if (!comment) {\n            throw new Error('댓글을 찾을 수 없습니다.');\n        }\n        Object.assign(comment, updateData);\n        comment.updatedAt = new Date();\n        const updatedComment = await this.commentRepository.save(comment);\n        return {\n            success: true,\n            message: '댓글이 수정되었습니다.',\n            comment: updatedComment,\n        };\n    }\n    async deleteComment(commentId) {\n        const comment = await this.commentRepository.findOne({\n            where: { id: commentId },\n        });\n        if (!comment) {\n            throw new Error('댓글을 찾을 수 없습니다.');\n        }\n        await this.commentRepository.remove(comment);\n        return {\n            success: true,\n            message: '댓글이 삭제되었습니다.',\n            deletedId: commentId.toString(),\n        };\n    }\n    async updateChallenge(challengeUuid, updateData) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            throw new Error('챌린지를 찾을 수 없습니다.');\n        }\n        Object.assign(challenge, updateData);\n        challenge.updatedAt = new Date();\n        const updatedChallenge = await this.challengeRepository.save(challenge);\n        return {\n            success: true,\n            message: '챌린지가 수정되었습니다.',\n            challenge: updatedChallenge,\n        };\n    }\n    async deleteChallenge(challengeUuid) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            throw new Error('챌린지를 찾을 수 없습니다.');\n        }\n        await this.challengeRepository.remove(challenge);\n        return {\n            success: true,\n            message: '챌린지가 삭제되었습니다.',\n            deletedId: challengeUuid,\n        };\n    }\n};\nexports.BoService = BoService;\nexports.BoService = BoService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __param(1, (0, typeorm_1.InjectRepository)(post_entity_1.Post)),\n    __param(2, (0, typeorm_1.InjectRepository)(comment_entity_1.Comment)),\n    __param(3, (0, typeorm_1.InjectRepository)(challenge_entity_1.Challenge)),\n    __param(4, (0, typeorm_1.InjectRepository)(like_entity_1.Like)),\n    __param(5, (0, typeorm_1.InjectRepository)(friendship_entity_1.Friendship)),\n    __param(6, (0, typeorm_1.InjectRepository)(chat_room_entity_1.ChatRoom)),\n    __param(7, (0, typeorm_1.InjectRepository)(chat_message_entity_1.ChatMessage)),\n    __param(8, (0, typeorm_1.InjectRepository)(notification_entity_1.Notification)),\n    __metadata(\"design:paramtypes\", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository])\n], BoService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/bo.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/bo/decorators/bo.swagger.ts':
      /*!*************************************************!*\
  !*** ./src/modules/bo/decorators/bo.swagger.ts ***!
  \*************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiDeleteChallenge = exports.ApiUpdateChallenge = exports.ApiDeleteComment = exports.ApiUpdateComment = exports.ApiDeletePost = exports.ApiUpdatePost = exports.ApiDeleteUser = exports.ApiUpdateUser = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst update_user_dto_1 = __webpack_require__(/*! ../dto/update-user.dto */ \"./src/modules/bo/dto/update-user.dto.ts\");\nconst update_post_dto_1 = __webpack_require__(/*! ../dto/update-post.dto */ \"./src/modules/bo/dto/update-post.dto.ts\");\nconst update_comment_dto_1 = __webpack_require__(/*! ../dto/update-comment.dto */ \"./src/modules/bo/dto/update-comment.dto.ts\");\nconst update_challenge_dto_1 = __webpack_require__(/*! ../dto/update-challenge.dto */ \"./src/modules/bo/dto/update-challenge.dto.ts\");\nconst delete_response_dto_1 = __webpack_require__(/*! ../dto/delete-response.dto */ \"./src/modules/bo/dto/delete-response.dto.ts\");\nconst ApiUpdateUser = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '사용자 정보 수정',\n    description: '관리자가 사용자 정보를 수정합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'userUuid',\n    description: '사용자 UUID',\n    example: '123e4567-e89b-12d3-a456-426614174000',\n}), (0, swagger_1.ApiBody)({\n    type: update_user_dto_1.UpdateUserDto,\n    description: '수정할 사용자 정보',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '사용자 정보가 성공적으로 수정되었습니다.',\n    schema: {\n        type: 'object',\n        properties: {\n            success: { type: 'boolean', example: true },\n            message: { type: 'string', example: '사용자 정보가 수정되었습니다.' },\n            user: {\n                type: 'object',\n                description: '수정된 사용자 정보',\n            },\n        },\n    },\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '사용자를 찾을 수 없습니다.',\n}));\nexports.ApiUpdateUser = ApiUpdateUser;\nconst ApiDeleteUser = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '사용자 삭제',\n    description: '관리자가 사용자를 삭제합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'userUuid',\n    description: '사용자 UUID',\n    example: '123e4567-e89b-12d3-a456-426614174000',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '사용자가 성공적으로 삭제되었습니다.',\n    type: delete_response_dto_1.DeleteResponseDto,\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '사용자를 찾을 수 없습니다.',\n}));\nexports.ApiDeleteUser = ApiDeleteUser;\nconst ApiUpdatePost = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '게시글 수정',\n    description: '관리자가 게시글을 수정합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'postUuid',\n    description: '게시글 UUID',\n    example: '123e4567-e89b-12d3-a456-426614174000',\n}), (0, swagger_1.ApiBody)({\n    type: update_post_dto_1.UpdatePostDto,\n    description: '수정할 게시글 정보',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '게시글이 성공적으로 수정되었습니다.',\n    schema: {\n        type: 'object',\n        properties: {\n            success: { type: 'boolean', example: true },\n            message: { type: 'string', example: '게시글이 수정되었습니다.' },\n            post: {\n                type: 'object',\n                description: '수정된 게시글 정보',\n            },\n        },\n    },\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '게시글을 찾을 수 없습니다.',\n}));\nexports.ApiUpdatePost = ApiUpdatePost;\nconst ApiDeletePost = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '게시글 삭제',\n    description: '관리자가 게시글을 삭제합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'postUuid',\n    description: '게시글 UUID',\n    example: '123e4567-e89b-12d3-a456-426614174000',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '게시글이 성공적으로 삭제되었습니다.',\n    type: delete_response_dto_1.DeleteResponseDto,\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '게시글을 찾을 수 없습니다.',\n}));\nexports.ApiDeletePost = ApiDeletePost;\nconst ApiUpdateComment = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '댓글 수정',\n    description: '관리자가 댓글을 수정합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'commentId',\n    description: '댓글 ID',\n    example: '1',\n}), (0, swagger_1.ApiBody)({\n    type: update_comment_dto_1.UpdateCommentDto,\n    description: '수정할 댓글 정보',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '댓글이 성공적으로 수정되었습니다.',\n    schema: {\n        type: 'object',\n        properties: {\n            success: { type: 'boolean', example: true },\n            message: { type: 'string', example: '댓글이 수정되었습니다.' },\n            comment: {\n                type: 'object',\n                description: '수정된 댓글 정보',\n            },\n        },\n    },\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '댓글을 찾을 수 없습니다.',\n}));\nexports.ApiUpdateComment = ApiUpdateComment;\nconst ApiDeleteComment = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '댓글 삭제',\n    description: '관리자가 댓글을 삭제합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'commentId',\n    description: '댓글 ID',\n    example: '1',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '댓글이 성공적으로 삭제되었습니다.',\n    type: delete_response_dto_1.DeleteResponseDto,\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '댓글을 찾을 수 없습니다.',\n}));\nexports.ApiDeleteComment = ApiDeleteComment;\nconst ApiUpdateChallenge = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '챌린지 수정',\n    description: '관리자가 챌린지를 수정합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'challengeUuid',\n    description: '챌린지 UUID',\n    example: '123e4567-e89b-12d3-a456-426614174000',\n}), (0, swagger_1.ApiBody)({\n    type: update_challenge_dto_1.UpdateChallengeDto,\n    description: '수정할 챌린지 정보',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '챌린지가 성공적으로 수정되었습니다.',\n    schema: {\n        type: 'object',\n        properties: {\n            success: { type: 'boolean', example: true },\n            message: { type: 'string', example: '챌린지가 수정되었습니다.' },\n            challenge: {\n                type: 'object',\n                description: '수정된 챌린지 정보',\n            },\n        },\n    },\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '챌린지를 찾을 수 없습니다.',\n}));\nexports.ApiUpdateChallenge = ApiUpdateChallenge;\nconst ApiDeleteChallenge = () => (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n    summary: '챌린지 삭제',\n    description: '관리자가 챌린지를 삭제합니다.',\n}), (0, swagger_1.ApiParam)({\n    name: 'challengeUuid',\n    description: '챌린지 UUID',\n    example: '123e4567-e89b-12d3-a456-426614174000',\n}), (0, swagger_1.ApiResponse)({\n    status: 200,\n    description: '챌린지가 성공적으로 삭제되었습니다.',\n    type: delete_response_dto_1.DeleteResponseDto,\n}), (0, swagger_1.ApiResponse)({\n    status: 404,\n    description: '챌린지를 찾을 수 없습니다.',\n}));\nexports.ApiDeleteChallenge = ApiDeleteChallenge;\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/decorators/bo.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/bo/dto/delete-response.dto.ts':
      /*!***************************************************!*\
  !*** ./src/modules/bo/dto/delete-response.dto.ts ***!
  \***************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.DeleteResponseDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass DeleteResponseDto {\n}\nexports.DeleteResponseDto = DeleteResponseDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'삭제 성공 여부\',\n        example: true,\n    }),\n    __metadata("design:type", Boolean)\n], DeleteResponseDto.prototype, "success", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'삭제 응답 메시지\',\n        example: \'성공적으로 삭제되었습니다.\',\n    }),\n    __metadata("design:type", String)\n], DeleteResponseDto.prototype, "message", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'삭제된 아이템 UUID\',\n        example: \'123e4567-e89b-12d3-a456-426614174000\',\n    }),\n    __metadata("design:type", String)\n], DeleteResponseDto.prototype, "deletedId", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/dto/delete-response.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/bo/dto/update-challenge.dto.ts':
      /*!****************************************************!*\
  !*** ./src/modules/bo/dto/update-challenge.dto.ts ***!
  \****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdateChallengeDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst challenge_enum_1 = __webpack_require__(/*! ../../../types/challenge.enum */ "./src/types/challenge.enum.ts");\nclass UpdateChallengeDto {\n}\nexports.UpdateChallengeDto = UpdateChallengeDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 제목\',\n        example: \'수정된 챌린지 제목\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], UpdateChallengeDto.prototype, "title", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 소개\',\n        example: \'수정된 챌린지 소개\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], UpdateChallengeDto.prototype, "introduce", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'목표 달성 일수\',\n        example: 30,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    __metadata("design:type", Number)\n], UpdateChallengeDto.prototype, "goalDays", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 상태\',\n        enum: challenge_enum_1.ChallengeStatusType,\n        example: challenge_enum_1.ChallengeStatusType.IN_PROGRESS,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(challenge_enum_1.ChallengeStatusType),\n    __metadata("design:type", String)\n], UpdateChallengeDto.prototype, "status", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'삭제 여부\',\n        example: false,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsBoolean)(),\n    __metadata("design:type", Boolean)\n], UpdateChallengeDto.prototype, "isDeleted", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/dto/update-challenge.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/bo/dto/update-comment.dto.ts':
      /*!**************************************************!*\
  !*** ./src/modules/bo/dto/update-comment.dto.ts ***!
  \**************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdateCommentDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass UpdateCommentDto {\n}\nexports.UpdateCommentDto = UpdateCommentDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'댓글 내용\',\n        example: \'수정된 댓글 내용\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], UpdateCommentDto.prototype, "content", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'삭제 여부\',\n        example: false,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsBoolean)(),\n    __metadata("design:type", Boolean)\n], UpdateCommentDto.prototype, "isDeleted", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/dto/update-comment.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/bo/dto/update-post.dto.ts':
      /*!***********************************************!*\
  !*** ./src/modules/bo/dto/update-post.dto.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdatePostDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass UpdatePostDto {\n}\nexports.UpdatePostDto = UpdatePostDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'게시글 제목\',\n        example: \'수정된 제목\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], UpdatePostDto.prototype, "title", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'게시글 내용\',\n        example: \'수정된 내용입니다.\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], UpdatePostDto.prototype, "content", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'이미지 URL 배열\',\n        example: [\n            \'https://example.com/image1.jpg\',\n            \'https://example.com/image2.jpg\',\n        ],\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsArray)(),\n    (0, class_validator_1.IsString)({ each: true }),\n    __metadata("design:type", Array)\n], UpdatePostDto.prototype, "images", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'삭제 여부\',\n        example: false,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsBoolean)(),\n    __metadata("design:type", Boolean)\n], UpdatePostDto.prototype, "isDeleted", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/dto/update-post.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/bo/dto/update-user.dto.ts':
      /*!***********************************************!*\
  !*** ./src/modules/bo/dto/update-user.dto.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdateUserDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst user_status_enum_1 = __webpack_require__(/*! ../../../types/user-status.enum */ "./src/types/user-status.enum.ts");\nclass UpdateUserDto {\n}\nexports.UpdateUserDto = UpdateUserDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'사용자 닉네임\',\n        example: \'수정된닉네임\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], UpdateUserDto.prototype, "nickname", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'사용자 소개\',\n        example: \'수정된 소개입니다.\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], UpdateUserDto.prototype, "introduce", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'사용자 상태\',\n        enum: user_status_enum_1.UserStatusType,\n        example: user_status_enum_1.UserStatusType.ACTIVE,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(user_status_enum_1.UserStatusType),\n    __metadata("design:type", String)\n], UpdateUserDto.prototype, "status", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'탈퇴 여부\',\n        example: false,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsBoolean)(),\n    __metadata("design:type", Boolean)\n], UpdateUserDto.prototype, "isDeleted", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/bo/dto/update-user.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/challenges/challenge.controller.ts':
      /*!********************************************************!*\
  !*** ./src/modules/challenges/challenge.controller.ts ***!
  \********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChallengeController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst create_challenge_dto_1 = __webpack_require__(/*! ./dto/create-challenge.dto */ "./src/modules/challenges/dto/create-challenge.dto.ts");\nconst update_challenge_dto_1 = __webpack_require__(/*! ./dto/update-challenge.dto */ "./src/modules/challenges/dto/update-challenge.dto.ts");\nconst find_all_challenges_dto_1 = __webpack_require__(/*! ./dto/find-all-challenges.dto */ "./src/modules/challenges/dto/find-all-challenges.dto.ts");\nconst challenge_enum_1 = __webpack_require__(/*! @/types/challenge.enum */ "./src/types/challenge.enum.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst challenges_swagger_1 = __webpack_require__(/*! ./decorators/challenges.swagger */ "./src/modules/challenges/decorators/challenges.swagger.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst challenge_service_1 = __webpack_require__(/*! ./challenge.service */ "./src/modules/challenges/challenge.service.ts");\nlet ChallengeController = class ChallengeController {\n    constructor(challengeService) {\n        this.challengeService = challengeService;\n    }\n    getUserChallenges(userUuid, status) {\n        return this.challengeService.findUserChallenges(userUuid, status);\n    }\n    getUserCompletedChallengeCount(userUuid) {\n        return this.challengeService.countUserCompletedChallenges(userUuid);\n    }\n    create(createChallengeDto, userUuid) {\n        return this.challengeService.createChallenge(createChallengeDto, userUuid);\n    }\n    findAll(findAllChallengesDto) {\n        return this.challengeService.findAllChallenges(findAllChallengesDto);\n    }\n    getRecentChallenges() {\n        return this.challengeService.getRecentChallenges();\n    }\n    getPopularChallenges() {\n        return this.challengeService.getPopularChallenges();\n    }\n    async searchChallenges(keyword, page, limit, userUuid) {\n        return this.challengeService.searchChallenges(keyword, Number(page), Number(limit), userUuid);\n    }\n    findOne(challengeUuid, userUuid) {\n        return this.challengeService.findOneChallenge(challengeUuid, userUuid);\n    }\n    update(challengeUuid, updateChallengeDto, userUuid) {\n        return this.challengeService.updateChallenge(challengeUuid, updateChallengeDto, userUuid);\n    }\n    joinChallenge(challengeUuid, userUuid) {\n        return this.challengeService.joinChallenge(challengeUuid, userUuid);\n    }\n    getUserChallengeProgress(challengeUuid, userUuid) {\n        return this.challengeService.getUserChallengeProgress(userUuid, challengeUuid);\n    }\n    leaveChallenge(challengeUuid, userUuid) {\n        return this.challengeService.leaveChallenge(challengeUuid, userUuid);\n    }\n    async getChallengeMonthlyStats(challengeUuid, year, month) {\n        return this.challengeService.getMonthlyChallengeStats(challengeUuid, parseInt(year), parseInt(month));\n    }\n    async getChallengeVerificationStats(challengeUuid) {\n        return this.challengeService.getChallengeVerificationStats(challengeUuid);\n    }\n    async getChallengePostsForReview(challengeUuid, page = 1, limit = 10) {\n        return this.challengeService.getChallengePostsForReview(challengeUuid, Number(page), Number(limit));\n    }\n};\nexports.ChallengeController = ChallengeController;\n__decorate([\n    (0, common_1.Get)(\'user\'),\n    (0, challenges_swagger_1.ApiGetUserChallenges)(),\n    (0, swagger_1.ApiQuery)({ name: \'status\', enum: challenge_enum_1.ChallengeFilterType, required: false }),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __param(1, (0, common_1.Query)(\'status\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "getUserChallenges", null);\n__decorate([\n    (0, common_1.Get)(\'successful\'),\n    (0, challenges_swagger_1.ApiGetUserCompletedChallengeCount)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "getUserCompletedChallengeCount", null);\n__decorate([\n    (0, common_1.Post)(),\n    (0, challenges_swagger_1.ApiCreateChallenge)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [create_challenge_dto_1.CreateChallengeDto, String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "create", null);\n__decorate([\n    (0, common_1.Get)(),\n    (0, challenges_swagger_1.ApiGetAllChallenges)(),\n    __param(0, (0, common_1.Query)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [find_all_challenges_dto_1.FindAllChallengesDto]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "findAll", null);\n__decorate([\n    (0, common_1.Get)(\'recent\'),\n    (0, challenges_swagger_1.ApiGetRecentChallenges)(),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", []),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "getRecentChallenges", null);\n__decorate([\n    (0, common_1.Get)(\'popular\'),\n    (0, challenges_swagger_1.ApiGetPopularChallenges)(),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", []),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "getPopularChallenges", null);\n__decorate([\n    (0, common_1.Get)(\'search\'),\n    (0, challenges_swagger_1.ApiSearchChallenges)(),\n    __param(0, (0, common_1.Query)(\'keyword\')),\n    __param(1, (0, common_1.Query)(\'page\', common_1.ParseIntPipe)),\n    __param(2, (0, common_1.Query)(\'limit\', common_1.ParseIntPipe)),\n    __param(3, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Number, Number, String]),\n    __metadata("design:returntype", Promise)\n], ChallengeController.prototype, "searchChallenges", null);\n__decorate([\n    (0, common_1.Get)(\':challengeUuid\'),\n    (0, challenges_swagger_1.ApiGetChallenge)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "findOne", null);\n__decorate([\n    (0, common_1.Patch)(\':challengeUuid\'),\n    (0, challenges_swagger_1.ApiUpdateChallenge)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, common_1.Body)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, update_challenge_dto_1.UpdateChallengeDto, String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "update", null);\n__decorate([\n    (0, common_1.Post)(\':challengeUuid/join\'),\n    (0, challenges_swagger_1.ApiJoinChallenge)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "joinChallenge", null);\n__decorate([\n    (0, common_1.Get)(\':challengeUuid/progress\'),\n    (0, challenges_swagger_1.ApiGetUserChallengeProgress)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "getUserChallengeProgress", null);\n__decorate([\n    (0, common_1.Delete)(\':challengeUuid/leave\'),\n    (0, challenges_swagger_1.ApiLeaveChallenge)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], ChallengeController.prototype, "leaveChallenge", null);\n__decorate([\n    (0, common_1.Get)(\':challengeUuid/stats\'),\n    (0, challenges_swagger_1.ApiGetMonthlyChallengeStats)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, common_1.Query)(\'year\')),\n    __param(2, (0, common_1.Query)(\'month\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String, String]),\n    __metadata("design:returntype", Promise)\n], ChallengeController.prototype, "getChallengeMonthlyStats", null);\n__decorate([\n    (0, common_1.Get)(\':challengeUuid/verification-stats\'),\n    (0, challenges_swagger_1.ApiGetChallengeVerificationStats)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], ChallengeController.prototype, "getChallengeVerificationStats", null);\n__decorate([\n    (0, common_1.Get)(\':challengeUuid/review\'),\n    (0, challenges_swagger_1.ApiGetChallengePostsForReview)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, common_1.Query)(\'page\')),\n    __param(2, (0, common_1.Query)(\'limit\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Object, Object]),\n    __metadata("design:returntype", Promise)\n], ChallengeController.prototype, "getChallengePostsForReview", null);\nexports.ChallengeController = ChallengeController = __decorate([\n    (0, swagger_1.ApiTags)(\'challenge\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'challenge\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [challenge_service_1.ChallengeService])\n], ChallengeController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/challenge.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/challenges/challenge.module.ts':
      /*!****************************************************!*\
  !*** ./src/modules/challenges/challenge.module.ts ***!
  \****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChallengeModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst challenge_controller_1 = __webpack_require__(/*! ./challenge.controller */ "./src/modules/challenges/challenge.controller.ts");\nconst challenge_entity_1 = __webpack_require__(/*! @/entities/challenge.entity */ "./src/entities/challenge.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ "./src/entities/post.entity.ts");\nconst mission_participation_entity_1 = __webpack_require__(/*! @/entities/mission-participation.entity */ "./src/entities/mission-participation.entity.ts");\nconst mission_entity_1 = __webpack_require__(/*! @/entities/mission.entity */ "./src/entities/mission.entity.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst users_module_1 = __webpack_require__(/*! ../users/users.module */ "./src/modules/users/users.module.ts");\nconst posts_module_1 = __webpack_require__(/*! ../posts/posts.module */ "./src/modules/posts/posts.module.ts");\nconst chat_module_1 = __webpack_require__(/*! ../chat/chat.module */ "./src/modules/chat/chat.module.ts");\nconst common_2 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst challenge_service_1 = __webpack_require__(/*! ./challenge.service */ "./src/modules/challenges/challenge.service.ts");\nlet ChallengeModule = class ChallengeModule {\n};\nexports.ChallengeModule = ChallengeModule;\nexports.ChallengeModule = ChallengeModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([\n                challenge_entity_1.Challenge,\n                user_entity_1.User,\n                post_entity_1.Post,\n                mission_participation_entity_1.MissionParticipation,\n                mission_entity_1.Mission,\n            ]),\n            (0, common_2.forwardRef)(() => users_module_1.UsersModule),\n            (0, common_2.forwardRef)(() => posts_module_1.PostsModule),\n            (0, common_2.forwardRef)(() => chat_module_1.ChatModule),\n        ],\n        controllers: [challenge_controller_1.ChallengeController],\n        providers: [challenge_service_1.ChallengeService],\n        exports: [challenge_service_1.ChallengeService],\n    })\n], ChallengeModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/challenge.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/challenges/challenge.service.ts':
      /*!*****************************************************!*\
  !*** ./src/modules/challenges/challenge.service.ts ***!
  \*****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChallengeService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ \"@nestjs/typeorm\");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst challenge_entity_1 = __webpack_require__(/*! @/entities/challenge.entity */ \"./src/entities/challenge.entity.ts\");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ \"./src/entities/user.entity.ts\");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ \"./src/entities/post.entity.ts\");\nconst chat_service_1 = __webpack_require__(/*! ../chat/chat.service */ \"./src/modules/chat/chat.service.ts\");\nconst ulid_1 = __webpack_require__(/*! ulid */ \"ulid\");\nconst challenge_enum_1 = __webpack_require__(/*! @/types/challenge.enum */ \"./src/types/challenge.enum.ts\");\nconst chat_enum_1 = __webpack_require__(/*! @/types/chat.enum */ \"./src/types/chat.enum.ts\");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ \"./src/utils/custom-exception.ts\");\nconst error_code_enum_1 = __webpack_require__(/*! @/types/error-code.enum */ \"./src/types/error-code.enum.ts\");\nconst typeorm_3 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst date_fns_1 = __webpack_require__(/*! date-fns */ \"date-fns\");\nconst schedule_1 = __webpack_require__(/*! @nestjs/schedule */ \"@nestjs/schedule\");\nconst mission_participation_entity_1 = __webpack_require__(/*! @/entities/mission-participation.entity */ \"./src/entities/mission-participation.entity.ts\");\nconst mission_entity_1 = __webpack_require__(/*! @/entities/mission.entity */ \"./src/entities/mission.entity.ts\");\nconst common_2 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nfunction calculateAge(birthDate) {\n    const dateObj = birthDate instanceof Date ? birthDate : new Date(birthDate);\n    const today = new Date();\n    return today.getFullYear() - dateObj.getFullYear() + 1;\n}\nfunction formatDateLocal(d) {\n    const y = d.getFullYear();\n    const m = (d.getMonth() + 1).toString().padStart(2, '0');\n    const day = d.getDate().toString().padStart(2, '0');\n    return `${y}-${m}-${day}`;\n}\nlet ChallengeService = class ChallengeService {\n    constructor(challengeRepository, userRepository, postRepository, missionParticipationRepo, missionRepository, chatService) {\n        this.challengeRepository = challengeRepository;\n        this.userRepository = userRepository;\n        this.postRepository = postRepository;\n        this.missionParticipationRepo = missionParticipationRepo;\n        this.missionRepository = missionRepository;\n        this.chatService = chatService;\n    }\n    async createChallenge(createChallengeDto, userUuid) {\n        const now = new Date();\n        const startDate = new Date(createChallengeDto.start_date);\n        const endDate = new Date(createChallengeDto.end_date);\n        const user = await this.userRepository.findOne({ where: { userUuid } });\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, '사용자를 찾을 수 없습니다.');\n        }\n        if (user.coins - createChallengeDto.coin_amount < 0) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INSUFFICIENT_COINS, '챌린지를 생성할 코인이 부족합니다.');\n        }\n        user.coins = user.coins - createChallengeDto.coin_amount;\n        if (startDate < now) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INVALID_CHALLENGE_DATES, '시작일은 현재 시각 이후여야 합니다.');\n        }\n        if (endDate < startDate) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INVALID_CHALLENGE_DATES, '종료일은 시작일보다 이후여야 합니다.');\n        }\n        if (endDate < now) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INVALID_CHALLENGE_DATES, '종료일은 현재 시각 이후여야 합니다.');\n        }\n        const userAge = calculateAge(user.birthDate);\n        const { start_age, end_age } = createChallengeDto;\n        if (!(start_age <= userAge && userAge <= end_age)) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.AGE_RESTRICTION_NOT_MET, `챌린지 생성 연령 조건에 맞지 않습니다. (${start_age}세 ~ ${end_age}세)`);\n        }\n        const challengeUuid = (0, ulid_1.ulid)();\n        const challenge = await this.challengeRepository.create({\n            challengeUuid,\n            title: createChallengeDto.title,\n            type: challenge_enum_1.ChallengeType.NORMAL,\n            profile: createChallengeDto.profile,\n            banner: createChallengeDto.banner,\n            introduce: createChallengeDto.introduce,\n            verificationGuide: createChallengeDto.verificationGuide,\n            startDate,\n            endDate,\n            goal: createChallengeDto.goal,\n            startAge: createChallengeDto.start_age,\n            endAge: createChallengeDto.end_age,\n            gender: createChallengeDto.gender,\n            maxMember: createChallengeDto.max_member,\n            creatorUuid: userUuid,\n            participantUuid: [userUuid],\n            coinAmount: createChallengeDto.coin_amount,\n            isStarted: false,\n            isFinished: false,\n            successParticipantsUuid: [],\n        });\n        await this.challengeRepository.save(challenge);\n        await this.userRepository.save(user);\n        try {\n            await this.chatService.createChatRoom(userUuid, {\n                type: chat_enum_1.ChatRoomType.GROUP,\n                participantUuids: [userUuid],\n                name: `${createChallengeDto.title} 채팅방`,\n                challengeUuid: challenge.challengeUuid,\n            });\n        }\n        catch (error) {\n            console.error('채팅방 생성 실패:', error);\n        }\n        return {\n            message: '챌린지가 성공적으로 생성되었습니다.',\n            challengeUuid: challenge.challengeUuid,\n        };\n    }\n    async findAllChallenges(findAllChallengesDto) {\n        const { page = 1, limit = 10, type, gender = challenge_enum_1.GenderType.NONE, status, } = findAllChallengesDto;\n        const where = {};\n        if (type)\n            where.type = type;\n        if (gender)\n            where.gender = gender;\n        const now = new Date();\n        if (status === 'before') {\n            where.startDate = (0, typeorm_3.MoreThan)(now);\n        }\n        else if (status === 'in_progress') {\n            where.startDate = (0, typeorm_3.LessThan)(now);\n            where.endDate = (0, typeorm_3.MoreThan)(now);\n        }\n        else if (status === 'completed') {\n            where.endDate = (0, typeorm_3.LessThan)(now);\n        }\n        const [challenges, total] = await this.challengeRepository.findAndCount({\n            where,\n            skip: (page - 1) * limit,\n            take: limit,\n            order: { createdAt: 'DESC' },\n        });\n        return {\n            data: challenges,\n            meta: {\n                total,\n                page,\n                limit,\n                totalPages: Math.ceil(total / limit),\n                hasNextPage: page * limit < total,\n            },\n        };\n    }\n    async findOneChallenge(challengeUuid, userUuid) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, '해당 아이디의 챌린지가 없습니다.');\n        }\n        const isParticipated = challenge.participantUuid.includes(userUuid);\n        const participants = await this.userRepository.find({\n            where: challenge.participantUuid.map((uuid) => ({ userUuid: uuid })),\n            select: ['userUuid', 'nickname', 'profileImage'],\n        });\n        return {\n            ...challenge,\n            isParticipated,\n            participants,\n        };\n    }\n    async findUserChallenges(userUuid, status) {\n        const now = new Date();\n        const challengeQb = this.challengeRepository\n            .createQueryBuilder('challenge')\n            .where(':userUuid = ANY(challenge.participantUuid)', { userUuid });\n        if (status === challenge_enum_1.ChallengeFilterType.ONGOING) {\n            challengeQb.andWhere('challenge.startDate <= :now AND challenge.endDate >= :now', { now });\n        }\n        else if (status === challenge_enum_1.ChallengeFilterType.UPCOMING) {\n            challengeQb.andWhere('challenge.startDate > :now', { now });\n        }\n        const challenges = await challengeQb.getMany();\n        const missionParticipations = await this.missionParticipationRepo.find({\n            where: { userUuid },\n        });\n        const missionIds = missionParticipations.map((p) => p.missionId);\n        const missions = await this.missionRepository.findByIds(missionIds);\n        const filteredMissions = missions.filter((m) => {\n            if (status === challenge_enum_1.ChallengeFilterType.ONGOING) {\n                return m.startTime <= now && m.endTime >= now;\n            }\n            else if (status === challenge_enum_1.ChallengeFilterType.UPCOMING) {\n                return m.startTime > now;\n            }\n            return true;\n        });\n        const formattedChallenges = challenges.map((c) => ({\n            id: c.id,\n            challengeUuid: c.challengeUuid,\n            title: c.title,\n            banner: c.banner,\n            maxMember: c.maxMember,\n            currentMember: c.participantUuid.length,\n            challengeType: 'GROUP',\n            sortKey: new Date(c.startDate).getTime(),\n            startDate: c.startDate,\n            endDate: c.endDate,\n            isStarted: new Date(c.startDate) <= now,\n            isFinished: new Date(c.endDate) < now,\n        }));\n        const formattedMissions = filteredMissions.map((m) => {\n            return {\n                id: m.id,\n                challengeUuid: null,\n                title: m.title,\n                banner: null,\n                maxMember: null,\n                currentMember: null,\n                challengeType: 'EVENT',\n                sortKey: new Date(m.startTime).getTime(),\n                startDate: m.startTime,\n                endDate: m.endTime,\n                isStarted: new Date(m.startTime) <= now,\n                isFinished: new Date(m.endTime) < now,\n            };\n        });\n        const sorted = [...formattedChallenges, ...formattedMissions].sort((a, b) => a.sortKey - b.sortKey);\n        const finalResult = sorted.map((item) => {\n            const { sortKey, ...rest } = item;\n            return rest;\n        });\n        return finalResult;\n    }\n    async countUserCompletedChallenges(userUuid) {\n        const count = await this.challengeRepository\n            .createQueryBuilder('challenge')\n            .where(':userUuid = ANY(challenge.successParticipantsUuid)', {\n            userUuid,\n        })\n            .getCount();\n        return {\n            message: '조회 성공',\n            completedChallengeCount: count,\n        };\n    }\n    async updateChallenge(challengeUuid, updateChallengeDto, userUuid) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, '해당 아이디의 챌린지가 없습니다.');\n        }\n        if (challenge.creatorUuid !== userUuid) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_CANNOT_EDIT, '챌린지를 수정할 권한이 없습니다.');\n        }\n        if (updateChallengeDto.banner) {\n            challenge.banner = updateChallengeDto.banner;\n        }\n        if (updateChallengeDto.profile) {\n            challenge.profile = updateChallengeDto.profile;\n        }\n        await this.challengeRepository.save(challenge);\n        return {\n            message: '챌린지 수정을 성공했습니다.',\n            challenge,\n        };\n    }\n    async getRecentChallenges() {\n        const onWeekAgo = (0, date_fns_1.subDays)(new Date(), 7);\n        const challenges = await this.challengeRepository.find({\n            where: {\n                createdAt: (0, typeorm_3.MoreThanOrEqual)(onWeekAgo),\n            },\n            order: {\n                createdAt: 'DESC',\n            },\n            take: 15,\n        });\n        return challenges;\n    }\n    async getPopularChallenges() {\n        const challenges = await this.challengeRepository\n            .createQueryBuilder('challenge')\n            .addSelect('CARDINALITY(challenge.participantUuid)', 'participantCount')\n            .orderBy('CARDINALITY(challenge.participantUuid)', 'DESC')\n            .limit(15)\n            .getMany();\n        return challenges;\n    }\n    async joinChallenge(challengeUuid, userUuid) {\n        const [challenge, user] = await Promise.all([\n            this.challengeRepository.findOne({ where: { challengeUuid } }),\n            this.userRepository.findOne({ where: { userUuid } }),\n        ]);\n        if (!challenge) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, '해당 아이디의 챌린지가 없습니다.');\n        }\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, '사용자 정보를 찾을 수 없습니다.');\n        }\n        if (!challenge.startDate || !challenge.endDate) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, '챌린지 기간 정보가 없습니다.');\n        }\n        challenge.participantUuid ?? (challenge.participantUuid = []);\n        const now = new Date();\n        const startDate = new Date(challenge.startDate);\n        const endDate = new Date(challenge.endDate);\n        if (challenge.gender !== challenge_enum_1.GenderType.NONE &&\n            challenge.gender !== user.gender) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.GENDER_RESTRICTION_NOT_MET, '성별 조건을 만족하지 않습니다.');\n        }\n        if (!user.birthDate) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, '사용자 생년월일 정보가 없습니다.');\n        }\n        const userAge = calculateAge(user.birthDate);\n        if (challenge.endAge == null) {\n            if (userAge < challenge.startAge) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.AGE_RESTRICTION_NOT_MET, '참여 가능한 연령 조건을 만족하지 않습니다.');\n            }\n        }\n        else {\n            if (!(challenge.startAge <= userAge && userAge <= challenge.endAge)) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.AGE_RESTRICTION_NOT_MET, '참여 가능한 연령 조건을 만족하지 않습니다.');\n            }\n        }\n        if (challenge.maxMember != null &&\n            challenge.participantUuid.length >= challenge.maxMember) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_FULL, '정원이 다 찼습니다.');\n        }\n        if (challenge.participantUuid.includes(userUuid)) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.ALREADY_JOINED_CHALLENGE, '이미 참가한 챌린지 입니다.');\n        }\n        if (user.coins == null || challenge.coinAmount == null) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.COIN_TRANSACTION_FAILED, '코인 정보가 올바르지 않습니다.');\n        }\n        if (user.coins < challenge.coinAmount) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.INSUFFICIENT_COINS, '챌린지에 참여할 코인이 부족합니다.');\n        }\n        if (endDate.getTime() < now.getTime()) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_ALREADY_FINISHED, '이미 종료된 챌린지 입니다.');\n        }\n        if (startDate.getTime() <= now.getTime()) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_ALREADY_STARTED, '이미 시작된 챌린지입니다.');\n        }\n        user.coins -= challenge.coinAmount;\n        challenge.participantUuid.push(userUuid);\n        await this.challengeRepository.save(challenge);\n        await this.userRepository.save(user);\n        try {\n            await this.chatService.addParticipantToChallengeRoom(challengeUuid, userUuid);\n        }\n        catch (error) {\n            console.error('채팅방 참여 실패:', error);\n        }\n        return { message: '참가 완료', challengeUuid };\n    }\n    async getUserChallengeProgress(userUuid, challengeUuid) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            throw new common_2.BadRequestException('해당 아이디의 챌린지가 없습니다.');\n        }\n        const { startDate, endDate, goal, participantUuid } = challenge;\n        const endInclusive = new Date(endDate.getTime());\n        const posts = await this.postRepository.find({\n            where: {\n                userUuid,\n                challengeUuid,\n                createdAt: (0, typeorm_3.Between)(startDate, endInclusive),\n            },\n            select: ['createdAt'],\n        });\n        const weekMap = {};\n        for (const post of posts) {\n            const diffMs = post.createdAt.getTime() - startDate.getTime();\n            const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n            const weekNum = Math.floor(diffDays / 7) + 1;\n            const dateKey = formatDateLocal(post.createdAt);\n            (weekMap[weekNum] ?? (weekMap[weekNum] = new Set())).add(dateKey);\n        }\n        const totalWeeks = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24 * 7));\n        const weekWeight = totalWeeks > 0 ? 100 / totalWeeks : 0;\n        const perActionWeight = goal > 0 ? weekWeight / goal : 0;\n        let totalAchievementRate = 0;\n        for (let i = 1; i <= totalWeeks; i++) {\n            const count = weekMap[i]?.size ?? 0;\n            const weeklyContribution = Math.min(count, goal);\n            totalAchievementRate += weeklyContribution * perActionWeight;\n        }\n        totalAchievementRate = Math.min(100, Math.round(totalAchievementRate));\n        const participantCount = Array.isArray(participantUuid)\n            ? participantUuid.length\n            : 0;\n        return {\n            challengeInfo: {\n                participantCount,\n                startDate,\n                endDate,\n                goal,\n            },\n            totalAchievementRate,\n        };\n    }\n    async leaveChallenge(challengeUuid, userUuid) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, '해당 아이디의 챌린지가 없습니다.');\n        }\n        if (challenge.isStarted) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_ALREADY_STARTED, '챌린지가 시작되어 나갈 수 없습니다.');\n        }\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n        });\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, '해당 유저가 존재하지 않습니다.');\n        }\n        challenge.participantUuid = challenge.participantUuid.filter((uuid) => uuid !== userUuid);\n        user.coins += challenge.coinAmount;\n        await Promise.all([\n            this.challengeRepository.save(challenge),\n            this.userRepository.save(user),\n        ]);\n        try {\n            await this.chatService.removeParticipantFromChallengeRoom(challengeUuid, userUuid);\n        }\n        catch (error) {\n            console.error('채팅방 나가기 실패:', error);\n        }\n        return {\n            message: '챌린지에서 성공적으로 탈퇴하고 코인이 반환되었습니다.',\n            refundedCoins: challenge.coinAmount,\n            currentCoin: user.coins,\n        };\n    }\n    async searchChallenges(keyword, page, limit, userUuid) {\n        const groupResults = await this.challengeRepository.find({\n            where: [\n                { title: (0, typeorm_3.ILike)(`%${keyword}%`) },\n                { introduce: (0, typeorm_3.ILike)(`%${keyword}%`) },\n            ],\n            order: { createdAt: 'DESC' },\n        });\n        const now = new Date();\n        const formattedChallenges = groupResults.map((challenge) => ({\n            id: challenge.id,\n            challengeUuid: challenge.challengeUuid,\n            title: challenge.title,\n            banner: challenge.banner,\n            maxMember: challenge.maxMember,\n            currentMember: challenge.participantUuid.length,\n            challengeType: 'GROUP',\n            isParticipated: challenge.participantUuid.includes(userUuid),\n            sortKey: new Date(challenge.startDate).getTime(),\n            startDate: challenge.startDate,\n            endDate: challenge.endDate,\n            isStarted: new Date(challenge.startDate) <= now,\n            isFinished: challenge.endDate ? new Date(challenge.endDate) < now : false,\n        }));\n        const allMissions = await this.missionRepository.find({\n            order: { createdAt: 'DESC' },\n        });\n        const missionParticipations = await this.missionParticipationRepo.find({\n            where: { userUuid },\n        });\n        const participatedMissionIds = missionParticipations.map((p) => p.missionId);\n        const matchedMissions = allMissions.filter((m) => m.title.includes(keyword) || m.description.includes(keyword));\n        const formattedMissions = matchedMissions.map((mission) => ({\n            id: mission.id,\n            challengeUuid: null,\n            title: mission.title,\n            banner: null,\n            maxMember: null,\n            currentMember: null,\n            challengeType: 'EVENT',\n            isParticipated: participatedMissionIds.includes(mission.id),\n            sortKey: new Date(mission.startTime).getTime(),\n            startDate: mission.startTime,\n            endDate: mission.endTime,\n            isStarted: new Date(mission.startTime) <= now,\n            isFinished: new Date(mission.endTime) < now,\n        }));\n        const merged = [...formattedChallenges, ...formattedMissions].sort((a, b) => b.sortKey - a.sortKey);\n        const start = (page - 1) * limit;\n        const end = start + limit;\n        const paginated = merged.slice(start, end);\n        const finalData = paginated.map(({ sortKey, ...rest }) => rest);\n        return {\n            data: finalData,\n            meta: {\n                total: merged.length,\n                page,\n                limit,\n                totalPages: Math.ceil(merged.length / limit),\n                hasNextPage: end < merged.length,\n            },\n        };\n    }\n    async updateChallengeStatuses() {\n        const now = new Date();\n        const startOfDay = new Date(now);\n        startOfDay.setHours(0, 0, 0, 0);\n        const endOfDay = new Date(now);\n        endOfDay.setHours(23, 59, 59, 999);\n        const startingChallenges = await this.challengeRepository.find({\n            where: {\n                startDate: (0, typeorm_3.Between)(startOfDay, endOfDay),\n                isStarted: false,\n            },\n        });\n        for (const challenge of startingChallenges) {\n            challenge.isStarted = true;\n            await this.challengeRepository.save(challenge);\n        }\n        console.log(`[스케줄러] ${startingChallenges.length}개의 챌린지가 시작 처리되었습니다.`);\n        const expiredChallenges = await this.challengeRepository.find({\n            where: {\n                endDate: (0, typeorm_3.LessThan)(now),\n                isFinished: false,\n            },\n        });\n        for (const challenge of expiredChallenges) {\n            const successParticipants = [];\n            for (const userUuid of challenge.participantUuid) {\n                const { totalAchievementRate } = await this.getUserChallengeProgress(userUuid, challenge.challengeUuid);\n                if (totalAchievementRate === 100) {\n                    successParticipants.push(userUuid);\n                }\n            }\n            const totalParticipants = challenge.participantUuid.length;\n            const totalCoins = totalParticipants * challenge.coinAmount;\n            const numSuccess = successParticipants.length;\n            if (numSuccess > 0) {\n                const rewardPerSuccess = Math.floor(totalCoins / numSuccess);\n                for (const userUuid of successParticipants) {\n                    const user = await this.userRepository.findOne({\n                        where: {\n                            userUuid,\n                        },\n                    });\n                    if (user) {\n                        user.coins += rewardPerSuccess;\n                        await this.userRepository.save(user);\n                    }\n                }\n            }\n            challenge.successParticipantsUuid = successParticipants;\n            challenge.isFinished = true;\n            await this.challengeRepository.save(challenge);\n        }\n        console.log(`[스케줄러] ${expiredChallenges.length}개의 챌린지가 종료 처리되었습니다.`);\n    }\n    async getMonthlyChallengeStats(challengeUuid, year, month) {\n        const startDate = new Date(year, month - 1, 1);\n        const endDate = new Date(year, month, 0, 23, 59, 59, 999);\n        const posts = await this.postRepository\n            .createQueryBuilder('post')\n            .select(['post.id', 'post.userUuid', 'post.createdAt'])\n            .where('post.challengeUuid = :challengeUuid', { challengeUuid })\n            .andWhere('post.createdAt BETWEEN :startDate AND :endDate', {\n            startDate,\n            endDate,\n        })\n            .getMany();\n        const result = {};\n        for (const post of posts) {\n            const dateKey = post.createdAt.toISOString().split('T')[0];\n            if (!result[dateKey]) {\n                result[dateKey] = { count: 0, users: [] };\n            }\n            result[dateKey].count += 1;\n            const user = await this.userRepository.findOne({\n                where: { userUuid: post.userUuid },\n                select: ['userUuid', 'nickname', 'profileImage'],\n            });\n            if (user) {\n                result[dateKey].users.push(user);\n            }\n        }\n        return result;\n    }\n    async getChallengeVerificationStats(challengeUuid) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, '해당 챌린지를 찾을 수 없습니다.');\n        }\n        const verificationStats = await this.postRepository\n            .createQueryBuilder('post')\n            .select('post.verificationStatus', 'status')\n            .addSelect('COUNT(*)', 'count')\n            .where('post.challengeUuid = :challengeUuid', { challengeUuid })\n            .groupBy('post.verificationStatus')\n            .getRawMany();\n        const stats = {\n            total: 0,\n            pending: 0,\n            approved: 0,\n            rejected: 0,\n            review: 0,\n        };\n        verificationStats.forEach((stat) => {\n            const count = parseInt(stat.count);\n            stats.total += count;\n            if (stat.status) {\n                stats[stat.status] = count;\n            }\n        });\n        return {\n            message: '챌린지 검증 통계 조회 성공',\n            challengeUuid,\n            challengeTitle: challenge.title,\n            verificationStats: stats,\n        };\n    }\n    async getChallengePostsForReview(challengeUuid, page = 1, limit = 10) {\n        const challenge = await this.challengeRepository.findOne({\n            where: { challengeUuid },\n        });\n        if (!challenge) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, '해당 챌린지를 찾을 수 없습니다.');\n        }\n        const [posts, total] = await this.postRepository.findAndCount({\n            where: {\n                challengeUuid,\n                verificationStatus: 'review',\n            },\n            order: { createdAt: 'DESC' },\n            skip: (page - 1) * limit,\n            take: limit,\n        });\n        const postsWithDetails = await Promise.all(posts.map(async (post) => {\n            const user = await this.userRepository.findOne({\n                where: { userUuid: post.userUuid },\n                select: ['userUuid', 'nickname', 'profileImage'],\n            });\n            return {\n                ...post,\n                user,\n                aiAnalysisResult: post.aiAnalysisResult\n                    ? JSON.parse(post.aiAnalysisResult)\n                    : null,\n            };\n        }));\n        return {\n            message: '검토 필요한 인증글 목록 조회 성공',\n            challengeTitle: challenge.title,\n            total,\n            page,\n            limit,\n            posts: postsWithDetails,\n        };\n    }\n};\nexports.ChallengeService = ChallengeService;\n__decorate([\n    (0, schedule_1.Cron)(schedule_1.CronExpression.EVERY_DAY_AT_MIDNIGHT),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", Promise)\n], ChallengeService.prototype, \"updateChallengeStatuses\", null);\nexports.ChallengeService = ChallengeService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(challenge_entity_1.Challenge)),\n    __param(1, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __param(2, (0, typeorm_1.InjectRepository)(post_entity_1.Post)),\n    __param(3, (0, typeorm_1.InjectRepository)(mission_participation_entity_1.MissionParticipation)),\n    __param(4, (0, typeorm_1.InjectRepository)(mission_entity_1.Mission)),\n    __metadata(\"design:paramtypes\", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        chat_service_1.ChatService])\n], ChallengeService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/challenge.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/challenges/decorators/challenges.swagger.ts':
      /*!*****************************************************************!*\
  !*** ./src/modules/challenges/decorators/challenges.swagger.ts ***!
  \*****************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiCreateChallenge = ApiCreateChallenge;\nexports.ApiGetAllChallenges = ApiGetAllChallenges;\nexports.ApiGetChallenge = ApiGetChallenge;\nexports.ApiJoinChallenge = ApiJoinChallenge;\nexports.ApiUpdateChallenge = ApiUpdateChallenge;\nexports.ApiGetRecentChallenges = ApiGetRecentChallenges;\nexports.ApiGetUserChallenges = ApiGetUserChallenges;\nexports.ApiGetUserCompletedChallengeCount = ApiGetUserCompletedChallengeCount;\nexports.ApiLeaveChallenge = ApiLeaveChallenge;\nexports.ApiGetPopularChallenges = ApiGetPopularChallenges;\nexports.ApiSearchChallenges = ApiSearchChallenges;\nexports.ApiGetUserChallengeProgress = ApiGetUserChallengeProgress;\nexports.ApiGetMonthlyChallengeStats = ApiGetMonthlyChallengeStats;\nexports.ApiGetChallengeVerificationStats = ApiGetChallengeVerificationStats;\nexports.ApiGetChallengePostsForReview = ApiGetChallengePostsForReview;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nconst challenge_response_dto_1 = __webpack_require__(/*! ../dto/challenge-response.dto */ \"./src/modules/challenges/dto/challenge-response.dto.ts\");\nconst monthly_challenge_stats_response_dto_1 = __webpack_require__(/*! ../dto/monthly-challenge-stats.response.dto */ \"./src/modules/challenges/dto/monthly-challenge-stats.response.dto.ts\");\nconst challenge_enum_1 = __webpack_require__(/*! @/types/challenge.enum */ \"./src/types/challenge.enum.ts\");\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst create_challenge_dto_1 = __webpack_require__(/*! ../dto/create-challenge.dto */ \"./src/modules/challenges/dto/create-challenge.dto.ts\");\nfunction ApiCreateChallenge() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 생성',\n        description: '새로운 챌린지를 생성합니다.',\n    }), (0, swagger_1.ApiBody)({\n        type: create_challenge_dto_1.CreateChallengeDto,\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '챌린지 생성 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                challengeUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                message: {\n                    type: 'string',\n                    example: '챌린지가 성공적으로 생성되었습니다.',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 400,\n        description: '잘못된 요청 (입력값 오류, 코인 부족, 날짜 오류, 연령 조건 불일치 등)',\n        content: {\n            'application/json': {\n                examples: {\n                    InvalidInput: {\n                        summary: '입력값이 올바르지 않을 때',\n                        value: {\n                            errorCode: 'SYS_004',\n                            message: '입력값이 올바르지 않습니다.',\n                        },\n                    },\n                    CoinInsufficient: {\n                        summary: '코인이 부족할 때',\n                        value: {\n                            errorCode: 'COIN_001',\n                            message: '챌린지를 생성할 코인이 부족합니다.',\n                        },\n                    },\n                    InvalidDates: {\n                        summary: '시작일과 종료일이 올바르지 않을 때',\n                        value: {\n                            errorCode: 'CHALLENGE_009',\n                            message: '시작일과 종료일이 올바르지 않습니다.',\n                        },\n                    },\n                    AgeNotMet: {\n                        summary: '연령 조건에 맞지 않을 때',\n                        value: {\n                            errorCode: 'CHALLENGE_011',\n                            message: '연령 조건에 맞지 않습니다.',\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 500,\n        description: '서버 오류',\n        content: {\n            'application/json': {\n                example: {\n                    errorCode: 'SYS_001',\n                    message: '서버 오류가 발생했습니다.',\n                },\n            },\n        },\n    }));\n}\nfunction ApiGetAllChallenges() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 목록 조회',\n        description: '필터 및 페이지네이션 조건에 따라 챌린지 목록을 조회합니다.',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지당 항목 수 (기본값: 10)',\n        example: 10,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'type',\n        required: false,\n        description: '챌린지 유형',\n        enum: challenge_enum_1.ChallengeType,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'gender',\n        required: false,\n        description: '성별 필터',\n        enum: challenge_enum_1.GenderType,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'status',\n        required: false,\n        description: '챌린지 상태 (before | in_progress | finished)',\n        example: '',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '챌린지 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                data: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            challengeUuid: { type: 'string', example: '01HZQK5J8X...' },\n                            title: { type: 'string', example: '하루 만보 챌린지' },\n                            type: { type: 'string', example: 'NORMAL' },\n                            gender: { type: 'string', example: 'ALL' },\n                            profile: {\n                                type: 'string',\n                                example: 'https://example.com/image.jpg',\n                            },\n                            startDate: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-07-01T00:00:00Z',\n                            },\n                            endDate: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-07-31T00:00:00Z',\n                            },\n                            isStarted: { type: 'boolean', example: false },\n                            isFinished: { type: 'boolean', example: false },\n                            currentMember: { type: 'number', example: 12 },\n                            maxMember: { type: 'number', example: 50 },\n                        },\n                    },\n                },\n                meta: {\n                    type: 'object',\n                    properties: {\n                        total: { type: 'number', example: 123 },\n                        page: { type: 'number', example: 1 },\n                        limit: { type: 'number', example: 10 },\n                        totalPages: { type: 'number', example: 13 },\n                        hasNextPage: { type: 'boolean', example: true },\n                    },\n                },\n            },\n        },\n    }));\n}\nfunction ApiGetChallenge() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 상세 조회',\n        description: '특정 챌린지의 상세 정보를 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        description: '챌린지 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '챌린지 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                challengeUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                title: { type: 'string', example: '30일 헬스 챌린지' },\n                type: { type: 'string', example: 'NORMAL' },\n                profile: {\n                    type: 'string',\n                    example: 'https://example.com/profile.jpg',\n                },\n                banner: { type: 'string', example: 'https://example.com/banner.jpg' },\n                introduce: { type: 'string', example: '매일 인증하는 챌린지입니다!' },\n                startDate: { type: 'string', example: '2025-07-01' },\n                endDate: { type: 'string', example: '2025-07-31' },\n                goal: { type: 'number', example: 5 },\n                startAge: { type: 'number', example: 18 },\n                endAge: { type: 'number', example: 65 },\n                gender: { type: 'string', example: 'ALL' },\n                maxMember: { type: 'number', example: 50 },\n                coinAmount: { type: 'number', example: 1000 },\n                isStarted: { type: 'boolean', example: false },\n                isFinished: { type: 'boolean', example: false },\n                creatorUuid: { type: 'string', example: '01HX123456789ABCDE' },\n                isParticipating: { type: 'boolean', example: true },\n                createdAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n                updatedAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('CHALLENGE_001', '챌린지를 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiJoinChallenge() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 참여',\n        description: '사용자가 챌린지에 참여하고 코인을 차감합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        required: true,\n        description: '참여할 챌린지의 UUID',\n        example: '01HZQK5J8XABCDEF1234567890',\n    }), (0, swagger_1.ApiResponse)({\n        description: '챌린지 참여 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '참가 완료' },\n                challengeUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8XABCDEF1234567890',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 402,\n        description: '코인이 부족하여 참여 불가',\n        schema: {\n            example: {\n                errorCode: 'INSUFFICIENT_COINS',\n                message: '챌린지를 생성할 코인이 부족합니다.',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '챌린지가 존재하지 않음',\n        schema: {\n            example: {\n                errorCode: 'CHALLENGE_001',\n                message: '해당 아이디의 챌린지가 없습니다.',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 409,\n        description: '중복 참가, 조건 미달 등으로 인한 챌린지 참여 실패',\n        content: {\n            'application/json': {\n                examples: {\n                    AlreadyStarted: {\n                        summary: '이미 시작된 챌린지',\n                        value: {\n                            errorCode: 'CHALLENGE_002',\n                            message: '이미 시작된 챌린지입니다.',\n                        },\n                    },\n                    AlreadyFinished: {\n                        summary: '이미 종료된 챌린지',\n                        value: {\n                            errorCode: 'CHALLENGE_003',\n                            message: '이미 종료된 챌린지 입니다.',\n                        },\n                    },\n                    ChallengeFull: {\n                        summary: '정원이 다 찼을 경우',\n                        value: {\n                            errorCode: 'CHALLENGE_004',\n                            message: '정원이 다 찼습니다.',\n                        },\n                    },\n                    AlreadyJoined: {\n                        summary: '이미 참가한 경우',\n                        value: {\n                            errorCode: 'CHALLENGE_006',\n                            message: '이미 참가한 챌린지 입니다.',\n                        },\n                    },\n                    AgeNotMet: {\n                        summary: '연령 조건 불충족',\n                        value: {\n                            errorCode: 'CHALLENGE_011',\n                            message: '참여 가능한 연령 조건을 만족하지 않습니다.',\n                        },\n                    },\n                    GenderNotMet: {\n                        summary: '성별 조건 불충족',\n                        value: {\n                            errorCode: 'CHALLENGE_012',\n                            message: '성별 조건을 만족하지 않습니다.',\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 500,\n        description: '서버 내부 오류',\n    }));\n}\nfunction ApiUpdateChallenge() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 수정',\n        description: '챌린지 생성자만 수정할 수 있습니다. 시작된 챌린지는 일부만 수정 가능합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        description: '챌린지 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            properties: {\n                profile: {\n                    type: 'string',\n                    example: 'https://example.com/new-profile.jpg',\n                },\n                banner: {\n                    type: 'string',\n                    example: 'https://example.com/new-banner.jpg',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '챌린지 수정 성공',\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '수정 권한 없음',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '챌린지를 찾을 수 없음',\n    }));\n}\nfunction ApiGetRecentChallenges() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '최근 생성된 챌린지 조회',\n        description: '최근 일주일 내에 생성된 챌린지 중 최대 15개를 조회합니다.',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '챌린지 조회 성공',\n        schema: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    challengeUuid: { type: 'string', example: '01HZQK5J8X...' },\n                    title: { type: 'string', example: '하루 만보 챌린지' },\n                    type: { type: 'string', example: 'NORMAL' },\n                    gender: { type: 'string', example: 'ALL' },\n                    profile: {\n                        type: 'string',\n                        example: 'https://example.com/image.jpg',\n                    },\n                    startDate: {\n                        type: 'string',\n                        format: 'date-time',\n                        example: '2025-07-01T00:00:00Z',\n                    },\n                    endDate: {\n                        type: 'string',\n                        format: 'date-time',\n                        example: '2025-07-31T00:00:00Z',\n                    },\n                    isStarted: { type: 'boolean', example: false },\n                    isFinished: { type: 'boolean', example: false },\n                    currentMember: { type: 'number', example: 12 },\n                    maxMember: { type: 'number', example: 50 },\n                },\n            },\n        },\n    }));\n}\nfunction ApiGetUserChallenges() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자 참여 챌린지 조회',\n        description: '현재 로그인한 사용자가 참여 중인 챌린지 및 미션을 모두 조회합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '사용자 참여 챌린지 조회 성공',\n        schema: {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    id: {\n                        type: 'number',\n                        example: 1,\n                        description: '챌린지 또는 미션의 ID',\n                    },\n                    challengeUuid: {\n                        type: 'string',\n                        nullable: true,\n                        example: '01JZFP44NM9XPNFQRQF4CHE9A6',\n                        description: '챌린지 UUID (미션의 경우 null)',\n                    },\n                    title: {\n                        type: 'string',\n                        example: '30일 걷기 챌린지',\n                        description: '제목',\n                    },\n                    banner: {\n                        type: 'string',\n                        nullable: true,\n                        example: 'https://cdn.example.com/images/challenge-banner.png',\n                        description: '배너 이미지 URL (미션의 경우 null)',\n                    },\n                    maxMember: {\n                        type: 'number',\n                        nullable: true,\n                        example: 30,\n                        description: '최대 참여 인원 (미션의 경우 null)',\n                    },\n                    currentMember: {\n                        type: 'number',\n                        nullable: true,\n                        example: 15,\n                        description: '현재 참여 인원 (미션의 경우 null)',\n                    },\n                    challengeType: {\n                        type: 'string',\n                        enum: ['GROUP', 'EVENT'],\n                        example: 'GROUP',\n                        description: '챌린지 유형 (GROUP: 그룹 챌린지, EVENT: 개인 미션)',\n                    },\n                    startDate: {\n                        type: 'string',\n                        format: 'date-time',\n                        description: '챌린지/미션 시작일',\n                        example: '2025-08-01T00:00:00.000Z',\n                    },\n                    endDate: {\n                        type: 'string',\n                        format: 'date-time',\n                        description: '챌린지/미션 종료일',\n                        example: '2025-08-30T23:59:59.000Z',\n                    },\n                    isStarted: {\n                        type: 'boolean',\n                        description: '챌린지/미션 시작 여부',\n                        example: true,\n                    },\n                    isFinished: {\n                        type: 'boolean',\n                        description: '챌린지/미션 종료 여부',\n                        example: false,\n                    },\n                },\n            },\n            example: [\n                {\n                    id: 1,\n                    challengeUuid: '01JZFP44NM9XPNFQRQF4CHE9A6',\n                    title: '30일 걷기 챌린지',\n                    banner: 'https://cdn.example.com/images/challenge-banner.png',\n                    maxMember: 30,\n                    currentMember: 15,\n                    challengeType: 'GROUP',\n                    startDate: '2025-08-01T00:00:00.000Z',\n                    endDate: '2025-08-30T23:59:59.000Z',\n                    isStarted: true,\n                    isFinished: false,\n                },\n                {\n                    id: 2,\n                    challengeUuid: null,\n                    title: '10000보 걷기 미션',\n                    banner: null,\n                    maxMember: null,\n                    currentMember: null,\n                    challengeType: 'EVENT',\n                    startDate: '2025-09-01T00:00:00.000Z',\n                    endDate: '2025-09-07T23:59:59.000Z',\n                    isStarted: false,\n                    isFinished: false,\n                },\n            ],\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetUserCompletedChallengeCount() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자가 성공한 챌린지 개수 조회',\n        description: '사용자가 완료한(성공한) 챌린지의 총 개수를 반환합니다.',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '성공적으로 조회됨',\n        schema: {\n            example: {\n                completedChallengeCount: 3,\n            },\n        },\n    }));\n}\nfunction ApiLeaveChallenge() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 탈퇴',\n        description: '사용자가 특정 챌린지에서 탈퇴합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        type: 'string',\n        description: '탈퇴할 챌린지의 UUID',\n        required: true,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '탈퇴 성공',\n        schema: {\n            example: {\n                message: '챌린지에서 성공적으로 탈퇴했습니다.',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '이미 시작된 챌린지는 탈퇴 불가',\n        schema: {\n            example: {\n                statusCode: 403,\n                errorCode: 'CHALLENGE_002',\n                message: '챌린지가 시작되어 나갈 수 없습니다.',\n                error: 'Forbidden',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '챌린지를 찾을 수 없음',\n        schema: {\n            example: {\n                statusCode: 404,\n                errorCode: 'CHALLENGE_001',\n                message: '해당 아이디의 챌린지가 없습니다.',\n                error: 'Not Found',\n            },\n        },\n    }));\n}\nfunction ApiGetPopularChallenges() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '인기 챌린지 목록 조회',\n        description: '참여자 수가 가장 많은 상위 15개 챌린지를 반환합니다.',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '인기 챌린지 조회 성공',\n        type: challenge_response_dto_1.ChallengeResponseDto,\n        isArray: true,\n    }));\n}\nfunction ApiSearchChallenges() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 검색',\n        description: '키워드로 챌린지를 검색하고 페이지네이션 결과를 반환합니다.',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'keyword',\n        required: false,\n        description: '검색 키워드',\n        type: String,\n        example: '새벽 기상',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호',\n        type: Number,\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지당 결과 수',\n        type: Number,\n        example: 10,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '검색된 챌린지/미션 목록과 페이지 정보',\n        schema: {\n            example: {\n                data: [\n                    {\n                        id: 1,\n                        challengeUuid: '01JZFP44NM9XPNFQRQF4CHE9A6',\n                        title: '6월 새벽 기상 챌린지',\n                        banner: 'https://cdn.example.com/images/challenge-banner.png',\n                        maxMember: 30,\n                        currentMember: 15,\n                        challengeType: 'GROUP',\n                        isParticipated: true,\n                        startDate: '2025-08-01T00:00:00.000Z',\n                        endDate: '2025-08-31T23:59:59.000Z',\n                        isStarted: true,\n                        isFinished: false,\n                    },\n                    {\n                        id: 2,\n                        challengeUuid: null,\n                        title: '10000보 걷기 미션',\n                        banner: null,\n                        maxMember: null,\n                        currentMember: null,\n                        challengeType: 'EVENT',\n                        isParticipated: false,\n                        startDate: '2025-08-10T00:00:00.000Z',\n                        endDate: '2025-08-10T23:59:59.000Z',\n                        isStarted: false,\n                        isFinished: false,\n                    },\n                ],\n                meta: {\n                    total: 2,\n                    page: 1,\n                    limit: 10,\n                    totalPages: 1,\n                    hasNextPage: false,\n                },\n            },\n        },\n    }));\n}\nfunction ApiGetUserChallengeProgress() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자 챌린지 진행률 조회',\n        description: '특정 챌린지에 대해 사용자의 주차별 진행 정보, 전체 달성률, 참가자 수, 시작일, 종료일을 반환합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        description: '조회할 챌린지 UUID',\n        type: String,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '사용자 챌린지 진행률 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                challengeInfo: {\n                    type: 'object',\n                    properties: {\n                        participantCount: { type: 'number', example: 23 },\n                        startDate: {\n                            type: 'string',\n                            example: '2025-07-01T00:00:00.000Z',\n                        },\n                        endDate: { type: 'string', example: '2025-07-31T23:59:59.000Z' },\n                    },\n                },\n                totalAchievementRate: { type: 'number', example: 67 },\n            },\n        },\n    }));\n}\nfunction ApiGetMonthlyChallengeStats() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 월별 인증 현황 조회',\n        description: '해당 챌린지의 지정된 월에 대해 날짜별 인증 수 및 인증한 사용자 정보 배열을 반환합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        description: '조회할 챌린지 UUID',\n        type: String,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'year',\n        description: '조회할 연도 (예: 2025)',\n        type: Number,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'month',\n        description: '조회할 달 (1-12)',\n        type: Number,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '월별 인증 현황 조회 성공',\n        type: monthly_challenge_stats_response_dto_1.MonthlyChallengeStatsResponseDto,\n    }));\n}\nfunction ApiGetChallengeVerificationStats() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 AI 검증 통계 조회',\n        description: '특정 챌린지의 AI 검증 상태별 통계를 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        type: String,\n        description: '조회할 챌린지 UUID',\n        example: '01JZZP4T40RB3H2SP70PKBJWNR',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '검증 통계 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '챌린지 검증 통계 조회 성공',\n                },\n                data: {\n                    type: 'object',\n                    properties: {\n                        challengeUuid: {\n                            type: 'string',\n                            example: '01JZZP4T40RB3H2SP70PKBJWNR',\n                        },\n                        totalPosts: {\n                            type: 'number',\n                            example: 150,\n                            description: '총 게시글 수',\n                        },\n                        pendingCount: {\n                            type: 'number',\n                            example: 5,\n                            description: '검증 대기 중인 게시글 수',\n                        },\n                        approvedCount: {\n                            type: 'number',\n                            example: 120,\n                            description: '승인된 게시글 수',\n                        },\n                        rejectedCount: {\n                            type: 'number',\n                            example: 15,\n                            description: '거부된 게시글 수',\n                        },\n                        reviewCount: {\n                            type: 'number',\n                            example: 10,\n                            description: '검토 필요한 게시글 수',\n                        },\n                        averageConfidence: {\n                            type: 'number',\n                            example: 0.78,\n                            description: '평균 AI 신뢰도 점수',\n                        },\n                        verificationRate: {\n                            type: 'number',\n                            example: 0.93,\n                            description: '검증 완료율 (대기중 제외)',\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '챌린지를 찾을 수 없음',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'CHALLENGE_001' },\n                message: { type: 'string', example: '챌린지를 찾을 수 없습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 500,\n        description: '서버 내부 오류',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'SYS_001' },\n                message: { type: 'string', example: '서버 오류가 발생했습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n            },\n        },\n    }));\n}\nfunction ApiGetChallengePostsForReview() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 검토 필요한 게시글 목록 조회',\n        description: 'AI 검증에서 검토가 필요하다고 판단된 게시글들을 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        type: String,\n        description: '조회할 챌린지 UUID',\n        example: '01JZZP4T40RB3H2SP70PKBJWNR',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        type: Number,\n        description: '페이지 번호 (기본값: 1)',\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        type: Number,\n        description: '페이지당 항목 수 (기본값: 10)',\n        example: 10,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '검토 필요한 게시글 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '검토 필요한 게시글 목록 조회 성공',\n                },\n                data: {\n                    type: 'object',\n                    properties: {\n                        posts: {\n                            type: 'array',\n                            items: {\n                                type: 'object',\n                                properties: {\n                                    postUuid: {\n                                        type: 'string',\n                                        example: '01JZZP4T40RB3H2SP70PKBJWNR',\n                                    },\n                                    title: {\n                                        type: 'string',\n                                        example: '오늘의 러닝 인증',\n                                    },\n                                    content: {\n                                        type: 'string',\n                                        example: '5km 완주했습니다!',\n                                    },\n                                    imageUrl: {\n                                        type: 'array',\n                                        items: { type: 'string' },\n                                        example: [\n                                            'https://example.com/image1.jpg',\n                                            'https://example.com/image2.jpg',\n                                        ],\n                                    },\n                                    verificationStatus: {\n                                        type: 'string',\n                                        example: 'review',\n                                        description: '검증 상태',\n                                    },\n                                    aiConfidence: {\n                                        type: 'number',\n                                        example: 0.45,\n                                        description: 'AI 신뢰도 점수',\n                                    },\n                                    aiAnalysisResult: {\n                                        type: 'string',\n                                        example: '이미지에서 러닝 관련 요소를 명확히 식별하기 어려워 검토가 필요합니다.',\n                                        description: 'AI 분석 결과',\n                                    },\n                                    createdAt: {\n                                        type: 'string',\n                                        format: 'date-time',\n                                        example: '2025-01-27T10:30:00.000Z',\n                                    },\n                                    user: {\n                                        type: 'object',\n                                        properties: {\n                                            userUuid: {\n                                                type: 'string',\n                                                example: '01JZZP4T40RB3H2SP70PKBJWNR',\n                                            },\n                                            nickname: {\n                                                type: 'string',\n                                                example: '시원한 포도',\n                                            },\n                                            profileImage: {\n                                                type: 'string',\n                                                example: 'https://example.com/profile.jpg',\n                                            },\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                        pagination: {\n                            type: 'object',\n                            properties: {\n                                total: { type: 'number', example: 25 },\n                                page: { type: 'number', example: 1 },\n                                limit: { type: 'number', example: 10 },\n                                totalPages: { type: 'number', example: 3 },\n                                hasNextPage: { type: 'boolean', example: true },\n                                hasPrevPage: { type: 'boolean', example: false },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '챌린지를 찾을 수 없음',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'CHALLENGE_001' },\n                message: { type: 'string', example: '챌린지를 찾을 수 없습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 500,\n        description: '서버 내부 오류',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'SYS_001' },\n                message: { type: 'string', example: '서버 오류가 발생했습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n            },\n        },\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/decorators/challenges.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/challenges/dto/challenge-response.dto.ts':
      /*!**************************************************************!*\
  !*** ./src/modules/challenges/dto/challenge-response.dto.ts ***!
  \**************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChallengeResponseDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass ChallengeResponseDto {\n}\nexports.ChallengeResponseDto = ChallengeResponseDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: 1 }),\n    __metadata("design:type", Number)\n], ChallengeResponseDto.prototype, "id", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'01JYKQ330DPJ46AKH3A28S85F9\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "challengeUuid", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'6월 새벽 기상 챌린지\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "title", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'NORMAL\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "type", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'https://cdn.example.com/images/challenge-profile.png\',\n    }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "profile", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'https://cdn.example.com/images/challenge-banner.png\',\n    }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "banner", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'하루를 일찍 시작하고 싶은 사람들을 위한 챌린지입니다.\',\n    }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "introduce", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'6시 전에 일어나서 인증샷!!\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "verificationGuide", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'2025-07-01T00:00:00.000Z\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "startDate", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'2025-07-31T23:59:59.000Z\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "endDate", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: 5, description: \'챌린지 목표 수치\' }),\n    __metadata("design:type", Number)\n], ChallengeResponseDto.prototype, "goal", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: 18 }),\n    __metadata("design:type", Number)\n], ChallengeResponseDto.prototype, "startAge", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: 40 }),\n    __metadata("design:type", Number)\n], ChallengeResponseDto.prototype, "endAge", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'NONE\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "gender", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: 30 }),\n    __metadata("design:type", Number)\n], ChallengeResponseDto.prototype, "maxMember", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'01JYKQ0P03G8AFAAW4AZ31P19B\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "creatorUuid", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: [\'01JYKQ0P03G8AFAAW4AZ31P19B\'],\n        type: [String],\n    }),\n    __metadata("design:type", Array)\n], ChallengeResponseDto.prototype, "participantUuid", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: 5 }),\n    __metadata("design:type", Number)\n], ChallengeResponseDto.prototype, "coinAmount", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: false }),\n    __metadata("design:type", Boolean)\n], ChallengeResponseDto.prototype, "isStarted", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: false }),\n    __metadata("design:type", Boolean)\n], ChallengeResponseDto.prototype, "isFinished", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: [],\n        type: [String],\n    }),\n    __metadata("design:type", Array)\n], ChallengeResponseDto.prototype, "successParticipantsUuid", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'2025-06-25T14:15:25.966Z\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "createdAt", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'2025-06-25T14:15:25.966Z\' }),\n    __metadata("design:type", String)\n], ChallengeResponseDto.prototype, "updatedAt", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/dto/challenge-response.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/challenges/dto/create-challenge.dto.ts':
      /*!************************************************************!*\
  !*** ./src/modules/challenges/dto/create-challenge.dto.ts ***!
  \************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CreateChallengeDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst class_transformer_1 = __webpack_require__(/*! class-transformer */ "class-transformer");\nconst challenge_enum_1 = __webpack_require__(/*! @/types/challenge.enum */ "./src/types/challenge.enum.ts");\nclass CreateChallengeDto {\n}\nexports.CreateChallengeDto = CreateChallengeDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({ description: \'챌린지명\', example: \'6월 새벽 기상 챌린지\' }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "title", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 유형\',\n        enum: challenge_enum_1.ChallengeType,\n        example: challenge_enum_1.ChallengeType.NORMAL,\n    }),\n    (0, class_validator_1.IsEnum)(challenge_enum_1.ChallengeType),\n    (0, class_transformer_1.Transform)(({ value }) => value?.toUpperCase?.()),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "type", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 소개글\',\n        example: \'하루를 일찍 시작하고 싶은 사람들을 위한 챌린지입니다.\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "introduce", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 인증 방법\',\n        example: \'6시 전에 일어나서 인증샷!!\',\n    }),\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsOptional)(),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "verificationGuide", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'시작 일자\',\n        example: \'2025-07-01T00:00:00.000Z\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "start_date", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'종료 일자\',\n        required: false,\n        example: \'2025-07-31T23:59:59.000Z\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "end_date", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ description: \'주당 인증 목표 횟수\', example: 5 }),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_transformer_1.Transform)(({ value }) => Number(value)),\n    __metadata("design:type", Number)\n], CreateChallengeDto.prototype, "goal", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ description: \'참여 가능 최소 연령\', example: 18 }),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_transformer_1.Transform)(({ value }) => Number(value)),\n    __metadata("design:type", Number)\n], CreateChallengeDto.prototype, "start_age", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'참여 가능 최대 연령\',\n        required: false,\n        example: 40,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_transformer_1.Transform)(({ value }) => Number(value)),\n    __metadata("design:type", Number)\n], CreateChallengeDto.prototype, "end_age", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'성별 제한\',\n        enum: challenge_enum_1.GenderType,\n        example: challenge_enum_1.GenderType.NONE,\n    }),\n    (0, class_validator_1.IsEnum)(challenge_enum_1.GenderType),\n    (0, class_transformer_1.Transform)(({ value }) => value?.toUpperCase?.()),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "gender", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ description: \'최대 참여자 수\', example: 30 }),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_transformer_1.Transform)(({ value }) => Number(value)),\n    __metadata("design:type", Number)\n], CreateChallengeDto.prototype, "max_member", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ description: \'참여 시 필요한 코인 양\', example: 5 }),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_transformer_1.Transform)(({ value }) => Number(value)),\n    __metadata("design:type", Number)\n], CreateChallengeDto.prototype, "coin_amount", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 프로필 이미지\',\n        required: false,\n        example: \'https://cdn.example.com/images/challenge-profile.png\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "profile", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 배너 이미지\',\n        required: false,\n        example: \'https://cdn.example.com/images/challenge-banner.png\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateChallengeDto.prototype, "banner", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/dto/create-challenge.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/challenges/dto/find-all-challenges.dto.ts':
      /*!***************************************************************!*\
  !*** ./src/modules/challenges/dto/find-all-challenges.dto.ts ***!
  \***************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.FindAllChallengesDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst class_transformer_1 = __webpack_require__(/*! class-transformer */ "class-transformer");\nconst challenge_enum_1 = __webpack_require__(/*! @/types/challenge.enum */ "./src/types/challenge.enum.ts");\nclass FindAllChallengesDto {\n    constructor() {\n        this.page = 1;\n        this.limit = 10;\n    }\n}\nexports.FindAllChallengesDto = FindAllChallengesDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({ description: \'페이지 번호\', default: 1, required: false }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_transformer_1.Type)(() => Number),\n    (0, class_validator_1.IsNumber)(),\n    __metadata("design:type", Number)\n], FindAllChallengesDto.prototype, "page", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'페이지당 챌린지 수\',\n        default: 10,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_transformer_1.Type)(() => Number),\n    (0, class_validator_1.IsNumber)(),\n    __metadata("design:type", Number)\n], FindAllChallengesDto.prototype, "limit", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 타입 필터\',\n        enum: challenge_enum_1.ChallengeType,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(challenge_enum_1.ChallengeType),\n    __metadata("design:type", String)\n], FindAllChallengesDto.prototype, "type", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ description: \'성별 필터\', enum: challenge_enum_1.GenderType, required: false }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(challenge_enum_1.GenderType),\n    __metadata("design:type", String)\n], FindAllChallengesDto.prototype, "gender", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'챌린지 상태 필터\',\n        enum: challenge_enum_1.ChallengeStatusType,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(challenge_enum_1.ChallengeStatusType),\n    __metadata("design:type", String)\n], FindAllChallengesDto.prototype, "status", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/dto/find-all-challenges.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/challenges/dto/monthly-challenge-stats.response.dto.ts':
      /*!****************************************************************************!*\
  !*** ./src/modules/challenges/dto/monthly-challenge-stats.response.dto.ts ***!
  \****************************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MonthlyChallengeStatsResponseDto = exports.DailyStatsDto = exports.UserInfoDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass UserInfoDto {\n}\nexports.UserInfoDto = UserInfoDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'01HZYFDYZ0EZ4KP6FYK6G62PC6\' }),\n    __metadata("design:type", String)\n], UserInfoDto.prototype, "userUuid", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: \'passu_nickname\' }),\n    __metadata("design:type", String)\n], UserInfoDto.prototype, "nickname", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'https://passu.s3.ap-northeast-2.amazonaws.com/user/...\',\n    }),\n    __metadata("design:type", String)\n], UserInfoDto.prototype, "profileImage", void 0);\nclass DailyStatsDto {\n}\nexports.DailyStatsDto = DailyStatsDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({ example: 3, description: \'해당 날짜의 인증 수\' }),\n    __metadata("design:type", Number)\n], DailyStatsDto.prototype, "count", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({ type: [UserInfoDto], description: \'인증한 사용자 정보 배열\' }),\n    __metadata("design:type", Array)\n], DailyStatsDto.prototype, "users", void 0);\nclass MonthlyChallengeStatsResponseDto {\n}\nexports.MonthlyChallengeStatsResponseDto = MonthlyChallengeStatsResponseDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: {\n            \'2025-07-01\': {\n                count: 3,\n                users: [\n                    {\n                        userUuid: \'01HZYFDYZ0EZ4KP6FYK6G62PC6\',\n                        nickname: \'passu_nickname\',\n                        profileImage: \'https://passu.s3.ap-northeast-2.amazonaws.com/user/...\',\n                    },\n                ],\n            },\n        },\n        description: \'날짜별 인증 현황\',\n    }),\n    __metadata("design:type", Object)\n], MonthlyChallengeStatsResponseDto.prototype, "data", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/dto/monthly-challenge-stats.response.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/challenges/dto/update-challenge.dto.ts':
      /*!************************************************************!*\
  !*** ./src/modules/challenges/dto/update-challenge.dto.ts ***!
  \************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdateChallengeDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst create_challenge_dto_1 = __webpack_require__(/*! ./create-challenge.dto */ "./src/modules/challenges/dto/create-challenge.dto.ts");\nclass UpdateChallengeDto extends (0, swagger_1.PartialType)(create_challenge_dto_1.CreateChallengeDto) {\n}\nexports.UpdateChallengeDto = UpdateChallengeDto;\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/challenges/dto/update-challenge.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/chat/chat.controller.ts':
      /*!*********************************************!*\
  !*** ./src/modules/chat/chat.controller.ts ***!
  \*********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChatController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst chat_service_1 = __webpack_require__(/*! ./chat.service */ "./src/modules/chat/chat.service.ts");\nconst create_chat_room_dto_1 = __webpack_require__(/*! ./dto/create-chat-room.dto */ "./src/modules/chat/dto/create-chat-room.dto.ts");\nconst send_message_dto_1 = __webpack_require__(/*! ./dto/send-message.dto */ "./src/modules/chat/dto/send-message.dto.ts");\nconst get_chat_rooms_dto_1 = __webpack_require__(/*! ./dto/get-chat-rooms.dto */ "./src/modules/chat/dto/get-chat-rooms.dto.ts");\nconst get_messages_dto_1 = __webpack_require__(/*! ./dto/get-messages.dto */ "./src/modules/chat/dto/get-messages.dto.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst chat_swagger_1 = __webpack_require__(/*! ./decorators/chat.swagger */ "./src/modules/chat/decorators/chat.swagger.ts");\nlet ChatController = class ChatController {\n    constructor(chatService) {\n        this.chatService = chatService;\n    }\n    async findOrCreateDirectRoom(targetUserUuid, userUuid) {\n        return this.chatService.findOrCreateDirectRoom(userUuid, targetUserUuid);\n    }\n    async createChatRoom(createChatRoomDto, userUuid) {\n        return this.chatService.createChatRoom(userUuid, createChatRoomDto);\n    }\n    async getChatRooms(getChatRoomsDto, userUuid) {\n        return this.chatService.getChatRooms(userUuid, getChatRoomsDto);\n    }\n    async getChatRoom(roomUuid, userUuid) {\n        return this.chatService.getChatRoom(userUuid, roomUuid);\n    }\n    async sendMessage(roomUuid, sendMessageDto, userUuid) {\n        return this.chatService.sendMessage(userUuid, roomUuid, sendMessageDto);\n    }\n    async getMessages(roomUuid, getMessagesDto, userUuid) {\n        return this.chatService.getMessages(userUuid, roomUuid, getMessagesDto);\n    }\n    async markMessagesAsRead(roomUuid, userUuid) {\n        return this.chatService.markMessagesAsRead(userUuid, roomUuid);\n    }\n    async leaveChatRoom(roomUuid, userUuid) {\n        return this.chatService.leaveChatRoom(userUuid, roomUuid);\n    }\n    async joinChatRoom(roomUuid, userUuid) {\n        return this.chatService.joinChatRoom(userUuid, roomUuid);\n    }\n};\nexports.ChatController = ChatController;\n__decorate([\n    (0, common_1.Post)(\'direct/:targetUserUuid\'),\n    (0, chat_swagger_1.ApiFindOrCreateDirectRoom)(),\n    __param(0, (0, common_1.Param)(\'targetUserUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "findOrCreateDirectRoom", null);\n__decorate([\n    (0, common_1.Post)(\'room\'),\n    (0, chat_swagger_1.ApiCreateChatRoom)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [create_chat_room_dto_1.CreateChatRoomDto, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "createChatRoom", null);\n__decorate([\n    (0, common_1.Get)(\'rooms\'),\n    (0, chat_swagger_1.ApiGetChatRooms)(),\n    __param(0, (0, common_1.Query)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [get_chat_rooms_dto_1.GetChatRoomsDto, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "getChatRooms", null);\n__decorate([\n    (0, common_1.Get)(\'room/:roomUuid\'),\n    (0, chat_swagger_1.ApiGetChatRoom)(),\n    __param(0, (0, common_1.Param)(\'roomUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "getChatRoom", null);\n__decorate([\n    (0, common_1.Post)(\'room/:roomUuid/message\'),\n    (0, chat_swagger_1.ApiSendMessage)(),\n    __param(0, (0, common_1.Param)(\'roomUuid\')),\n    __param(1, (0, common_1.Body)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, send_message_dto_1.SendMessageDto, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "sendMessage", null);\n__decorate([\n    (0, common_1.Get)(\'room/:roomUuid/messages\'),\n    (0, chat_swagger_1.ApiGetMessages)(),\n    __param(0, (0, common_1.Param)(\'roomUuid\')),\n    __param(1, (0, common_1.Query)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, get_messages_dto_1.GetMessagesDto, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "getMessages", null);\n__decorate([\n    (0, common_1.Patch)(\'room/:roomUuid/read\'),\n    (0, chat_swagger_1.ApiMarkMessagesAsRead)(),\n    __param(0, (0, common_1.Param)(\'roomUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "markMessagesAsRead", null);\n__decorate([\n    (0, common_1.Delete)(\'room/:roomUuid/leave\'),\n    (0, chat_swagger_1.ApiLeaveChatRoom)(),\n    __param(0, (0, common_1.Param)(\'roomUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "leaveChatRoom", null);\n__decorate([\n    (0, common_1.Post)(\'room/:roomUuid/join\'),\n    (0, chat_swagger_1.ApiJoinChatRoom)(),\n    __param(0, (0, common_1.Param)(\'roomUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], ChatController.prototype, "joinChatRoom", null);\nexports.ChatController = ChatController = __decorate([\n    (0, swagger_1.ApiTags)(\'chat\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'chat\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [chat_service_1.ChatService])\n], ChatController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/chat.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/chat/chat.gateway.ts':
      /*!******************************************!*\
  !*** ./src/modules/chat/chat.gateway.ts ***!
  \******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatGateway = void 0;\nconst websockets_1 = __webpack_require__(/*! @nestjs/websockets */ \"@nestjs/websockets\");\nconst socket_io_1 = __webpack_require__(/*! socket.io */ \"socket.io\");\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst winston_1 = __webpack_require__(/*! winston */ \"winston\");\nconst chat_service_1 = __webpack_require__(/*! ./chat.service */ \"./src/modules/chat/chat.service.ts\");\nconst jwt_1 = __webpack_require__(/*! @nestjs/jwt */ \"@nestjs/jwt\");\nlet ChatGateway = class ChatGateway {\n    constructor(chatService, jwtService, logger) {\n        this.chatService = chatService;\n        this.jwtService = jwtService;\n        this.logger = logger;\n        this.connectedUsers = new Map();\n    }\n    async handleConnection(client) {\n        try {\n            this.logger.info('WebSocket 연결 시도', {\n                socketId: client.id,\n                auth: client.handshake.auth,\n                headers: client.handshake.headers,\n            });\n            const token = client.handshake.auth?.token ||\n                client.handshake.headers?.authorization?.replace('Bearer ', '');\n            this.logger.info('토큰 추출 결과', {\n                socketId: client.id,\n                hasToken: !!token,\n                tokenLength: token?.length || 0,\n            });\n            if (!token) {\n                this.logger.warn('WebSocket 연결 실패: 토큰 없음', {\n                    socketId: client.id,\n                });\n                client.emit('error', { message: '인증 토큰이 필요합니다.' });\n                client.disconnect();\n                return;\n            }\n            this.logger.info('JWT 토큰 검증 시작', {\n                socketId: client.id,\n                tokenPreview: token.substring(0, 20) + '...',\n            });\n            const payload = this.jwtService.verify(token);\n            this.logger.info('JWT 토큰 검증 성공', {\n                socketId: client.id,\n                userUuid: payload.userUuid,\n                nickname: payload.nickname,\n            });\n            client.userUuid = payload.userUuid;\n            client.nickname = payload.nickname;\n            this.connectedUsers.set(client.id, client.userUuid);\n            await this.joinUserChatRooms(client);\n            this.logger.info('WebSocket 연결 성공', {\n                socketId: client.id,\n                userUuid: client.userUuid,\n                nickname: client.nickname,\n            });\n            client.emit('connected', {\n                message: '채팅 서버에 연결되었습니다.',\n                userUuid: client.userUuid,\n            });\n        }\n        catch (error) {\n            this.logger.error('WebSocket 인증 실패', {\n                socketId: client.id,\n                error: error.message,\n            });\n            client.disconnect();\n        }\n    }\n    handleDisconnect(client) {\n        this.connectedUsers.delete(client.id);\n        this.logger.info('WebSocket 연결 해제', {\n            socketId: client.id,\n            userUuid: client.userUuid,\n        });\n    }\n    async handleSendMessage(data, client) {\n        try {\n            const { roomUuid, message } = data;\n            if (!client.userUuid) {\n                client.emit('error', { message: '인증되지 않은 사용자입니다.' });\n                return;\n            }\n            const savedMessage = await this.chatService.sendMessage(client.userUuid, roomUuid, message);\n            client.to(roomUuid).emit('newMessage', savedMessage);\n            this.logger.info('WebSocket 메시지 전송', {\n                messageId: savedMessage.id,\n                roomUuid,\n                senderUuid: client.userUuid,\n            });\n        }\n        catch (error) {\n            this.logger.error('WebSocket 메시지 전송 실패', {\n                error: error.message,\n                userUuid: client.userUuid,\n            });\n            client.emit('error', {\n                message: '메시지 전송에 실패했습니다.',\n                error: error.message,\n            });\n        }\n    }\n    async handleJoinRoom(data, client) {\n        try {\n            const { roomUuid } = data;\n            if (!client.userUuid) {\n                client.emit('error', { message: '인증되지 않은 사용자입니다.' });\n                return;\n            }\n            await this.chatService.getChatRoom(client.userUuid, roomUuid);\n            await client.join(roomUuid);\n            client.emit('joinedRoom', { roomUuid });\n            this.logger.info('WebSocket 채팅방 입장', {\n                roomUuid,\n                userUuid: client.userUuid,\n                socketId: client.id,\n            });\n        }\n        catch (error) {\n            this.logger.error('WebSocket 채팅방 입장 실패', {\n                error: error.message,\n                userUuid: client.userUuid,\n            });\n            client.emit('error', {\n                message: '채팅방 입장에 실패했습니다.',\n                error: error.message,\n            });\n        }\n    }\n    async handleLeaveRoom(data, client) {\n        try {\n            const { roomUuid } = data;\n            await client.leave(roomUuid);\n            client.emit('leftRoom', { roomUuid });\n            this.logger.info('WebSocket 채팅방 나가기', {\n                roomUuid,\n                userUuid: client.userUuid,\n                socketId: client.id,\n            });\n        }\n        catch (error) {\n            this.logger.error('WebSocket 채팅방 나가기 실패', {\n                error: error.message,\n                userUuid: client.userUuid,\n            });\n        }\n    }\n    async handleMarkAsRead(data, client) {\n        try {\n            const { roomUuid } = data;\n            if (!client.userUuid) {\n                client.emit('error', { message: '인증되지 않은 사용자입니다.' });\n                return;\n            }\n            await this.chatService.markMessagesAsRead(client.userUuid, roomUuid);\n            client.to(roomUuid).emit('messagesRead', {\n                roomUuid,\n                userUuid: client.userUuid,\n                timestamp: new Date(),\n            });\n            this.logger.info('WebSocket 메시지 읽음 처리', {\n                roomUuid,\n                userUuid: client.userUuid,\n            });\n        }\n        catch (error) {\n            this.logger.error('WebSocket 메시지 읽음 처리 실패', {\n                error: error.message,\n                userUuid: client.userUuid,\n            });\n            client.emit('error', {\n                message: '메시지 읽음 처리에 실패했습니다.',\n                error: error.message,\n            });\n        }\n    }\n    async handleTyping(data, client) {\n        const { roomUuid, isTyping } = data;\n        if (!client.userUuid) {\n            return;\n        }\n        client.to(roomUuid).emit('userTyping', {\n            roomUuid,\n            userUuid: client.userUuid,\n            nickname: client.nickname,\n            isTyping,\n        });\n    }\n    async joinUserChatRooms(client) {\n        try {\n            const chatRoomsResponse = await this.chatService.getChatRooms(client.userUuid, { page: 1, limit: 100 });\n            for (const chatRoom of chatRoomsResponse.chatRooms) {\n                await client.join(chatRoom.roomUuid);\n            }\n            this.logger.info('사용자 채팅방 join 완료', {\n                userUuid: client.userUuid,\n                roomCount: chatRoomsResponse.chatRooms.length,\n            });\n        }\n        catch (error) {\n            this.logger.error('사용자 채팅방 join 실패', {\n                userUuid: client.userUuid,\n                error: error.message,\n            });\n        }\n    }\n    async sendNotificationToUser(userUuid, notification) {\n        const userSockets = Array.from(this.connectedUsers.entries())\n            .filter(([, uuid]) => uuid === userUuid)\n            .map(([socketId]) => socketId);\n        for (const socketId of userSockets) {\n            this.server.to(socketId).emit('notification', notification);\n        }\n    }\n    async sendSystemMessage(roomUuid, message) {\n        this.server.to(roomUuid).emit('systemMessage', {\n            roomUuid,\n            message,\n            timestamp: new Date(),\n        });\n    }\n};\nexports.ChatGateway = ChatGateway;\n__decorate([\n    (0, websockets_1.WebSocketServer)(),\n    __metadata(\"design:type\", socket_io_1.Server)\n], ChatGateway.prototype, \"server\", void 0);\n__decorate([\n    (0, websockets_1.SubscribeMessage)('sendMessage'),\n    __param(0, (0, websockets_1.MessageBody)()),\n    __param(1, (0, websockets_1.ConnectedSocket)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, Object]),\n    __metadata(\"design:returntype\", Promise)\n], ChatGateway.prototype, \"handleSendMessage\", null);\n__decorate([\n    (0, websockets_1.SubscribeMessage)('joinRoom'),\n    __param(0, (0, websockets_1.MessageBody)()),\n    __param(1, (0, websockets_1.ConnectedSocket)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, Object]),\n    __metadata(\"design:returntype\", Promise)\n], ChatGateway.prototype, \"handleJoinRoom\", null);\n__decorate([\n    (0, websockets_1.SubscribeMessage)('leaveRoom'),\n    __param(0, (0, websockets_1.MessageBody)()),\n    __param(1, (0, websockets_1.ConnectedSocket)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, Object]),\n    __metadata(\"design:returntype\", Promise)\n], ChatGateway.prototype, \"handleLeaveRoom\", null);\n__decorate([\n    (0, websockets_1.SubscribeMessage)('markAsRead'),\n    __param(0, (0, websockets_1.MessageBody)()),\n    __param(1, (0, websockets_1.ConnectedSocket)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, Object]),\n    __metadata(\"design:returntype\", Promise)\n], ChatGateway.prototype, \"handleMarkAsRead\", null);\n__decorate([\n    (0, websockets_1.SubscribeMessage)('typing'),\n    __param(0, (0, websockets_1.MessageBody)()),\n    __param(1, (0, websockets_1.ConnectedSocket)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, Object]),\n    __metadata(\"design:returntype\", Promise)\n], ChatGateway.prototype, \"handleTyping\", null);\nexports.ChatGateway = ChatGateway = __decorate([\n    (0, websockets_1.WebSocketGateway)({\n        cors: {\n            origin: '*',\n            credentials: true,\n        },\n        namespace: '/chat',\n    }),\n    __param(2, (0, common_1.Inject)('winston')),\n    __metadata(\"design:paramtypes\", [chat_service_1.ChatService,\n        jwt_1.JwtService,\n        winston_1.Logger])\n], ChatGateway);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/chat.gateway.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/chat/chat.module.ts':
      /*!*****************************************!*\
  !*** ./src/modules/chat/chat.module.ts ***!
  \*****************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChatModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst jwt_1 = __webpack_require__(/*! @nestjs/jwt */ "@nestjs/jwt");\nconst chat_controller_1 = __webpack_require__(/*! ./chat.controller */ "./src/modules/chat/chat.controller.ts");\nconst chat_service_1 = __webpack_require__(/*! ./chat.service */ "./src/modules/chat/chat.service.ts");\nconst chat_gateway_1 = __webpack_require__(/*! ./chat.gateway */ "./src/modules/chat/chat.gateway.ts");\nconst chat_room_entity_1 = __webpack_require__(/*! @/entities/chat-room.entity */ "./src/entities/chat-room.entity.ts");\nconst chat_message_entity_1 = __webpack_require__(/*! @/entities/chat-message.entity */ "./src/entities/chat-message.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst friendship_entity_1 = __webpack_require__(/*! @/entities/friendship.entity */ "./src/entities/friendship.entity.ts");\nconst challenge_entity_1 = __webpack_require__(/*! @/entities/challenge.entity */ "./src/entities/challenge.entity.ts");\nlet ChatModule = class ChatModule {\n};\nexports.ChatModule = ChatModule;\nexports.ChatModule = ChatModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([\n                chat_room_entity_1.ChatRoom,\n                chat_message_entity_1.ChatMessage,\n                user_entity_1.User,\n                friendship_entity_1.Friendship,\n                challenge_entity_1.Challenge,\n            ]),\n            jwt_1.JwtModule.register({\n                secret: \'tbfpemghkdlxld5837\',\n                signOptions: { expiresIn: \'24h\' },\n            }),\n        ],\n        controllers: [chat_controller_1.ChatController],\n        providers: [chat_service_1.ChatService, chat_gateway_1.ChatGateway],\n        exports: [chat_service_1.ChatService, chat_gateway_1.ChatGateway],\n    })\n], ChatModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/chat.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/chat/chat.service.ts':
      /*!******************************************!*\
  !*** ./src/modules/chat/chat.service.ts ***!
  \******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ChatService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ \"@nestjs/typeorm\");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst winston_1 = __webpack_require__(/*! winston */ \"winston\");\nconst ulid_1 = __webpack_require__(/*! ulid */ \"ulid\");\nconst chat_room_entity_1 = __webpack_require__(/*! @/entities/chat-room.entity */ \"./src/entities/chat-room.entity.ts\");\nconst chat_message_entity_1 = __webpack_require__(/*! @/entities/chat-message.entity */ \"./src/entities/chat-message.entity.ts\");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ \"./src/entities/user.entity.ts\");\nconst friendship_entity_1 = __webpack_require__(/*! @/entities/friendship.entity */ \"./src/entities/friendship.entity.ts\");\nconst challenge_entity_1 = __webpack_require__(/*! @/entities/challenge.entity */ \"./src/entities/challenge.entity.ts\");\nconst chat_enum_1 = __webpack_require__(/*! @/types/chat.enum */ \"./src/types/chat.enum.ts\");\nconst friendship_enum_1 = __webpack_require__(/*! @/types/friendship.enum */ \"./src/types/friendship.enum.ts\");\nlet ChatService = class ChatService {\n    constructor(chatRoomRepository, chatMessageRepository, userRepository, friendshipRepository, challengeRepository, logger) {\n        this.chatRoomRepository = chatRoomRepository;\n        this.chatMessageRepository = chatMessageRepository;\n        this.userRepository = userRepository;\n        this.friendshipRepository = friendshipRepository;\n        this.challengeRepository = challengeRepository;\n        this.logger = logger;\n    }\n    async findOrCreateDirectRoom(userUuid, targetUserUuid) {\n        if (userUuid === targetUserUuid) {\n            throw new common_1.BadRequestException('자기 자신과는 채팅할 수 없습니다.');\n        }\n        const targetUser = await this.userRepository.findOne({\n            where: { userUuid: targetUserUuid },\n        });\n        if (!targetUser) {\n            throw new common_1.NotFoundException('존재하지 않는 사용자입니다.');\n        }\n        const friendship = await this.friendshipRepository.findOne({\n            where: [\n                {\n                    requesterUuid: userUuid,\n                    addresseeUuid: targetUserUuid,\n                    status: friendship_enum_1.FriendshipStatus.ACCEPTED,\n                },\n                {\n                    requesterUuid: targetUserUuid,\n                    addresseeUuid: userUuid,\n                    status: friendship_enum_1.FriendshipStatus.ACCEPTED,\n                },\n            ],\n        });\n        if (!friendship) {\n            throw new common_1.ForbiddenException('친구가 아닌 사용자와는 채팅할 수 없습니다.');\n        }\n        const participants = [userUuid, targetUserUuid].sort();\n        const existingRoom = await this.chatRoomRepository\n            .createQueryBuilder('room')\n            .where('room.type = :type', { type: chat_enum_1.ChatRoomType.DIRECT })\n            .andWhere('room.participantUuids = :participantUuids', {\n            participantUuids: participants,\n        })\n            .andWhere('room.isActive = :isActive', { isActive: true })\n            .getOne();\n        if (existingRoom) {\n            const roomResponse = await this.formatChatRoomResponse(existingRoom, userUuid);\n            return {\n                ...roomResponse,\n                isNewRoom: false,\n            };\n        }\n        const roomUuid = (0, ulid_1.ulid)();\n        const roomName = await this.generateRoomName(participants, userUuid);\n        const chatRoom = this.chatRoomRepository.create({\n            roomUuid,\n            type: chat_enum_1.ChatRoomType.DIRECT,\n            name: roomName,\n            participantUuids: participants,\n            challengeUuid: null,\n            isActive: true,\n        });\n        const savedRoom = await this.chatRoomRepository.save(chatRoom);\n        this.logger.info('1대1 채팅방 생성 완료', {\n            roomUuid,\n            userUuid,\n            targetUserUuid,\n        });\n        const roomResponse = await this.formatChatRoomResponse(savedRoom, userUuid);\n        return {\n            ...roomResponse,\n            isNewRoom: true,\n        };\n    }\n    async createChatRoom(userUuid, createChatRoomDto) {\n        const { type, participantUuids, name, challengeUuid } = createChatRoomDto;\n        const allParticipants = [...new Set([userUuid, ...participantUuids])];\n        if (type === chat_enum_1.ChatRoomType.DIRECT) {\n            if (allParticipants.length !== 2) {\n                throw new common_1.BadRequestException('1대1 채팅방은 정확히 2명의 참여자가 필요합니다.');\n            }\n            const otherUserUuid = allParticipants.find((uuid) => uuid !== userUuid);\n            const friendship = await this.friendshipRepository.findOne({\n                where: [\n                    {\n                        requesterUuid: userUuid,\n                        addresseeUuid: otherUserUuid,\n                        status: friendship_enum_1.FriendshipStatus.ACCEPTED,\n                    },\n                    {\n                        requesterUuid: otherUserUuid,\n                        addresseeUuid: userUuid,\n                        status: friendship_enum_1.FriendshipStatus.ACCEPTED,\n                    },\n                ],\n            });\n            if (!friendship) {\n                throw new common_1.ForbiddenException('친구가 아닌 사용자와는 채팅할 수 없습니다.');\n            }\n            const existingRoom = await this.chatRoomRepository\n                .createQueryBuilder('room')\n                .where('room.type = :type', { type: chat_enum_1.ChatRoomType.DIRECT })\n                .andWhere('room.participantUuids = :participantUuids', {\n                participantUuids: allParticipants.sort(),\n            })\n                .getOne();\n            if (existingRoom) {\n                return this.formatChatRoomResponse(existingRoom, userUuid);\n            }\n        }\n        if (challengeUuid) {\n            const challenge = await this.challengeRepository.findOne({\n                where: { challengeUuid },\n            });\n            if (!challenge) {\n                throw new common_1.NotFoundException('존재하지 않는 챌린지입니다.');\n            }\n        }\n        const roomUuid = (0, ulid_1.ulid)();\n        const roomName = name || (await this.generateRoomName(allParticipants, userUuid));\n        const chatRoom = this.chatRoomRepository.create({\n            roomUuid,\n            type,\n            name: roomName,\n            participantUuids: allParticipants.sort(),\n            challengeUuid,\n            isActive: true,\n        });\n        const savedRoom = await this.chatRoomRepository.save(chatRoom);\n        this.logger.info('채팅방 생성 완료', { roomUuid, userUuid, type });\n        return this.formatChatRoomResponse(savedRoom, userUuid);\n    }\n    async getChatRooms(userUuid, getChatRoomsDto) {\n        const { type, page = 1, limit = 20 } = getChatRoomsDto;\n        const skip = (page - 1) * limit;\n        const queryBuilder = this.chatRoomRepository\n            .createQueryBuilder('room')\n            .where(':userUuid = ANY(room.participantUuids)', { userUuid })\n            .andWhere('room.isActive = :isActive', { isActive: true });\n        if (type) {\n            queryBuilder.andWhere('room.type = :type', { type });\n        }\n        const [chatRooms, total] = await queryBuilder\n            .orderBy('room.lastMessageAt', 'DESC')\n            .addOrderBy('room.createdAt', 'DESC')\n            .skip(skip)\n            .take(limit)\n            .getManyAndCount();\n        const formattedRooms = await Promise.all(chatRooms.map((room) => this.formatChatRoomResponse(room, userUuid)));\n        return {\n            chatRooms: formattedRooms,\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(total / limit),\n                totalItems: total,\n                itemsPerPage: limit,\n            },\n        };\n    }\n    async getChatRoom(userUuid, roomUuid) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { roomUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('존재하지 않는 채팅방입니다.');\n        }\n        if (!chatRoom.participantUuids.includes(userUuid)) {\n            throw new common_1.ForbiddenException('채팅방에 참여하지 않은 사용자입니다.');\n        }\n        return this.formatChatRoomResponse(chatRoom, userUuid);\n    }\n    async sendMessage(userUuid, roomUuid, sendMessageDto) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { roomUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('존재하지 않는 채팅방입니다.');\n        }\n        if (!chatRoom.participantUuids.includes(userUuid)) {\n            throw new common_1.ForbiddenException('채팅방에 참여하지 않은 사용자입니다.');\n        }\n        const { type, content, imageUrl } = sendMessageDto;\n        const message = this.chatMessageRepository.create({\n            roomUuid,\n            senderUuid: userUuid,\n            type,\n            content,\n            imageUrl,\n            isRead: false,\n            readByUuids: [userUuid],\n        });\n        const savedMessage = await this.chatMessageRepository.save(message);\n        await this.chatRoomRepository.update({ roomUuid }, { lastMessageAt: savedMessage.createdAt });\n        this.logger.info('메시지 전송 완료', {\n            messageId: savedMessage.id,\n            roomUuid,\n            senderUuid: userUuid,\n        });\n        return this.formatMessageResponse(savedMessage, userUuid);\n    }\n    async getMessages(userUuid, roomUuid, getMessagesDto) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { roomUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('존재하지 않는 채팅방입니다.');\n        }\n        if (!chatRoom.participantUuids.includes(userUuid)) {\n            throw new common_1.ForbiddenException('채팅방에 참여하지 않은 사용자입니다.');\n        }\n        const { page = 1, limit = 50, lastMessageId } = getMessagesDto;\n        const skip = (page - 1) * limit;\n        const queryBuilder = this.chatMessageRepository\n            .createQueryBuilder('message')\n            .where('message.roomUuid = :roomUuid', { roomUuid });\n        if (lastMessageId) {\n            queryBuilder.andWhere('message.id < :lastMessageId', { lastMessageId });\n        }\n        const [messages, total] = await queryBuilder\n            .orderBy('message.createdAt', 'DESC')\n            .skip(skip)\n            .take(limit)\n            .getManyAndCount();\n        const formattedMessages = await Promise.all(messages.map((message) => this.formatMessageResponse(message, userUuid)));\n        return {\n            messages: formattedMessages.reverse(),\n            pagination: {\n                currentPage: page,\n                totalPages: Math.ceil(total / limit),\n                totalItems: total,\n                itemsPerPage: limit,\n                hasMore: total > skip + limit,\n            },\n        };\n    }\n    async markMessagesAsRead(userUuid, roomUuid) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { roomUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('존재하지 않는 채팅방입니다.');\n        }\n        if (!chatRoom.participantUuids.includes(userUuid)) {\n            throw new common_1.ForbiddenException('채팅방에 참여하지 않은 사용자입니다.');\n        }\n        if (chatRoom.type === chat_enum_1.ChatRoomType.DIRECT) {\n            await this.chatMessageRepository\n                .createQueryBuilder()\n                .update(chat_message_entity_1.ChatMessage)\n                .set({ isRead: true })\n                .where('roomUuid = :roomUuid', { roomUuid })\n                .andWhere('senderUuid != :userUuid', { userUuid })\n                .andWhere('isRead = :isRead', { isRead: false })\n                .execute();\n        }\n        else {\n            const unreadMessages = await this.chatMessageRepository.find({\n                where: { roomUuid },\n            });\n            for (const message of unreadMessages) {\n                if (!message.readByUuids.includes(userUuid) &&\n                    message.senderUuid !== userUuid) {\n                    message.readByUuids.push(userUuid);\n                    await this.chatMessageRepository.save(message);\n                }\n            }\n        }\n        this.logger.info('메시지 읽음 처리 완료', { roomUuid, userUuid });\n        return { success: true };\n    }\n    async leaveChatRoom(userUuid, roomUuid) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { roomUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('존재하지 않는 채팅방입니다.');\n        }\n        if (!chatRoom.participantUuids.includes(userUuid)) {\n            throw new common_1.ForbiddenException('채팅방에 참여하지 않은 사용자입니다.');\n        }\n        chatRoom.participantUuids = chatRoom.participantUuids.filter((uuid) => uuid !== userUuid);\n        if (chatRoom.participantUuids.length <= 1) {\n            chatRoom.isActive = false;\n        }\n        await this.chatRoomRepository.save(chatRoom);\n        if (chatRoom.type === chat_enum_1.ChatRoomType.GROUP && chatRoom.isActive) {\n            const user = await this.userRepository.findOne({ where: { userUuid } });\n            const systemMessage = this.chatMessageRepository.create({\n                roomUuid,\n                senderUuid: 'system',\n                type: chat_enum_1.MessageType.SYSTEM,\n                content: `${user?.nickname || '사용자'}님이 채팅방을 나갔습니다.`,\n                isRead: true,\n                readByUuids: chatRoom.participantUuids,\n            });\n            await this.chatMessageRepository.save(systemMessage);\n        }\n        this.logger.info('채팅방 나가기 완료', { roomUuid, userUuid });\n        return { success: true, message: '채팅방을 나갔습니다.' };\n    }\n    async addParticipantToChallengeRoom(challengeUuid, userUuid) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { challengeUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('챌린지 채팅방을 찾을 수 없습니다.');\n        }\n        if (chatRoom.participantUuids.includes(userUuid)) {\n            this.logger.warn('이미 채팅방에 참여한 사용자입니다.', {\n                challengeUuid,\n                userUuid,\n            });\n            return;\n        }\n        chatRoom.participantUuids.push(userUuid);\n        await this.chatRoomRepository.save(chatRoom);\n        const user = await this.userRepository.findOne({ where: { userUuid } });\n        const systemMessage = this.chatMessageRepository.create({\n            roomUuid: chatRoom.roomUuid,\n            senderUuid: 'system',\n            type: chat_enum_1.MessageType.SYSTEM,\n            content: `${user?.nickname || '사용자'}님이 채팅방에 참여했습니다.`,\n            isRead: false,\n            readByUuids: [],\n        });\n        await this.chatMessageRepository.save(systemMessage);\n        this.logger.info('챌린지 채팅방 참여자 추가 완료', {\n            challengeUuid,\n            userUuid,\n        });\n    }\n    async removeParticipantFromChallengeRoom(challengeUuid, userUuid) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { challengeUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('챌린지 채팅방을 찾을 수 없습니다.');\n        }\n        if (!chatRoom.participantUuids.includes(userUuid)) {\n            this.logger.warn('채팅방에 참여하지 않은 사용자입니다.', {\n                challengeUuid,\n                userUuid,\n            });\n            return;\n        }\n        chatRoom.participantUuids = chatRoom.participantUuids.filter((uuid) => uuid !== userUuid);\n        await this.chatRoomRepository.save(chatRoom);\n        const user = await this.userRepository.findOne({ where: { userUuid } });\n        const systemMessage = this.chatMessageRepository.create({\n            roomUuid: chatRoom.roomUuid,\n            senderUuid: 'system',\n            type: chat_enum_1.MessageType.SYSTEM,\n            content: `${user?.nickname || '사용자'}님이 채팅방을 나갔습니다.`,\n            isRead: false,\n            readByUuids: [],\n        });\n        await this.chatMessageRepository.save(systemMessage);\n        this.logger.info('챌린지 채팅방 참여자 제거 완료', {\n            challengeUuid,\n            userUuid,\n        });\n    }\n    async formatChatRoomResponse(chatRoom, currentUserUuid) {\n        const participants = await this.userRepository.find({\n            where: { userUuid: (0, typeorm_2.In)(chatRoom.participantUuids) },\n            select: ['userUuid', 'nickname', 'profileImage'],\n        });\n        const lastMessage = await this.chatMessageRepository.findOne({\n            where: { roomUuid: chatRoom.roomUuid },\n            order: { createdAt: 'DESC' },\n        });\n        const unreadCount = await this.getUnreadMessageCount(chatRoom.roomUuid, currentUserUuid, chatRoom.type);\n        return {\n            roomUuid: chatRoom.roomUuid,\n            type: chatRoom.type,\n            name: chatRoom.name,\n            participants: participants.map((p) => ({\n                userUuid: p.userUuid,\n                nickname: p.nickname,\n                profileImage: p.profileImage,\n            })),\n            challengeUuid: chatRoom.challengeUuid,\n            lastMessage: lastMessage\n                ? {\n                    id: lastMessage.id,\n                    type: lastMessage.type,\n                    content: lastMessage.content,\n                    senderUuid: lastMessage.senderUuid,\n                    createdAt: lastMessage.createdAt,\n                }\n                : null,\n            lastMessageAt: chatRoom.lastMessageAt,\n            unreadCount,\n            createdAt: chatRoom.createdAt,\n            requesterUuid: currentUserUuid,\n        };\n    }\n    async formatMessageResponse(message, currentUserUuid) {\n        const sender = await this.userRepository.findOne({\n            where: { userUuid: message.senderUuid },\n            select: ['userUuid', 'nickname', 'profileImage'],\n        });\n        return {\n            id: message.id,\n            roomUuid: message.roomUuid,\n            type: message.type,\n            content: message.content,\n            imageUrl: message.imageUrl,\n            sender: sender\n                ? {\n                    userUuid: sender.userUuid,\n                    nickname: sender.nickname,\n                    profileImage: sender.profileImage,\n                }\n                : null,\n            isRead: message.isRead,\n            readByUuids: message.readByUuids,\n            isMyMessage: message.senderUuid === currentUserUuid,\n            createdAt: message.createdAt,\n        };\n    }\n    async getUnreadMessageCount(roomUuid, userUuid, roomType) {\n        if (roomType === chat_enum_1.ChatRoomType.DIRECT) {\n            return await this.chatMessageRepository.count({\n                where: {\n                    roomUuid,\n                    senderUuid: { $ne: userUuid },\n                    isRead: false,\n                },\n            });\n        }\n        else {\n            const messages = await this.chatMessageRepository.find({\n                where: { roomUuid },\n                select: ['id', 'senderUuid', 'readByUuids'],\n            });\n            return messages.filter((message) => message.senderUuid !== userUuid &&\n                !message.readByUuids.includes(userUuid)).length;\n        }\n    }\n    async generateRoomName(participantUuids, currentUserUuid) {\n        const otherUuids = participantUuids.filter((uuid) => uuid !== currentUserUuid);\n        const users = await this.userRepository.find({\n            where: { userUuid: (0, typeorm_2.In)(otherUuids) },\n            select: ['nickname'],\n        });\n        return users.map((user) => user.nickname).join(', ');\n    }\n    async joinChatRoom(userUuid, roomUuid) {\n        const chatRoom = await this.chatRoomRepository.findOne({\n            where: { roomUuid, isActive: true },\n        });\n        if (!chatRoom) {\n            throw new common_1.NotFoundException('존재하지 않는 채팅방입니다.');\n        }\n        if (chatRoom.participantUuids.includes(userUuid)) {\n            const roomResponse = await this.formatChatRoomResponse(chatRoom, userUuid);\n            return {\n                success: true,\n                message: '이미 참여 중인 채팅방입니다.',\n                chatRoom: roomResponse,\n            };\n        }\n        if (chatRoom.type === chat_enum_1.ChatRoomType.DIRECT) {\n            throw new common_1.ForbiddenException('1대1 채팅방에는 추가로 입장할 수 없습니다.');\n        }\n        if (chatRoom.challengeUuid) {\n        }\n        chatRoom.participantUuids.push(userUuid);\n        await this.chatRoomRepository.save(chatRoom);\n        const user = await this.userRepository.findOne({ where: { userUuid } });\n        const systemMessage = this.chatMessageRepository.create({\n            roomUuid: chatRoom.roomUuid,\n            senderUuid: 'system',\n            type: chat_enum_1.MessageType.SYSTEM,\n            content: `${user?.nickname || '사용자'}님이 채팅방에 입장했습니다.`,\n            isRead: false,\n            readByUuids: [],\n        });\n        await this.chatMessageRepository.save(systemMessage);\n        this.logger.info('채팅방 입장 완료', { roomUuid, userUuid });\n        const roomResponse = await this.formatChatRoomResponse(chatRoom, userUuid);\n        return {\n            success: true,\n            message: '채팅방에 입장했습니다.',\n            chatRoom: roomResponse,\n        };\n    }\n};\nexports.ChatService = ChatService;\nexports.ChatService = ChatService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(chat_room_entity_1.ChatRoom)),\n    __param(1, (0, typeorm_1.InjectRepository)(chat_message_entity_1.ChatMessage)),\n    __param(2, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __param(3, (0, typeorm_1.InjectRepository)(friendship_entity_1.Friendship)),\n    __param(4, (0, typeorm_1.InjectRepository)(challenge_entity_1.Challenge)),\n    __param(5, (0, common_1.Inject)('winston')),\n    __metadata(\"design:paramtypes\", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        winston_1.Logger])\n], ChatService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/chat.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/chat/decorators/chat.swagger.ts':
      /*!*****************************************************!*\
  !*** ./src/modules/chat/decorators/chat.swagger.ts ***!
  \*****************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiFindOrCreateDirectRoom = ApiFindOrCreateDirectRoom;\nexports.ApiCreateChatRoom = ApiCreateChatRoom;\nexports.ApiGetChatRooms = ApiGetChatRooms;\nexports.ApiGetChatRoom = ApiGetChatRoom;\nexports.ApiLeaveChatRoom = ApiLeaveChatRoom;\nexports.ApiSendMessage = ApiSendMessage;\nexports.ApiGetMessages = ApiGetMessages;\nexports.ApiMarkMessagesAsRead = ApiMarkMessagesAsRead;\nexports.ApiDeleteMessage = ApiDeleteMessage;\nexports.ApiJoinChatRoom = ApiJoinChatRoom;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nfunction ApiFindOrCreateDirectRoom() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '1대1 채팅방 찾기 또는 생성',\n        description: '대상 사용자와의 1대1 채팅방이 존재하면 해당 채팅방을 반환하고, 없으면 새로 생성합니다. 친구 관계인 경우에만 생성 가능합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'targetUserUuid',\n        description: '대상 사용자 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '1대1 채팅방 조회/생성 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                roomUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                type: {\n                    type: 'string',\n                    enum: ['DIRECT'],\n                    example: 'DIRECT',\n                },\n                name: {\n                    type: 'string',\n                    example: '운동러버',\n                },\n                participants: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            userUuid: {\n                                type: 'string',\n                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                            },\n                            nickname: { type: 'string', example: '운동러버' },\n                            profileImage: {\n                                type: 'string',\n                                example: 'https://example.com/profile.jpg',\n                            },\n                        },\n                    },\n                },\n                challengeUuid: {\n                    type: 'string',\n                    example: null,\n                },\n                lastMessage: {\n                    type: 'object',\n                    example: null,\n                },\n                lastMessageAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: null,\n                },\n                unreadCount: {\n                    type: 'number',\n                    example: 0,\n                },\n                isNewRoom: {\n                    type: 'boolean',\n                    example: true,\n                    description: '새로 생성된 채팅방인지 여부',\n                },\n                createdAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 400,\n        description: '잘못된 요청 (존재하지 않는 사용자 등)',\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '친구가 아닌 사용자와는 채팅할 수 없습니다',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '대상 사용자를 찾을 수 없습니다',\n    }));\n}\nfunction ApiCreateChatRoom() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '채팅방 생성',\n        description: '1대1 또는 그룹 채팅방을 생성합니다. 친구와의 1대1 채팅만 생성 가능합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            required: ['type', 'participantUuids'],\n            properties: {\n                type: {\n                    type: 'string',\n                    enum: ['DIRECT', 'GROUP'],\n                    description: '채팅방 타입',\n                    example: 'DIRECT',\n                },\n                participantUuids: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    description: '참여자 UUID 배열 (1대1: 1개, 그룹: 여러개)',\n                    example: ['01HZQK5J8X2M3N4P5Q6R7S8T9V'],\n                    minItems: 1,\n                    maxItems: 50,\n                },\n                name: {\n                    type: 'string',\n                    description: '채팅방 이름 (그룹 채팅방인 경우)',\n                    example: '30일 헬스 챌린지 채팅방',\n                    maxLength: 50,\n                },\n                challengeUuid: {\n                    type: 'string',\n                    description: '챌린지 UUID (챌린지 그룹 채팅인 경우)',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '채팅방이 성공적으로 생성됨',\n        schema: {\n            type: 'object',\n            properties: {\n                roomUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                type: {\n                    type: 'string',\n                    enum: ['DIRECT', 'GROUP'],\n                    example: 'DIRECT',\n                },\n                name: {\n                    type: 'string',\n                    example: '운동러버, 헬스마니아',\n                },\n                participantUuids: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    example: [\n                        '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        '01HZQK5J8X2M3N4P5Q6R7S8T9W',\n                    ],\n                },\n                challengeUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                lastMessage: {\n                    type: 'object',\n                    example: null,\n                },\n                lastMessageAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: null,\n                },\n                unreadCount: {\n                    type: 'number',\n                    example: 0,\n                },\n                createdAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 400,\n        description: '잘못된 요청 (친구가 아닌 사용자와 채팅방 생성 시도 등)',\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 409,\n        description: '이미 존재하는 채팅방',\n    }));\n}\nfunction ApiGetChatRooms() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '채팅방 목록 조회',\n        description: '사용자가 참여 중인 채팅방 목록을 조회합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiQuery)({\n        name: 'type',\n        required: false,\n        description: '채팅방 타입 필터',\n        enum: ['DIRECT', 'GROUP'],\n        example: 'DIRECT',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지당 항목 수 (기본값: 20)',\n        example: 20,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '채팅방 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                chatRooms: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            roomUuid: {\n                                type: 'string',\n                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                            },\n                            type: {\n                                type: 'string',\n                                enum: ['DIRECT', 'GROUP'],\n                                example: 'DIRECT',\n                            },\n                            name: { type: 'string', example: '운동러버, 헬스마니아' },\n                            participants: {\n                                type: 'array',\n                                items: {\n                                    type: 'object',\n                                    properties: {\n                                        userUuid: {\n                                            type: 'string',\n                                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                        },\n                                        nickname: { type: 'string', example: '운동러버' },\n                                        profileImage: {\n                                            type: 'string',\n                                            example: 'https://example.com/profile.jpg',\n                                        },\n                                        isOnline: { type: 'boolean', example: true },\n                                        lastSeenAt: {\n                                            type: 'string',\n                                            format: 'date-time',\n                                            example: '2025-06-22T12:00:00Z',\n                                        },\n                                    },\n                                },\n                            },\n                            challenge: {\n                                type: 'object',\n                                properties: {\n                                    challengeUuid: {\n                                        type: 'string',\n                                        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                    },\n                                    title: { type: 'string', example: '30일 헬스 챌린지' },\n                                },\n                            },\n                            lastMessage: {\n                                type: 'object',\n                                properties: {\n                                    id: { type: 'number', example: 123 },\n                                    content: {\n                                        type: 'string',\n                                        example: '오늘도 운동 완료! 💪',\n                                    },\n                                    type: {\n                                        type: 'string',\n                                        enum: ['TEXT', 'IMAGE', 'SYSTEM'],\n                                        example: 'TEXT',\n                                    },\n                                    sender: {\n                                        type: 'object',\n                                        properties: {\n                                            userUuid: {\n                                                type: 'string',\n                                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                            },\n                                            nickname: { type: 'string', example: '운동러버' },\n                                        },\n                                    },\n                                    sentAt: {\n                                        type: 'string',\n                                        format: 'date-time',\n                                        example: '2025-06-22T12:00:00Z',\n                                    },\n                                },\n                            },\n                            unreadCount: { type: 'number', example: 3 },\n                            isPinned: { type: 'boolean', example: false },\n                            isMuted: { type: 'boolean', example: false },\n                            createdAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                            updatedAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:30:00Z',\n                            },\n                            requesterUuid: {\n                                type: 'string',\n                                description: '요청자(현재 사용자) UUID',\n                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                            },\n                        },\n                    },\n                },\n                pagination: {\n                    type: 'object',\n                    properties: {\n                        currentPage: { type: 'number', example: 1 },\n                        totalPages: { type: 'number', example: 3 },\n                        totalItems: { type: 'number', example: 45 },\n                        itemsPerPage: { type: 'number', example: 20 },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }));\n}\nfunction ApiGetChatRoom() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '채팅방 상세 조회',\n        description: '특정 채팅방의 상세 정보를 조회합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'roomUuid',\n        description: '채팅방 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '채팅방 상세 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                roomUuid: { type: 'string', example: '01HZQK5J8X2M3N4P5Q6R7S8T9V' },\n                type: {\n                    type: 'string',\n                    enum: ['DIRECT', 'GROUP'],\n                    example: 'DIRECT',\n                },\n                name: { type: 'string', example: '운동러버, 헬스마니아' },\n                participants: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            userUuid: {\n                                type: 'string',\n                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                            },\n                            nickname: { type: 'string', example: '운동러버' },\n                            profileImage: {\n                                type: 'string',\n                                example: 'https://example.com/profile.jpg',\n                            },\n                            isOnline: { type: 'boolean', example: true },\n                            lastSeenAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                            joinedAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                        },\n                    },\n                },\n                challenge: {\n                    type: 'object',\n                    properties: {\n                        challengeUuid: {\n                            type: 'string',\n                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        },\n                        title: { type: 'string', example: '30일 헬스 챌린지' },\n                        isActive: { type: 'boolean', example: true },\n                    },\n                },\n                myRole: {\n                    type: 'string',\n                    enum: ['PARTICIPANT', 'ADMIN'],\n                    example: 'PARTICIPANT',\n                },\n                settings: {\n                    type: 'object',\n                    properties: {\n                        isPinned: { type: 'boolean', example: false },\n                        isMuted: { type: 'boolean', example: false },\n                        notificationEnabled: { type: 'boolean', example: true },\n                    },\n                },\n                createdAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n                updatedAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:30:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '채팅방 접근 권한 없음',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '채팅방을 찾을 수 없음',\n    }));\n}\nfunction ApiLeaveChatRoom() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '채팅방 나가기',\n        description: '채팅방에서 나갑니다. 1대1 채팅방은 나갈 수 없습니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'roomUuid',\n        description: '채팅방 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '채팅방 나가기 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '채팅방에서 나갔습니다.',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 400,\n        description: '1대1 채팅방은 나갈 수 없음',\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '채팅방 접근 권한 없음',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '채팅방을 찾을 수 없음',\n    }));\n}\nfunction ApiSendMessage() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '메시지 전송',\n        description: '채팅방에 메시지를 전송합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'roomUuid',\n        description: '채팅방 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            required: ['content', 'type'],\n            properties: {\n                content: {\n                    type: 'string',\n                    description: '메시지 내용',\n                    example: '오늘도 운동 완료! 💪',\n                    maxLength: 1000,\n                },\n                type: {\n                    type: 'string',\n                    enum: ['TEXT', 'IMAGE'],\n                    description: '메시지 타입',\n                    example: 'TEXT',\n                },\n                imageUrl: {\n                    type: 'string',\n                    description: '이미지 URL (타입이 IMAGE인 경우)',\n                    example: 'https://soapft-bucket.s3.amazonaws.com/images/workout.jpg',\n                },\n                replyToMessageId: {\n                    type: 'number',\n                    description: '답장할 메시지 ID',\n                    example: 123,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '메시지 전송 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                id: {\n                    type: 'number',\n                    example: 456,\n                },\n                roomUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                content: {\n                    type: 'string',\n                    example: '오늘도 운동 완료! 💪',\n                },\n                type: {\n                    type: 'string',\n                    enum: ['TEXT', 'IMAGE'],\n                    example: 'TEXT',\n                },\n                imageUrl: {\n                    type: 'string',\n                    example: 'https://soapft-bucket.s3.amazonaws.com/images/workout.jpg',\n                },\n                sender: {\n                    type: 'object',\n                    properties: {\n                        userUuid: {\n                            type: 'string',\n                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        },\n                        nickname: { type: 'string', example: '운동러버' },\n                        profileImage: {\n                            type: 'string',\n                            example: 'https://example.com/profile.jpg',\n                        },\n                    },\n                },\n                replyTo: {\n                    type: 'object',\n                    properties: {\n                        messageId: { type: 'number', example: 123 },\n                        content: { type: 'string', example: '오늘 운동 어떠셨나요?' },\n                        sender: {\n                            type: 'object',\n                            properties: {\n                                userUuid: {\n                                    type: 'string',\n                                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9W',\n                                },\n                                nickname: { type: 'string', example: '헬스마니아' },\n                            },\n                        },\n                    },\n                },\n                readByUuids: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    example: ['01HZQK5J8X2M3N4P5Q6R7S8T9V'],\n                },\n                sentAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('CHAT_002', '채팅방 참여 권한이 없습니다.', 403)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('CHAT_001', '채팅방을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('CHAT_003', '메시지 내용은 필수입니다.', 400)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('CHAT_007', '메시지 전송에 실패했습니다.', 500)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('CHAT_009', '친구가 아닌 사용자와는 채팅할 수 없습니다.', 403)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetMessages() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '메시지 목록 조회',\n        description: '채팅방의 메시지 목록을 조회합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'roomUuid',\n        description: '채팅방 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지당 메시지 수 (기본값: 50)',\n        example: 50,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'lastMessageId',\n        required: false,\n        description: '마지막 메시지 ID (이전 메시지 로드용)',\n        example: 1234,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '메시지 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                messages: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            id: { type: 'number', example: 456 },\n                            content: { type: 'string', example: '오늘도 운동 완료! 💪' },\n                            type: {\n                                type: 'string',\n                                enum: ['TEXT', 'IMAGE', 'SYSTEM'],\n                                example: 'TEXT',\n                            },\n                            imageUrl: {\n                                type: 'string',\n                                example: 'https://example.com/image.jpg',\n                            },\n                            sender: {\n                                type: 'object',\n                                properties: {\n                                    userUuid: {\n                                        type: 'string',\n                                        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                    },\n                                    nickname: { type: 'string', example: '운동러버' },\n                                    profileImage: {\n                                        type: 'string',\n                                        example: 'https://example.com/profile.jpg',\n                                    },\n                                },\n                            },\n                            replyTo: {\n                                type: 'object',\n                                properties: {\n                                    messageId: { type: 'number', example: 123 },\n                                    content: {\n                                        type: 'string',\n                                        example: '오늘 운동 어떠셨나요?',\n                                    },\n                                    sender: {\n                                        type: 'object',\n                                        properties: {\n                                            userUuid: {\n                                                type: 'string',\n                                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9W',\n                                            },\n                                            nickname: { type: 'string', example: '헬스마니아' },\n                                        },\n                                    },\n                                },\n                            },\n                            readByUuids: {\n                                type: 'array',\n                                items: { type: 'string' },\n                                example: [\n                                    '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                    '01HZQK5J8X2M3N4P5Q6R7S8T9W',\n                                ],\n                            },\n                            isEdited: { type: 'boolean', example: false },\n                            isDeleted: { type: 'boolean', example: false },\n                            sentAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                            editedAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: null,\n                            },\n                        },\n                    },\n                },\n                pagination: {\n                    type: 'object',\n                    properties: {\n                        currentPage: { type: 'number', example: 1 },\n                        totalPages: { type: 'number', example: 10 },\n                        totalItems: { type: 'number', example: 500 },\n                        itemsPerPage: { type: 'number', example: 50 },\n                        hasNext: { type: 'boolean', example: true },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '채팅방 접근 권한 없음',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '채팅방을 찾을 수 없음',\n    }));\n}\nfunction ApiMarkMessagesAsRead() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '메시지 읽음 처리',\n        description: '채팅방의 메시지들을 읽음으로 표시합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'roomUuid',\n        description: '채팅방 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            properties: {\n                lastReadMessageId: {\n                    type: 'number',\n                    description: '마지막으로 읽은 메시지 ID',\n                    example: 456,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '메시지 읽음 처리 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '메시지를 읽음으로 표시했습니다.',\n                },\n                readCount: {\n                    type: 'number',\n                    example: 15,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '채팅방 접근 권한 없음',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '채팅방을 찾을 수 없음',\n    }));\n}\nfunction ApiDeleteMessage() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '메시지 삭제',\n        description: '본인이 보낸 메시지를 삭제합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'roomUuid',\n        description: '채팅방 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiParam)({\n        name: 'messageId',\n        description: '메시지 ID',\n        example: 456,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '메시지 삭제 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '메시지가 삭제되었습니다.',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '삭제 권한 없음 (본인 메시지가 아님)',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '메시지를 찾을 수 없음',\n    }));\n}\nfunction ApiJoinChatRoom() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '채팅방 입장',\n        description: '채팅방에 입장합니다. roomUuid만 제공하면 됩니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'roomUuid',\n        description: '채팅방 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '채팅방 입장 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                success: {\n                    type: 'boolean',\n                    example: true,\n                },\n                message: {\n                    type: 'string',\n                    example: '채팅방에 입장했습니다.',\n                },\n                chatRoom: {\n                    type: 'object',\n                    properties: {\n                        roomUuid: {\n                            type: 'string',\n                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        },\n                        type: {\n                            type: 'string',\n                            enum: ['DIRECT', 'GROUP'],\n                            example: 'GROUP',\n                        },\n                        name: {\n                            type: 'string',\n                            example: '30일 챌린지 채팅방',\n                        },\n                        participants: {\n                            type: 'array',\n                            items: {\n                                type: 'object',\n                                properties: {\n                                    userUuid: {\n                                        type: 'string',\n                                        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                    },\n                                    nickname: { type: 'string', example: '운동러버' },\n                                    profileImage: {\n                                        type: 'string',\n                                        example: 'https://example.com/profile.jpg',\n                                    },\n                                },\n                            },\n                        },\n                        challengeUuid: {\n                            type: 'string',\n                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        },\n                        lastMessage: {\n                            type: 'object',\n                            example: null,\n                        },\n                        lastMessageAt: {\n                            type: 'string',\n                            format: 'date-time',\n                            example: '2025-06-22T12:00:00Z',\n                        },\n                        unreadCount: {\n                            type: 'number',\n                            example: 0,\n                        },\n                        createdAt: {\n                            type: 'string',\n                            format: 'date-time',\n                            example: '2025-06-22T12:00:00Z',\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 400,\n        description: '이미 참여 중인 채팅방',\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: '채팅방 입장 권한 없음',\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '채팅방을 찾을 수 없음',\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/decorators/chat.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/chat/dto/create-chat-room.dto.ts':
      /*!******************************************************!*\
  !*** ./src/modules/chat/dto/create-chat-room.dto.ts ***!
  \******************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CreateChatRoomDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst chat_enum_1 = __webpack_require__(/*! @/types/chat.enum */ "./src/types/chat.enum.ts");\nclass CreateChatRoomDto {\n}\nexports.CreateChatRoomDto = CreateChatRoomDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'채팅방 타입\',\n        enum: chat_enum_1.ChatRoomType,\n        example: chat_enum_1.ChatRoomType.DIRECT,\n    }),\n    (0, class_validator_1.IsEnum)(chat_enum_1.ChatRoomType),\n    __metadata("design:type", String)\n], CreateChatRoomDto.prototype, "type", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'참여자 UUID 배열 (1대1: 1개, 그룹: 여러개)\',\n        type: [String],\n        example: [\'01HZQK5J8X2M3N4P5Q6R7S8T9V\'],\n        minItems: 1,\n        maxItems: 50,\n    }),\n    (0, class_validator_1.IsArray)(),\n    (0, class_validator_1.ArrayMinSize)(1),\n    (0, class_validator_1.ArrayMaxSize)(50),\n    (0, class_validator_1.IsString)({ each: true }),\n    __metadata("design:type", Array)\n], CreateChatRoomDto.prototype, "participantUuids", void 0);\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'채팅방 이름 (그룹 채팅방인 경우)\',\n        example: \'30일 헬스 챌린지 채팅방\',\n        maxLength: 50,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.MaxLength)(50),\n    __metadata("design:type", String)\n], CreateChatRoomDto.prototype, "name", void 0);\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'챌린지 UUID (챌린지 그룹 채팅인 경우)\',\n        example: \'01HZQK5J8X2M3N4P5Q6R7S8T9V\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateChatRoomDto.prototype, "challengeUuid", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/dto/create-chat-room.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/chat/dto/get-chat-rooms.dto.ts':
      /*!****************************************************!*\
  !*** ./src/modules/chat/dto/get-chat-rooms.dto.ts ***!
  \****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.GetChatRoomsDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst chat_enum_1 = __webpack_require__(/*! @/types/chat.enum */ "./src/types/chat.enum.ts");\nconst class_transformer_1 = __webpack_require__(/*! class-transformer */ "class-transformer");\nclass GetChatRoomsDto {\n    constructor() {\n        this.page = 1;\n        this.limit = 20;\n    }\n}\nexports.GetChatRoomsDto = GetChatRoomsDto;\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'채팅방 타입 필터\',\n        enum: chat_enum_1.ChatRoomType,\n        example: chat_enum_1.ChatRoomType.DIRECT,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(chat_enum_1.ChatRoomType),\n    __metadata("design:type", String)\n], GetChatRoomsDto.prototype, "type", void 0);\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'페이지 번호 (기본값: 1)\',\n        example: 1,\n        minimum: 1,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_transformer_1.Transform)(({ value }) => parseInt(value)),\n    (0, class_validator_1.Min)(1),\n    __metadata("design:type", Number)\n], GetChatRoomsDto.prototype, "page", void 0);\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'페이지당 항목 수 (기본값: 20, 최대: 50)\',\n        example: 20,\n        minimum: 1,\n        maximum: 50,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_transformer_1.Transform)(({ value }) => parseInt(value)),\n    (0, class_validator_1.Min)(1),\n    (0, class_validator_1.Max)(50),\n    __metadata("design:type", Number)\n], GetChatRoomsDto.prototype, "limit", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/dto/get-chat-rooms.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/chat/dto/get-messages.dto.ts':
      /*!**************************************************!*\
  !*** ./src/modules/chat/dto/get-messages.dto.ts ***!
  \**************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.GetMessagesDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst class_transformer_1 = __webpack_require__(/*! class-transformer */ "class-transformer");\nclass GetMessagesDto {\n    constructor() {\n        this.page = 1;\n        this.limit = 50;\n    }\n}\nexports.GetMessagesDto = GetMessagesDto;\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'페이지 번호 (기본값: 1)\',\n        example: 1,\n        minimum: 1,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_transformer_1.Transform)(({ value }) => parseInt(value)),\n    (0, class_validator_1.Min)(1),\n    __metadata("design:type", Number)\n], GetMessagesDto.prototype, "page", void 0);\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'페이지당 메시지 수 (기본값: 50, 최대: 100)\',\n        example: 50,\n        minimum: 1,\n        maximum: 100,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_transformer_1.Transform)(({ value }) => parseInt(value)),\n    (0, class_validator_1.Min)(1),\n    (0, class_validator_1.Max)(100),\n    __metadata("design:type", Number)\n], GetMessagesDto.prototype, "limit", void 0);\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'마지막 메시지 ID (이전 메시지 로드용)\',\n        example: 12345,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_transformer_1.Transform)(({ value }) => parseInt(value)),\n    (0, class_validator_1.Min)(1),\n    __metadata("design:type", Number)\n], GetMessagesDto.prototype, "lastMessageId", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/dto/get-messages.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/chat/dto/send-message.dto.ts':
      /*!**************************************************!*\
  !*** ./src/modules/chat/dto/send-message.dto.ts ***!
  \**************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SendMessageDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst chat_enum_1 = __webpack_require__(/*! @/types/chat.enum */ "./src/types/chat.enum.ts");\nclass SendMessageDto {\n}\nexports.SendMessageDto = SendMessageDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'메시지 타입\',\n        enum: chat_enum_1.MessageType,\n        example: chat_enum_1.MessageType.TEXT,\n    }),\n    (0, class_validator_1.IsEnum)(chat_enum_1.MessageType),\n    __metadata("design:type", String)\n], SendMessageDto.prototype, "type", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'메시지 내용\',\n        example: \'안녕하세요! 오늘 운동 어떠셨나요?\',\n        maxLength: 1000,\n    }),\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.MaxLength)(1000),\n    __metadata("design:type", String)\n], SendMessageDto.prototype, "content", void 0);\n__decorate([\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'첨부 이미지 URL (이미지 메시지인 경우)\',\n        example: \'https://soapft-bucket.s3.amazonaws.com/images/chat-image.jpg\',\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendMessageDto.prototype, "imageUrl", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/chat/dto/send-message.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/comments/comments.controller.ts':
      /*!*****************************************************!*\
  !*** ./src/modules/comments/comments.controller.ts ***!
  \*****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CommentsController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst comments_swagger_1 = __webpack_require__(/*! ./decorators/comments.swagger */ "./src/modules/comments/decorators/comments.swagger.ts");\nconst comments_service_1 = __webpack_require__(/*! ./comments.service */ "./src/modules/comments/comments.service.ts");\nconst create_comment_dto_1 = __webpack_require__(/*! ./dto/create-comment.dto */ "./src/modules/comments/dto/create-comment.dto.ts");\nconst update_comment_dto_1 = __webpack_require__(/*! ./dto/update-comment.dto */ "./src/modules/comments/dto/update-comment.dto.ts");\nconst find_all_comments_dto_1 = __webpack_require__(/*! ./dto/find-all-comments.dto */ "./src/modules/comments/dto/find-all-comments.dto.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nlet CommentsController = class CommentsController {\n    constructor(commentsService) {\n        this.commentsService = commentsService;\n    }\n    async createComment(createCommentDto, userUuid) {\n        return await this.commentsService.createComment(createCommentDto, userUuid);\n    }\n    async findAllComments(postUuid, findAllCommentsDto, userUuid) {\n        return await this.commentsService.findAllComments(postUuid, findAllCommentsDto.page, findAllCommentsDto.limit, userUuid);\n    }\n    async updateComment(commentId, updateCommentDto, userUuid) {\n        return await this.commentsService.updateComment(+commentId, updateCommentDto, userUuid);\n    }\n    async removeComment(commentId, userUuid) {\n        return await this.commentsService.removeComment(commentId, userUuid);\n    }\n};\nexports.CommentsController = CommentsController;\n__decorate([\n    (0, common_1.Post)(),\n    (0, comments_swagger_1.ApiCreateComment)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [create_comment_dto_1.CreateCommentDto, String]),\n    __metadata("design:returntype", Promise)\n], CommentsController.prototype, "createComment", null);\n__decorate([\n    (0, common_1.Get)(\'post/:postUuid\'),\n    (0, comments_swagger_1.ApiGetAllComments)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, common_1.Query)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, find_all_comments_dto_1.FindAllCommentsDto, String]),\n    __metadata("design:returntype", Promise)\n], CommentsController.prototype, "findAllComments", null);\n__decorate([\n    (0, common_1.Patch)(\':commentId\'),\n    (0, comments_swagger_1.ApiUpdateComment)(),\n    __param(0, (0, common_1.Param)(\'commentId\')),\n    __param(1, (0, common_1.Body)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, update_comment_dto_1.UpdateCommentDto, String]),\n    __metadata("design:returntype", Promise)\n], CommentsController.prototype, "updateComment", null);\n__decorate([\n    (0, common_1.Delete)(\':commentId\'),\n    (0, comments_swagger_1.ApiDeleteComment)(),\n    __param(0, (0, common_1.Param)(\'commentId\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", Promise)\n], CommentsController.prototype, "removeComment", null);\nexports.CommentsController = CommentsController = __decorate([\n    (0, swagger_1.ApiTags)(\'comment\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'comment\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [comments_service_1.CommentsService])\n], CommentsController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/comments/comments.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/comments/comments.module.ts':
      /*!*************************************************!*\
  !*** ./src/modules/comments/comments.module.ts ***!
  \*************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CommentsModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst comments_service_1 = __webpack_require__(/*! ./comments.service */ "./src/modules/comments/comments.service.ts");\nconst comments_controller_1 = __webpack_require__(/*! ./comments.controller */ "./src/modules/comments/comments.controller.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst posts_module_1 = __webpack_require__(/*! @/modules/posts/posts.module */ "./src/modules/posts/posts.module.ts");\nconst comment_entity_1 = __webpack_require__(/*! @/entities/comment.entity */ "./src/entities/comment.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ "./src/entities/post.entity.ts");\nconst users_module_1 = __webpack_require__(/*! ../users/users.module */ "./src/modules/users/users.module.ts");\nlet CommentsModule = class CommentsModule {\n};\nexports.CommentsModule = CommentsModule;\nexports.CommentsModule = CommentsModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([comment_entity_1.Comment, user_entity_1.User, post_entity_1.Post]),\n            (0, common_1.forwardRef)(() => posts_module_1.PostsModule),\n            (0, common_1.forwardRef)(() => users_module_1.UsersModule),\n            (0, common_1.forwardRef)(() => posts_module_1.PostsModule),\n        ],\n        controllers: [comments_controller_1.CommentsController],\n        providers: [comments_service_1.CommentsService],\n        exports: [comments_service_1.CommentsService],\n    })\n], CommentsModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/comments/comments.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/comments/comments.service.ts':
      /*!**************************************************!*\
  !*** ./src/modules/comments/comments.service.ts ***!
  \**************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CommentsService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");\nconst comment_entity_1 = __webpack_require__(/*! @/entities/comment.entity */ "./src/entities/comment.entity.ts");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ "./src/entities/post.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst users_service_1 = __webpack_require__(/*! ../users/users.service */ "./src/modules/users/users.service.ts");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ "./src/utils/custom-exception.ts");\nconst error_code_enum_1 = __webpack_require__(/*! @/types/error-code.enum */ "./src/types/error-code.enum.ts");\nlet CommentsService = class CommentsService {\n    constructor(commentRepository, postRepository, userRepository, userService) {\n        this.commentRepository = commentRepository;\n        this.postRepository = postRepository;\n        this.userRepository = userRepository;\n        this.userService = userService;\n    }\n    async createComment(createCommentDto, userUuid) {\n        const { postUuid, content, parentCommentId } = createCommentDto;\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n        });\n        if (!post) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_NOT_FOUND, \'댓글을 작성할 인증글을 찾을 수 없습니다.\');\n        }\n        let parentComment = null;\n        if (parentCommentId) {\n            parentComment = await this.commentRepository.findOne({\n                where: { id: parentCommentId },\n            });\n            if (!parentComment) {\n                custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.COMMENT_NOT_FOUND, \'부모 댓글을 찾을 수 없습니다.\');\n            }\n        }\n        const newComment = this.commentRepository.create({\n            userUuid,\n            postUuid,\n            content,\n            parentCommentId: parentCommentId || null,\n            mentionedUsers: [],\n        });\n        const savedComment = await this.commentRepository.save(newComment);\n        return {\n            message: \'댓글이 성공적으로 생성되었습니다.\',\n            comment: savedComment,\n        };\n    }\n    async findAllComments(postUuid, page, limit, userUuid) {\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n        });\n        if (!post) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_NOT_FOUND, \'댓글을 작성할 인증글을 찾을 수 없습니다.\');\n        }\n        const [comments, total] = await this.commentRepository.findAndCount({\n            where: { postUuid },\n            order: { createdAt: \'ASC\' },\n            skip: (page - 1) * limit,\n            take: limit,\n        });\n        const userUuids = comments.map((c) => c.userUuid);\n        const users = await this.userRepository.find({\n            where: { userUuid: (0, typeorm_2.In)(userUuids) },\n            select: [\'userUuid\', \'nickname\', \'profileImage\'],\n        });\n        const userMap = new Map(users.map((u) => [u.userUuid, u]));\n        const commentsWithUser = comments.map((comment) => ({\n            ...comment,\n            user: userMap.get(comment.userUuid) || null,\n            isMyComment: comment.userUuid === userUuid,\n            children: [],\n        }));\n        const commentMap = new Map();\n        const rootComments = [];\n        commentsWithUser.forEach((comment) => {\n            commentMap.set(comment.id, comment);\n        });\n        commentsWithUser.forEach((comment) => {\n            if (comment.parentCommentId) {\n                const parent = commentMap.get(comment.parentCommentId);\n                if (parent) {\n                    parent.children.push(comment);\n                }\n            }\n            else {\n                rootComments.push(comment);\n            }\n        });\n        return {\n            message: \'댓글 목록 조회 성공\',\n            total,\n            page,\n            limit,\n            comments: rootComments,\n        };\n    }\n    async updateComment(commentId, updateCommentDto, userUuid) {\n        const comment = await this.commentRepository.findOne({\n            where: { id: commentId },\n        });\n        if (!comment) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.COMMENT_NOT_FOUND, \'존재하지 않는 댓글입니다.\');\n        }\n        if (comment.userUuid !== userUuid) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.COMMENT_ACCESS_DENIED, \'댓글 수정 권한이 없습니다.\');\n        }\n        comment.content = updateCommentDto.content;\n        comment.updatedAt = new Date();\n        const updatedComment = await this.commentRepository.save(comment);\n        return {\n            message: \'댓글이 성공적으로 수정되었습니다.\',\n            comment: updatedComment,\n        };\n    }\n    async removeComment(commentId, userUuid) {\n        const comment = await this.commentRepository.findOne({\n            where: { id: commentId },\n        });\n        if (!comment) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.COMMENT_NOT_FOUND, \'존재하지 않는 댓글입니다.\');\n        }\n        if (comment.userUuid !== userUuid) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.COMMENT_ACCESS_DENIED, \'댓글 삭제 권한이 없습니다.\');\n        }\n        await this.commentRepository.delete(commentId);\n        return {\n            message: \'댓글이 성공적으로 삭제되었습니다.\',\n        };\n    }\n};\nexports.CommentsService = CommentsService;\nexports.CommentsService = CommentsService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(comment_entity_1.Comment)),\n    __param(1, (0, typeorm_1.InjectRepository)(post_entity_1.Post)),\n    __param(2, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __metadata("design:paramtypes", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        users_service_1.UsersService])\n], CommentsService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/comments/comments.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/comments/decorators/comments.swagger.ts':
      /*!*************************************************************!*\
  !*** ./src/modules/comments/decorators/comments.swagger.ts ***!
  \*************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiCreateComment = ApiCreateComment;\nexports.ApiGetAllComments = ApiGetAllComments;\nexports.ApiUpdateComment = ApiUpdateComment;\nexports.ApiDeleteComment = ApiDeleteComment;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nconst create_comment_dto_1 = __webpack_require__(/*! ../dto/create-comment.dto */ \"./src/modules/comments/dto/create-comment.dto.ts\");\nconst update_comment_dto_1 = __webpack_require__(/*! ../dto/update-comment.dto */ \"./src/modules/comments/dto/update-comment.dto.ts\");\nfunction ApiCreateComment() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '댓글 생성',\n        description: '게시글에 댓글을 작성합니다. parentCommentId가 있으면 대댓글로 등록됩니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiBody)({ type: create_comment_dto_1.CreateCommentDto }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '댓글 생성 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '댓글이 성공적으로 생성되었습니다.',\n                },\n                comment: {\n                    type: 'object',\n                    properties: {\n                        id: { type: 'number', example: 1 },\n                        postUuid: {\n                            type: 'string',\n                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        },\n                        userUuid: {\n                            type: 'string',\n                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        },\n                        content: {\n                            type: 'string',\n                            example: '댓글 내용입니다.',\n                        },\n                        parentCommentId: {\n                            type: 'number',\n                            example: 5,\n                            nullable: true,\n                        },\n                        mentionedUsers: {\n                            type: 'array',\n                            items: { type: 'string' },\n                            example: ['nickname1', 'nickname2'],\n                        },\n                        createdAt: {\n                            type: 'string',\n                            format: 'date-time',\n                            example: '2025-07-04T12:00:00Z',\n                        },\n                        updatedAt: {\n                            type: 'string',\n                            format: 'date-time',\n                            example: '2025-07-04T12:00:00Z',\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('COMMENT_008', '댓글을 작성할 인증글을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('COMMENT_006', '부모 댓글을 찾을 수 없습니다.', 404)));\n}\nfunction ApiGetAllComments() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '게시글 댓글 목록 조회',\n        description: '특정 게시글의 댓글 목록을 조회합니다. 댓글은 대댓글 트리 구조로 반환됩니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        description: '게시글 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        type: Number,\n        description: '페이지 번호 (기본값: 1)',\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        type: Number,\n        description: '페이지당 항목 수 (기본값: 10)',\n        example: 10,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '댓글 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '댓글 목록 조회 성공' },\n                total: { type: 'number', example: 5 },\n                page: { type: 'number', example: 1 },\n                limit: { type: 'number', example: 10 },\n                comments: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            id: { type: 'number', example: 1 },\n                            postUuid: { type: 'string', example: '01HZQ...' },\n                            userUuid: { type: 'string', example: '01HZQ...' },\n                            content: { type: 'string', example: '댓글 내용입니다.' },\n                            parentCommentId: {\n                                type: 'number',\n                                example: null,\n                                nullable: true,\n                            },\n                            mentionedUsers: {\n                                type: 'array',\n                                items: { type: 'string' },\n                                example: [],\n                            },\n                            createdAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-07-04T12:00:00Z',\n                            },\n                            updatedAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-07-04T12:00:00Z',\n                            },\n                            isMyComment: {\n                                type: 'boolean',\n                                example: true,\n                                description: '현재 로그인한 사용자가 작성한 댓글 여부',\n                            },\n                            user: {\n                                type: 'object',\n                                properties: {\n                                    userUuid: { type: 'string', example: '01HZQ...' },\n                                    nickname: { type: 'string', example: '홍길동' },\n                                    profileImage: {\n                                        type: 'string',\n                                        example: 'https://example.com/profile.jpg',\n                                    },\n                                },\n                            },\n                            children: {\n                                type: 'array',\n                                items: { type: 'object' },\n                                example: [],\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('POST_001', '존재하지 않는 인증글입니다.', 404)));\n}\nfunction ApiUpdateComment() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '댓글 수정',\n        description: '댓글 내용을 수정합니다. 본인 댓글만 수정할 수 있습니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'commentId',\n        description: '댓글 ID',\n        example: 1,\n    }), (0, swagger_1.ApiBody)({\n        type: update_comment_dto_1.UpdateCommentDto,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '댓글 수정 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '댓글이 성공적으로 수정되었습니다.',\n                },\n                comment: {\n                    type: 'object',\n                    properties: {\n                        id: { type: 'number', example: 1 },\n                        postUuid: { type: 'string', example: '01HZQ...' },\n                        userUuid: { type: 'string', example: '01HZQ...' },\n                        content: { type: 'string', example: '수정된 댓글 내용입니다.' },\n                        parentCommentId: {\n                            type: 'number',\n                            example: null,\n                            nullable: true,\n                        },\n                        mentionedUsers: {\n                            type: 'array',\n                            items: { type: 'string' },\n                            example: [],\n                        },\n                        createdAt: {\n                            type: 'string',\n                            format: 'date-time',\n                            example: '2025-07-04T12:00:00Z',\n                        },\n                        updatedAt: {\n                            type: 'string',\n                            format: 'date-time',\n                            example: '2025-07-04T12:10:00Z',\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('COMMENT_001', '존재하지 않는 댓글입니다.', 404)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('COMMENT_003', '댓글 수정 권한이 없습니다.', 403)));\n}\nfunction ApiDeleteComment() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '댓글 삭제',\n        description: '댓글을 삭제합니다. 본인 댓글만 삭제할 수 있습니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'commentId',\n        description: '댓글 ID',\n        example: 1,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '댓글 삭제 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '댓글이 성공적으로 삭제되었습니다.',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('COMMENT_001', '존재하지 않는 댓글입니다.', 404)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('COMMENT_003', '댓글 삭제 권한이 없습니다.', 403)));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/comments/decorators/comments.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/comments/dto/create-comment.dto.ts':
      /*!********************************************************!*\
  !*** ./src/modules/comments/dto/create-comment.dto.ts ***!
  \********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CreateCommentDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass CreateCommentDto {\n    constructor() {\n        this.createdAt = new Date();\n        this.updatedAt = new Date();\n    }\n}\nexports.CreateCommentDto = CreateCommentDto;\n__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    (0, swagger_1.ApiProperty)({\n        description: \'댓글이 달릴 게시글 UUID\',\n        example: \'01HZQK5J8X2M3N4P5Q6R7S8T9V\',\n    }),\n    __metadata("design:type", String)\n], CreateCommentDto.prototype, "postUuid", void 0);\n__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsNotEmpty)(),\n    (0, swagger_1.ApiProperty)({\n        description: \'댓글 내용\',\n        example: \'댓글 내용입니다.\',\n    }),\n    __metadata("design:type", String)\n], CreateCommentDto.prototype, "content", void 0);\n__decorate([\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.IsOptional)(),\n    (0, swagger_1.ApiPropertyOptional)({\n        description: \'부모 댓글 ID (대댓글인 경우)\',\n        example: null,\n        nullable: true,\n    }),\n    __metadata("design:type", Number)\n], CreateCommentDto.prototype, "parentCommentId", void 0);\n__decorate([\n    (0, class_validator_1.IsDate)(),\n    __metadata("design:type", Date)\n], CreateCommentDto.prototype, "createdAt", void 0);\n__decorate([\n    (0, class_validator_1.IsDate)(),\n    __metadata("design:type", Date)\n], CreateCommentDto.prototype, "updatedAt", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/comments/dto/create-comment.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/comments/dto/find-all-comments.dto.ts':
      /*!***********************************************************!*\
  !*** ./src/modules/comments/dto/find-all-comments.dto.ts ***!
  \***********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.FindAllCommentsDto = void 0;\nconst class_transformer_1 = __webpack_require__(/*! class-transformer */ "class-transformer");\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nclass FindAllCommentsDto {\n    constructor() {\n        this.page = 1;\n        this.limit = 10;\n    }\n}\nexports.FindAllCommentsDto = FindAllCommentsDto;\n__decorate([\n    (0, class_validator_1.IsNumber)(),\n    (0, class_transformer_1.Type)(() => Number),\n    (0, class_validator_1.Min)(1),\n    __metadata("design:type", Number)\n], FindAllCommentsDto.prototype, "page", void 0);\n__decorate([\n    (0, class_validator_1.IsNumber)(),\n    (0, class_transformer_1.Type)(() => Number),\n    (0, class_validator_1.Min)(1),\n    __metadata("design:type", Number)\n], FindAllCommentsDto.prototype, "limit", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/comments/dto/find-all-comments.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/comments/dto/update-comment.dto.ts':
      /*!********************************************************!*\
  !*** ./src/modules/comments/dto/update-comment.dto.ts ***!
  \********************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdateCommentDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst create_comment_dto_1 = __webpack_require__(/*! ./create-comment.dto */ "./src/modules/comments/dto/create-comment.dto.ts");\nclass UpdateCommentDto extends (0, swagger_1.PartialType)((0, swagger_1.OmitType)(create_comment_dto_1.CreateCommentDto, [\'createdAt\', \'postUuid\', \'parentCommentId\'])) {\n}\nexports.UpdateCommentDto = UpdateCommentDto;\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/comments/dto/update-comment.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/friendship/decorators/friendship.swagger.ts':
      /*!*****************************************************************!*\
  !*** ./src/modules/friendship/decorators/friendship.swagger.ts ***!
  \*****************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiSendFriendRequest = ApiSendFriendRequest;\nexports.ApiAcceptFriendRequest = ApiAcceptFriendRequest;\nexports.ApiRejectFriendRequest = ApiRejectFriendRequest;\nexports.ApiRemoveFriend = ApiRemoveFriend;\nexports.ApiGetFriendList = ApiGetFriendList;\nexports.ApiGetReceivedRequests = ApiGetReceivedRequests;\nexports.ApiGetSentRequests = ApiGetSentRequests;\nexports.ApiSearchUsersWithFriendStatus = ApiSearchUsersWithFriendStatus;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst create_friendrequest_dto_1 = __webpack_require__(/*! ../dto/create-friendrequest.dto */ \"./src/modules/friendship/dto/create-friendrequest.dto.ts\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nfunction ApiSendFriendRequest() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '친구 신청',\n        description: '다른 사용자에게 친구 요청을 보냅니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiBody)({ type: create_friendrequest_dto_1.CreateFriendRequestDto }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '친구 요청 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '친구 요청이 전송되었습니다.' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FRIENDSHIP_002', '이미 친구인 사용자입니다.', 409)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FRIENDSHIP_005', '자기 자신에게 친구 요청을 보낼 수 없습니다.', 400)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiAcceptFriendRequest() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '친구 요청 수락',\n        description: '받은 친구 요청을 수락합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '친구 요청 수락 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '친구 요청을 수락했습니다.' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FRIENDSHIP_004', '친구 요청을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiRejectFriendRequest() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '친구 요청 거절',\n        description: '받은 친구 요청을 거절하고 삭제합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '친구 요청 거절 및 삭제 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '친구 요청을 거절했습니다.' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FRIENDSHIP_004', '친구 요청을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiRemoveFriend() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '친구 삭제',\n        description: '친구 관계를 삭제합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '친구 삭제 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '친구가 삭제되었습니다.' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FRIENDSHIP_001', '친구 관계를 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetFriendList() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '친구 목록 조회',\n        description: '사용자의 친구 목록을 조회합니다. 상대방 닉네임과 프로필 이미지 포함.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '친구 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                friends: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            friendId: { type: 'number', example: 1 },\n                            friendUuid: { type: 'string', example: '01HZQ...' },\n                            nickname: { type: 'string', example: '홍길동' },\n                            profileImage: {\n                                type: 'string',\n                                example: 'https://example.com/profile.jpg',\n                            },\n                            status: { type: 'string', example: 'ACCEPTED' },\n                            createdAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-07-04T12:00:00Z',\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetReceivedRequests() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '받은 친구 요청 목록 조회',\n        description: '사용자가 받은 친구 요청 목록을 조회합니다. 요청자 닉네임과 프로필 이미지 포함.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '받은 친구 요청 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                receivedRequests: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            requestId: { type: 'number', example: 1 },\n                            requesterUuid: { type: 'string', example: '01HZQ...' },\n                            nickname: { type: 'string', example: '홍길동' },\n                            profileImage: {\n                                type: 'string',\n                                example: 'https://example.com/profile.jpg',\n                            },\n                            createdAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-07-04T12:00:00Z',\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetSentRequests() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '보낸 친구 요청 목록 조회',\n        description: '사용자가 보낸 친구 요청 목록을 조회합니다. 수신자 닉네임과 프로필 이미지 포함.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '보낸 친구 요청 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                sentRequests: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            requestId: { type: 'number', example: 1 },\n                            addresseeUuid: { type: 'string', example: '01HZQ...' },\n                            nickname: { type: 'string', example: '김영희' },\n                            profileImage: {\n                                type: 'string',\n                                example: 'https://example.com/profile.jpg',\n                            },\n                            createdAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-07-04T12:00:00Z',\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiSearchUsersWithFriendStatus() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자 닉네임 검색 (친구 여부 포함)',\n        description: '닉네임에 특정 키워드가 포함된 전체 사용자 목록을 검색하고, 나와 친구인지 여부도 함께 반환합니다.',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'keyword',\n        required: true,\n        type: String,\n        example: '연희',\n        description: '검색할 닉네임 키워드',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '사용자 검색 성공',\n        schema: {\n            example: {\n                message: '검색 성공',\n                data: [\n                    {\n                        userUuid: '01JYXYZABC123',\n                        nickname: '연희',\n                        profileImage: 'https://cdn.example.com/profile.jpg',\n                        isFriend: true,\n                    },\n                    {\n                        userUuid: '01JYZXCBB234',\n                        nickname: '다정',\n                        profileImage: null,\n                        isFriend: false,\n                    },\n                ],\n            },\n        },\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/friendship/decorators/friendship.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/friendship/dto/create-friendrequest.dto.ts':
      /*!****************************************************************!*\
  !*** ./src/modules/friendship/dto/create-friendrequest.dto.ts ***!
  \****************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CreateFriendRequestDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass CreateFriendRequestDto {\n}\nexports.CreateFriendRequestDto = CreateFriendRequestDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'01HZQK5J8X2M3N4P5Q6R7S8T9V\',\n        description: \'친구 요청을 받을 사용자 UUID\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateFriendRequestDto.prototype, "addresseeUuid", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/friendship/dto/create-friendrequest.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/friendship/friendship.controller.ts':
      /*!*********************************************************!*\
  !*** ./src/modules/friendship/friendship.controller.ts ***!
  \*********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.FriendshipController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst friendship_service_1 = __webpack_require__(/*! ./friendship.service */ "./src/modules/friendship/friendship.service.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst common_2 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst common_3 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst create_friendrequest_dto_1 = __webpack_require__(/*! ./dto/create-friendrequest.dto */ "./src/modules/friendship/dto/create-friendrequest.dto.ts");\nconst friendship_swagger_1 = __webpack_require__(/*! ./decorators/friendship.swagger */ "./src/modules/friendship/decorators/friendship.swagger.ts");\nlet FriendshipController = class FriendshipController {\n    constructor(friendshipService) {\n        this.friendshipService = friendshipService;\n    }\n    async sendFriendRequest(dto, userUuid) {\n        return this.friendshipService.sendFriendRequest(userUuid, dto);\n    }\n    async acceptFriendRequest(friendRequestId, userUuid) {\n        return this.friendshipService.acceptFriendRequest(friendRequestId, userUuid);\n    }\n    async rejectFriendRequest(friendRequestId, userUuid) {\n        return this.friendshipService.rejectFriendRequest(friendRequestId, userUuid);\n    }\n    async removeFriend(friendId, userUuid) {\n        return this.friendshipService.removeFriend(friendId, userUuid);\n    }\n    async getFriendList(userUuid) {\n        return this.friendshipService.getFriendList(userUuid);\n    }\n    async getReceivedRequests(userUuid) {\n        return this.friendshipService.getReceivedRequests(userUuid);\n    }\n    async getSentRequests(userUuid) {\n        return this.friendshipService.getSentRequests(userUuid);\n    }\n    async searchFriends(userUuid, keyword) {\n        return this.friendshipService.searchUsersWithFriendStatus(userUuid, keyword);\n    }\n};\nexports.FriendshipController = FriendshipController;\n__decorate([\n    (0, common_3.Post)(\'request\'),\n    (0, friendship_swagger_1.ApiSendFriendRequest)(),\n    __param(0, (0, common_3.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [create_friendrequest_dto_1.CreateFriendRequestDto, String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "sendFriendRequest", null);\n__decorate([\n    (0, common_3.Post)(\'accept/:friendRequestId\'),\n    (0, friendship_swagger_1.ApiAcceptFriendRequest)(),\n    __param(0, (0, common_3.Param)(\'friendRequestId\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "acceptFriendRequest", null);\n__decorate([\n    (0, friendship_swagger_1.ApiRejectFriendRequest)(),\n    (0, common_3.Post)(\'reject/:friendRequestId\'),\n    __param(0, (0, common_3.Param)(\'friendRequestId\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "rejectFriendRequest", null);\n__decorate([\n    (0, common_3.Delete)(\':friendId\'),\n    (0, friendship_swagger_1.ApiRemoveFriend)(),\n    __param(0, (0, common_3.Param)(\'friendId\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "removeFriend", null);\n__decorate([\n    (0, common_3.Get)(\'list\'),\n    (0, friendship_swagger_1.ApiGetFriendList)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "getFriendList", null);\n__decorate([\n    (0, common_3.Get)(\'received-requests\'),\n    (0, friendship_swagger_1.ApiGetReceivedRequests)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "getReceivedRequests", null);\n__decorate([\n    (0, common_3.Get)(\'sent-requests\'),\n    (0, friendship_swagger_1.ApiGetSentRequests)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "getSentRequests", null);\n__decorate([\n    (0, common_3.Get)(\'friends/search\'),\n    (0, friendship_swagger_1.ApiSearchUsersWithFriendStatus)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __param(1, (0, common_3.Query)(\'keyword\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], FriendshipController.prototype, "searchFriends", null);\nexports.FriendshipController = FriendshipController = __decorate([\n    (0, swagger_1.ApiTags)(\'friendship\'),\n    (0, common_1.Controller)(\'friendship\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_2.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [friendship_service_1.FriendshipService])\n], FriendshipController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/friendship/friendship.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/friendship/friendship.module.ts':
      /*!*****************************************************!*\
  !*** ./src/modules/friendship/friendship.module.ts ***!
  \*****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.FriendshipModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst friendship_service_1 = __webpack_require__(/*! ./friendship.service */ "./src/modules/friendship/friendship.service.ts");\nconst friendship_controller_1 = __webpack_require__(/*! ./friendship.controller */ "./src/modules/friendship/friendship.controller.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst friendship_entity_1 = __webpack_require__(/*! @/entities/friendship.entity */ "./src/entities/friendship.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nlet FriendshipModule = class FriendshipModule {\n};\nexports.FriendshipModule = FriendshipModule;\nexports.FriendshipModule = FriendshipModule = __decorate([\n    (0, common_1.Module)({\n        imports: [typeorm_1.TypeOrmModule.forFeature([friendship_entity_1.Friendship, user_entity_1.User])],\n        controllers: [friendship_controller_1.FriendshipController],\n        providers: [friendship_service_1.FriendshipService],\n        exports: [friendship_service_1.FriendshipService],\n    })\n], FriendshipModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/friendship/friendship.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/friendship/friendship.service.ts':
      /*!******************************************************!*\
  !*** ./src/modules/friendship/friendship.service.ts ***!
  \******************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FriendshipService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ \"@nestjs/typeorm\");\nconst friendship_entity_1 = __webpack_require__(/*! @/entities/friendship.entity */ \"./src/entities/friendship.entity.ts\");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst error_code_enum_1 = __webpack_require__(/*! @/types/error-code.enum */ \"./src/types/error-code.enum.ts\");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ \"./src/utils/custom-exception.ts\");\nconst friendship_enum_1 = __webpack_require__(/*! @/types/friendship.enum */ \"./src/types/friendship.enum.ts\");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ \"./src/entities/user.entity.ts\");\nlet FriendshipService = class FriendshipService {\n    constructor(friendshipRepository, userRepository) {\n        this.friendshipRepository = friendshipRepository;\n        this.userRepository = userRepository;\n    }\n    async sendFriendRequest(requesterUuid, dto) {\n        const { addresseeUuid } = dto;\n        if (requesterUuid === addresseeUuid) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.CANNOT_FRIEND_SELF, '자기 자신에게 친구 신청을 할 수 없습니다.');\n        }\n        const existing = await this.friendshipRepository.findOne({\n            where: [\n                { requesterUuid, addresseeUuid },\n                { requesterUuid: addresseeUuid, addresseeUuid: requesterUuid },\n            ],\n        });\n        if (existing) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.ALREADY_FRIENDS, '이미 친구 요청이 존재하거나 친구 상태입니다.');\n        }\n        const friendRequest = this.friendshipRepository.create({\n            requesterUuid,\n            addresseeUuid,\n            status: friendship_enum_1.FriendshipStatus.PENDING,\n        });\n        await this.friendshipRepository.save(friendRequest);\n        return { message: '친구 요청이 전송되었습니다.' };\n    }\n    async acceptFriendRequest(friendRequestId, userUuid) {\n        const request = await this.friendshipRepository.findOne({\n            where: { id: friendRequestId, addresseeUuid: userUuid },\n        });\n        if (!request) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.FRIEND_REQUEST_NOT_FOUND, '친구 요청을 찾을 수 없습니다.');\n        }\n        request.status = friendship_enum_1.FriendshipStatus.ACCEPTED;\n        await this.friendshipRepository.save(request);\n        return { message: '친구 요청을 수락했습니다.' };\n    }\n    async rejectFriendRequest(friendRequestId, userUuid) {\n        const request = await this.friendshipRepository.findOne({\n            where: { id: friendRequestId, addresseeUuid: userUuid },\n        });\n        if (!request) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.FRIEND_REQUEST_NOT_FOUND, '친구 요청을 찾을 수 없습니다.');\n        }\n        await this.friendshipRepository.delete(friendRequestId);\n        return { message: '친구 요청을 거절했습니다.' };\n    }\n    async removeFriend(friendId, userUuid) {\n        const friend = await this.friendshipRepository.findOne({\n            where: [\n                { id: friendId, requesterUuid: userUuid },\n                { id: friendId, addresseeUuid: userUuid },\n            ],\n        });\n        if (!friend) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.FRIENDSHIP_NOT_FOUND, '친구 관계를 찾을 수 없습니다.');\n        }\n        await this.friendshipRepository.delete(friendId);\n        return { message: '친구가 삭제되었습니다.' };\n    }\n    async getFriendList(userUuid) {\n        const friends = await this.friendshipRepository.find({\n            where: [\n                { requesterUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n                { addresseeUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n            ],\n        });\n        const friendInfos = await Promise.all(friends.map(async (friend) => {\n            const friendUuid = friend.requesterUuid === userUuid\n                ? friend.addresseeUuid\n                : friend.requesterUuid;\n            const user = await this.userRepository.findOne({\n                where: { userUuid: friendUuid },\n                select: ['userUuid', 'nickname', 'profileImage'],\n            });\n            return {\n                friendId: friend.id,\n                friendUuid: user?.userUuid,\n                nickname: user?.nickname,\n                profileImage: user?.profileImage,\n                status: friend.status,\n                createdAt: friend.createdAt,\n            };\n        }));\n        return { friends: friendInfos };\n    }\n    async getReceivedRequests(userUuid) {\n        const requests = await this.friendshipRepository.find({\n            where: {\n                addresseeUuid: userUuid,\n                status: friendship_enum_1.FriendshipStatus.PENDING,\n            },\n        });\n        const requesterUuids = requests.map((req) => req.requesterUuid);\n        const users = await this.userRepository.find({\n            where: { userUuid: (0, typeorm_2.In)(requesterUuids) },\n            select: ['userUuid', 'nickname', 'profileImage'],\n        });\n        const userMap = new Map(users.map((u) => [u.userUuid, u]));\n        const receivedRequests = requests.map((req) => {\n            const requester = userMap.get(req.requesterUuid);\n            return {\n                requestId: req.id,\n                requesterUuid: requester?.userUuid,\n                nickname: requester?.nickname,\n                profileImage: requester?.profileImage,\n                createdAt: req.createdAt,\n            };\n        });\n        return { receivedRequests };\n    }\n    async getSentRequests(userUuid) {\n        const requests = await this.friendshipRepository.find({\n            where: {\n                requesterUuid: userUuid,\n                status: friendship_enum_1.FriendshipStatus.PENDING,\n            },\n        });\n        const addresseeUuids = requests.map((req) => req.addresseeUuid);\n        const users = await this.userRepository.find({\n            where: { userUuid: (0, typeorm_2.In)(addresseeUuids) },\n            select: ['userUuid', 'nickname', 'profileImage'],\n        });\n        const userMap = new Map(users.map((u) => [u.userUuid, u]));\n        const sentRequests = requests.map((req) => {\n            const addressee = userMap.get(req.addresseeUuid);\n            return {\n                requestId: req.id,\n                addresseeUuid: addressee?.userUuid,\n                nickname: addressee?.nickname,\n                profileImage: addressee?.profileImage,\n                createdAt: req.createdAt,\n            };\n        });\n        return { sentRequests };\n    }\n    async searchUsersWithFriendStatus(userUuid, keyword) {\n        const users = await this.userRepository.find({\n            where: [\n                {\n                    nickname: (0, typeorm_2.ILike)(`%${keyword}%`),\n                    userUuid: (0, typeorm_2.Not)(userUuid),\n                },\n            ],\n            select: ['userUuid', 'nickname', 'profileImage'],\n        });\n        const friendships = await this.friendshipRepository.find({\n            where: [\n                { requesterUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n                { addresseeUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n            ],\n        });\n        const friendUuids = friendships.map((f) => f.requesterUuid === userUuid ? f.addresseeUuid : f.requesterUuid);\n        const result = users.map((u) => ({\n            userUuid: u.userUuid,\n            nickname: u.nickname,\n            profileImage: u.profileImage,\n            isFriend: friendUuids.includes(u.userUuid),\n        }));\n        return result;\n    }\n};\nexports.FriendshipService = FriendshipService;\nexports.FriendshipService = FriendshipService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(friendship_entity_1.Friendship)),\n    __param(1, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __metadata(\"design:paramtypes\", [typeorm_2.Repository,\n        typeorm_2.Repository])\n], FriendshipService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/friendship/friendship.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/likes/decorators/likes.swagger.ts':
      /*!*******************************************************!*\
  !*** ./src/modules/likes/decorators/likes.swagger.ts ***!
  \*******************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiCreateLike = ApiCreateLike;\nexports.ApiDeleteLike = ApiDeleteLike;\nexports.ApiCheckLikeStatus = ApiCheckLikeStatus;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nfunction ApiCreateLike() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '게시글 좋아요 추가',\n        description: '특정 게시글에 좋아요를 추가합니다. 이미 좋아요한 경우 에러가 발생합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        description: '게시글 UUID',\n        required: true,\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '좋아요가 성공적으로 추가됨',\n        schema: {\n            type: 'object',\n            properties: {\n                id: {\n                    type: 'number',\n                    example: 123,\n                    description: '생성된 좋아요 ID',\n                },\n                postUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                    description: '좋아요된 게시글 UUID',\n                },\n                userUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                    description: '좋아요한 사용자 UUID',\n                },\n                createdAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                    description: '좋아요 생성 일시',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('LIKE_001', '이미 좋아요한 게시글입니다.', 400)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('POST_001', '게시글을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiDeleteLike() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '좋아요 취소',\n        description: '인증글의 좋아요를 취소합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        description: '인증글 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '좋아요가 성공적으로 취소됨',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '좋아요가 취소되었습니다.',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('LIKE_002', '좋아요하지 않은 인증글입니다.', 400)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('POST_001', '인증글을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiCheckLikeStatus() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '좋아요 상태 확인',\n        description: '사용자가 특정 인증글에 좋아요를 했는지 확인합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        description: '인증글 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '좋아요 상태 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                isLiked: {\n                    type: 'boolean',\n                    example: true,\n                },\n                likeCount: {\n                    type: 'number',\n                    example: 42,\n                },\n                postUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('POST_001', '인증글을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/likes/decorators/likes.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/likes/likes.controller.ts':
      /*!***********************************************!*\
  !*** ./src/modules/likes/likes.controller.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.LikesController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst likes_service_1 = __webpack_require__(/*! ./likes.service */ "./src/modules/likes/likes.service.ts");\nconst likes_swagger_1 = __webpack_require__(/*! ./decorators/likes.swagger */ "./src/modules/likes/decorators/likes.swagger.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nlet LikesController = class LikesController {\n    constructor(likesService) {\n        this.likesService = likesService;\n    }\n    createLike(postUuid, userUuid) {\n        return this.likesService.createLike(postUuid, userUuid);\n    }\n    checkLikeStatus(postUuid, userUuid) {\n        return this.likesService.checkLikeStatus(userUuid, postUuid);\n    }\n    removeLike(postUuid, userUuid) {\n        return this.likesService.removeLike(postUuid, userUuid);\n    }\n};\nexports.LikesController = LikesController;\n__decorate([\n    (0, common_1.Post)(\':postUuid\'),\n    (0, likes_swagger_1.ApiCreateLike)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], LikesController.prototype, "createLike", null);\n__decorate([\n    (0, common_1.Get)(\'check/:postUuid\'),\n    (0, likes_swagger_1.ApiCheckLikeStatus)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], LikesController.prototype, "checkLikeStatus", null);\n__decorate([\n    (0, common_1.Delete)(\':postUuid\'),\n    (0, likes_swagger_1.ApiDeleteLike)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", void 0)\n], LikesController.prototype, "removeLike", null);\nexports.LikesController = LikesController = __decorate([\n    (0, swagger_1.ApiTags)(\'like\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'like\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [likes_service_1.LikesService])\n], LikesController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/likes/likes.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/likes/likes.module.ts':
      /*!*******************************************!*\
  !*** ./src/modules/likes/likes.module.ts ***!
  \*******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.LikesModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst likes_service_1 = __webpack_require__(/*! ./likes.service */ "./src/modules/likes/likes.service.ts");\nconst likes_controller_1 = __webpack_require__(/*! ./likes.controller */ "./src/modules/likes/likes.controller.ts");\nconst like_entity_1 = __webpack_require__(/*! @/entities/like.entity */ "./src/entities/like.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst posts_module_1 = __webpack_require__(/*! ../posts/posts.module */ "./src/modules/posts/posts.module.ts");\nconst users_module_1 = __webpack_require__(/*! ../users/users.module */ "./src/modules/users/users.module.ts");\nlet LikesModule = class LikesModule {\n};\nexports.LikesModule = LikesModule;\nexports.LikesModule = LikesModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([like_entity_1.Like, user_entity_1.User]),\n            (0, common_1.forwardRef)(() => posts_module_1.PostsModule),\n            (0, common_1.forwardRef)(() => users_module_1.UsersModule),\n        ],\n        controllers: [likes_controller_1.LikesController],\n        providers: [likes_service_1.LikesService],\n        exports: [likes_service_1.LikesService],\n    })\n], LikesModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/likes/likes.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/likes/likes.service.ts':
      /*!********************************************!*\
  !*** ./src/modules/likes/likes.service.ts ***!
  \********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.LikesService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");\nconst like_entity_1 = __webpack_require__(/*! @/entities/like.entity */ "./src/entities/like.entity.ts");\nconst users_service_1 = __webpack_require__(/*! ../users/users.service */ "./src/modules/users/users.service.ts");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ "./src/utils/custom-exception.ts");\nconst error_code_enum_1 = __webpack_require__(/*! @/types/error-code.enum */ "./src/types/error-code.enum.ts");\nlet LikesService = class LikesService {\n    constructor(likeRepository, userService) {\n        this.likeRepository = likeRepository;\n        this.userService = userService;\n    }\n    async createLike(postUuid, userUuid) {\n        const existingLike = await this.likeRepository.findOne({\n            where: {\n                postUuid,\n                userUuid,\n            },\n        });\n        if (existingLike) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.ALREADY_LIKED, \'이미 좋아요한 게시글입니다.\');\n        }\n        const like = this.likeRepository.create({\n            postUuid,\n            userUuid,\n        });\n        await this.likeRepository.save(like);\n        const likeCount = await this.getLikeCountByPostId(postUuid);\n        return {\n            id: like.id,\n            likeCount,\n        };\n    }\n    async getLikeCountByPostId(postUuid) {\n        return this.likeRepository.count({\n            where: { postUuid },\n        });\n    }\n    async checkLikeStatus(userUuid, postUuid) {\n        const like = await this.likeRepository.findOne({\n            where: {\n                userUuid,\n                postUuid,\n            },\n        });\n        return {\n            liked: !!like,\n        };\n    }\n    async removeLike(postUuid, userUuid) {\n        const like = await this.likeRepository.findOne({\n            where: {\n                postUuid,\n                userUuid,\n            },\n        });\n        if (!like) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.NOT_LIKED_POST, \'해당 게시글에 좋아요를 하지 않았습니다.\');\n        }\n        await this.likeRepository.delete(like.id);\n        const likeCount = await this.getLikeCountByPostId(postUuid);\n        return {\n            success: true,\n            likeCount,\n        };\n    }\n    async getLikeCountsByPostIds(postUuids) {\n        const likeCountMap = new Map();\n        if (postUuids.length === 0) {\n            return likeCountMap;\n        }\n        const likes = await this.likeRepository\n            .createQueryBuilder(\'like\')\n            .select(\'like.postUuid\', \'postUuid\')\n            .addSelect(\'COUNT(like.id)\', \'count\')\n            .where(\'like.postUuid IN (:...postUuids)\', { postUuids })\n            .groupBy(\'like.postUuid\')\n            .getRawMany();\n        postUuids.forEach((id) => likeCountMap.set(id, 0));\n        likes.forEach((like) => {\n            likeCountMap.set(like.postUuid, parseInt(like.count));\n        });\n        return likeCountMap;\n    }\n};\nexports.LikesService = LikesService;\nexports.LikesService = LikesService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(like_entity_1.Like)),\n    __param(1, (0, common_1.Inject)((0, common_1.forwardRef)(() => users_service_1.UsersService))),\n    __metadata("design:paramtypes", [typeorm_2.Repository,\n        users_service_1.UsersService])\n], LikesService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/likes/likes.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/mission/decorators/mission.swagger.ts':
      /*!***********************************************************!*\
  !*** ./src/modules/mission/decorators/mission.swagger.ts ***!
  \***********************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiCreateMission = ApiCreateMission;\nexports.ApiUpdateMission = ApiUpdateMission;\nexports.ApiDeleteMission = ApiDeleteMission;\nexports.ApiGetMissionDetail = ApiGetMissionDetail;\nexports.ApiGetAllMissions = ApiGetAllMissions;\nexports.ApiParticipateMission = ApiParticipateMission;\nexports.ApiSubmitMissionResult = ApiSubmitMissionResult;\nexports.ApiGetMyMissions = ApiGetMyMissions;\nexports.ApiCancelMissionParticipation = ApiCancelMissionParticipation;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst create_mission_dto_1 = __webpack_require__(/*! ../dto/create-mission.dto */ \"./src/modules/mission/dto/create-mission.dto.ts\");\nconst update_mission_dto_1 = __webpack_require__(/*! ../dto/update-mission.dto */ \"./src/modules/mission/dto/update-mission.dto.ts\");\nfunction ApiCreateMission() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미션 생성',\n        description: '관리자가 새로운 미션을 생성합니다.',\n    }), (0, swagger_1.ApiBody)({\n        type: create_mission_dto_1.CreateMissionDto,\n        examples: {\n            default: {\n                summary: '예시',\n                value: {\n                    title: '7월 런닝 미션',\n                    description: '일주일 간 20km 달리기',\n                    type: 'distance',\n                    startTime: '2025-08-09T00:00:00Z',\n                    endTime: '2025-08-09T23:59:59Z',\n                    durationSeconds: 3600,\n                    reward: 20,\n                    isLongTerm: false,\n                },\n            },\n            longTerm: {\n                summary: '장기 챌린지 예시',\n                value: {\n                    title: '8월 건강 챌린지',\n                    description: '한 달 동안 하루 8000보 걷기',\n                    type: 'steps',\n                    startTime: '2025-08-13T00:00:00Z',\n                    endTime: '2025-08-18T23:59:59Z',\n                    reward: 20,\n                    isLongTerm: true,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({ status: 201, description: '미션 생성 성공' }), (0, swagger_1.ApiResponse)({ status: 400, description: '잘못된 요청' }));\n}\nfunction ApiUpdateMission() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미션 수정',\n        description: '기존 미션 정보를 수정합니다.',\n    }), (0, swagger_1.ApiParam)({ name: 'id', description: '미션 ID', example: 1 }), (0, swagger_1.ApiBody)({\n        type: update_mission_dto_1.UpdateMissionDto,\n        examples: {\n            default: {\n                summary: '예시',\n                value: {\n                    title: '수정된 런닝 미션',\n                    reward: 1500,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({ status: 200, description: '수정 성공' }), (0, swagger_1.ApiResponse)({ status: 404, description: '미션을 찾을 수 없음' }));\n}\nfunction ApiDeleteMission() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미션 삭제',\n        description: '특정 미션을 삭제합니다.',\n    }), (0, swagger_1.ApiParam)({ name: 'id', description: '미션 ID', example: 1 }), (0, swagger_1.ApiResponse)({ status: 200, description: '삭제 성공' }), (0, swagger_1.ApiResponse)({ status: 404, description: '미션을 찾을 수 없음' }));\n}\nfunction ApiGetMissionDetail() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미션 상세 조회',\n        description: '미션 상세 정보와 사용자 랭킹 정보를 함께 반환합니다.',\n    }), (0, swagger_1.ApiParam)({ name: 'id', description: '미션 ID', example: 1 }), (0, swagger_1.ApiResponse)({ status: 200, description: '조회 성공' }), (0, swagger_1.ApiResponse)({ status: 404, description: '미션을 찾을 수 없음' }));\n}\nfunction ApiGetAllMissions() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '전체 미션 목록 조회',\n        description: '등록된 전체 미션 목록을 조회합니다.',\n    }), (0, swagger_1.ApiResponse)({ status: 200, description: '조회 성공' }));\n}\nfunction ApiParticipateMission() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미션 참여',\n        description: '사용자가 특정 미션에 참여합니다.',\n    }), (0, swagger_1.ApiParam)({ name: 'missionId', description: '미션 ID', example: 1 }), (0, swagger_1.ApiResponse)({ status: 201, description: '참여 성공' }), (0, swagger_1.ApiResponse)({ status: 404, description: '미션 또는 사용자 정보 없음' }));\n}\nfunction ApiSubmitMissionResult() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미션 결과 제출',\n        description: '사용자가 완료한 미션 데이터를 제출합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'missionId',\n        description: '미션 ID',\n        example: 1,\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            properties: {\n                resultData: {\n                    type: 'number',\n                    example: 120,\n                    description: '제출한 미션 결과 값 (예: 걸음 수, 거리 등)',\n                },\n            },\n            required: ['resultData'],\n        },\n    }), (0, swagger_1.ApiResponse)({ status: 200, description: '제출 성공' }), (0, swagger_1.ApiResponse)({ status: 404, description: '참여 정보 없음' }));\n}\nfunction ApiGetMyMissions() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '내 미션 목록 조회',\n        description: '내가 참여한 미션들을 조회합니다.',\n    }), (0, swagger_1.ApiResponse)({ status: 200, description: '조회 성공' }));\n}\nfunction ApiCancelMissionParticipation() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미션 참여 취소',\n        description: '사용자가 참여했던 미션을 취소합니다.',\n    }), (0, swagger_1.ApiParam)({ name: 'id', description: '미션 ID', example: 1 }), (0, swagger_1.ApiResponse)({ status: 200, description: '참여 취소 성공' }), (0, swagger_1.ApiResponse)({ status: 404, description: '참여 기록 없음' }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/mission/decorators/mission.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/mission/dto/create-mission.dto.ts':
      /*!*******************************************************!*\
  !*** ./src/modules/mission/dto/create-mission.dto.ts ***!
  \*******************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CreateMissionDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nclass CreateMissionDto {\n}\nexports.CreateMissionDto = CreateMissionDto;\n__decorate([\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateMissionDto.prototype, "title", void 0);\n__decorate([\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateMissionDto.prototype, "description", void 0);\n__decorate([\n    (0, class_validator_1.IsEnum)([\'distance\', \'steps\', \'calories\']),\n    __metadata("design:type", String)\n], CreateMissionDto.prototype, "type", void 0);\n__decorate([\n    (0, class_validator_1.IsDateString)(),\n    __metadata("design:type", String)\n], CreateMissionDto.prototype, "startTime", void 0);\n__decorate([\n    (0, class_validator_1.IsDateString)(),\n    __metadata("design:type", String)\n], CreateMissionDto.prototype, "endTime", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsInt)(),\n    __metadata("design:type", Number)\n], CreateMissionDto.prototype, "durationSeconds", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsInt)(),\n    __metadata("design:type", Number)\n], CreateMissionDto.prototype, "reward", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsBoolean)(),\n    __metadata("design:type", Boolean)\n], CreateMissionDto.prototype, "isLongTerm", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/mission/dto/create-mission.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/mission/dto/update-mission.dto.ts':
      /*!*******************************************************!*\
  !*** ./src/modules/mission/dto/update-mission.dto.ts ***!
  \*******************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdateMissionDto = void 0;\nconst mapped_types_1 = __webpack_require__(/*! @nestjs/mapped-types */ "@nestjs/mapped-types");\nconst create_mission_dto_1 = __webpack_require__(/*! ./create-mission.dto */ "./src/modules/mission/dto/create-mission.dto.ts");\nclass UpdateMissionDto extends (0, mapped_types_1.PartialType)(create_mission_dto_1.CreateMissionDto) {\n}\nexports.UpdateMissionDto = UpdateMissionDto;\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/mission/dto/update-mission.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/mission/mission.controller.ts':
      /*!***************************************************!*\
  !*** ./src/modules/mission/mission.controller.ts ***!
  \***************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MissionController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst mission_service_1 = __webpack_require__(/*! ./mission.service */ "./src/modules/mission/mission.service.ts");\nconst create_mission_dto_1 = __webpack_require__(/*! ./dto/create-mission.dto */ "./src/modules/mission/dto/create-mission.dto.ts");\nconst update_mission_dto_1 = __webpack_require__(/*! ./dto/update-mission.dto */ "./src/modules/mission/dto/update-mission.dto.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst mission_swagger_1 = __webpack_require__(/*! ./decorators/mission.swagger */ "./src/modules/mission/decorators/mission.swagger.ts");\nlet MissionController = class MissionController {\n    constructor(missionService) {\n        this.missionService = missionService;\n    }\n    create(dto) {\n        return this.missionService.create(dto);\n    }\n    update(id, dto) {\n        return this.missionService.update(id, dto);\n    }\n    delete(id) {\n        return this.missionService.delete(id);\n    }\n    participate(missionId, userUuid) {\n        return this.missionService.participate(missionId, userUuid);\n    }\n    async getMyMissions(userUuid) {\n        return this.missionService.findMyMissions(userUuid);\n    }\n    async getDetail(id, userUuid) {\n        return this.missionService.getDetailWithRank(id, userUuid);\n    }\n    async submitResult(missionId, userUuid, resultData) {\n        return this.missionService.submitResult(missionId, userUuid, resultData);\n    }\n    async getAllMissions() {\n        return this.missionService.findAll();\n    }\n    async cancelParticipation(missionId, userUuid) {\n        return this.missionService.cancelParticipation(userUuid, missionId);\n    }\n};\nexports.MissionController = MissionController;\n__decorate([\n    (0, common_1.Post)(),\n    (0, mission_swagger_1.ApiCreateMission)(),\n    __param(0, (0, common_1.Body)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [create_mission_dto_1.CreateMissionDto]),\n    __metadata("design:returntype", void 0)\n], MissionController.prototype, "create", null);\n__decorate([\n    (0, common_1.Patch)(\':id\'),\n    (0, mission_swagger_1.ApiUpdateMission)(),\n    __param(0, (0, common_1.Param)(\'id\', common_1.ParseIntPipe)),\n    __param(1, (0, common_1.Body)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, update_mission_dto_1.UpdateMissionDto]),\n    __metadata("design:returntype", void 0)\n], MissionController.prototype, "update", null);\n__decorate([\n    (0, common_1.Delete)(\':id\'),\n    (0, mission_swagger_1.ApiDeleteMission)(),\n    __param(0, (0, common_1.Param)(\'id\', common_1.ParseIntPipe)),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number]),\n    __metadata("design:returntype", void 0)\n], MissionController.prototype, "delete", null);\n__decorate([\n    (0, common_1.Post)(\':missionId/participate\'),\n    (0, mission_swagger_1.ApiParticipateMission)(),\n    __param(0, (0, common_1.Param)(\'missionId\', common_1.ParseIntPipe)),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", void 0)\n], MissionController.prototype, "participate", null);\n__decorate([\n    (0, common_1.Get)(\'me\'),\n    (0, mission_swagger_1.ApiGetMyMissions)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], MissionController.prototype, "getMyMissions", null);\n__decorate([\n    (0, common_1.Get)(\':id\'),\n    (0, mission_swagger_1.ApiGetMissionDetail)(),\n    __param(0, (0, common_1.Param)(\'id\', common_1.ParseIntPipe)),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", Promise)\n], MissionController.prototype, "getDetail", null);\n__decorate([\n    (0, common_1.Patch)(\':missionId/result\'),\n    (0, mission_swagger_1.ApiSubmitMissionResult)(),\n    __param(0, (0, common_1.Param)(\'missionId\', common_1.ParseIntPipe)),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __param(2, (0, common_1.Body)(\'resultData\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String, Number]),\n    __metadata("design:returntype", Promise)\n], MissionController.prototype, "submitResult", null);\n__decorate([\n    (0, common_1.Get)(),\n    (0, mission_swagger_1.ApiGetAllMissions)(),\n    (0, mission_swagger_1.ApiGetAllMissions)(),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", []),\n    __metadata("design:returntype", Promise)\n], MissionController.prototype, "getAllMissions", null);\n__decorate([\n    (0, common_1.Delete)(\':id/participation\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    (0, mission_swagger_1.ApiCancelMissionParticipation)(),\n    __param(0, (0, common_1.Param)(\'id\', common_1.ParseIntPipe)),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", Promise)\n], MissionController.prototype, "cancelParticipation", null);\nexports.MissionController = MissionController = __decorate([\n    (0, swagger_1.ApiTags)(\'mission\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'mission\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [mission_service_1.MissionService])\n], MissionController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/mission/mission.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/mission/mission.module.ts':
      /*!***********************************************!*\
  !*** ./src/modules/mission/mission.module.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MissionModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst mission_service_1 = __webpack_require__(/*! ./mission.service */ "./src/modules/mission/mission.service.ts");\nconst mission_controller_1 = __webpack_require__(/*! ./mission.controller */ "./src/modules/mission/mission.controller.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst mission_entity_1 = __webpack_require__(/*! @/entities/mission.entity */ "./src/entities/mission.entity.ts");\nconst mission_participation_entity_1 = __webpack_require__(/*! @/entities/mission-participation.entity */ "./src/entities/mission-participation.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nlet MissionModule = class MissionModule {\n};\nexports.MissionModule = MissionModule;\nexports.MissionModule = MissionModule = __decorate([\n    (0, common_1.Module)({\n        imports: [typeorm_1.TypeOrmModule.forFeature([mission_entity_1.Mission, mission_participation_entity_1.MissionParticipation, user_entity_1.User])],\n        controllers: [mission_controller_1.MissionController],\n        providers: [mission_service_1.MissionService],\n    })\n], MissionModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/mission/mission.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/mission/mission.service.ts':
      /*!************************************************!*\
  !*** ./src/modules/mission/mission.service.ts ***!
  \************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MissionService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ \"@nestjs/typeorm\");\nconst mission_entity_1 = __webpack_require__(/*! @/entities/mission.entity */ \"./src/entities/mission.entity.ts\");\nconst mission_participation_entity_1 = __webpack_require__(/*! @/entities/mission-participation.entity */ \"./src/entities/mission-participation.entity.ts\");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ \"./src/entities/user.entity.ts\");\nlet MissionService = class MissionService {\n    constructor(missionRepo, participationRepo, userRepo) {\n        this.missionRepo = missionRepo;\n        this.participationRepo = participationRepo;\n        this.userRepo = userRepo;\n    }\n    async create(dto) {\n        const mission = this.missionRepo.create(dto);\n        return this.missionRepo.save(mission);\n    }\n    async update(id, dto) {\n        const mission = await this.missionRepo.findOneBy({ id });\n        if (!mission)\n            throw new common_1.NotFoundException('해당 미션을 찾을 수 없습니다.');\n        Object.assign(mission, dto);\n        return this.missionRepo.save(mission);\n    }\n    async delete(id) {\n        const mission = await this.missionRepo.findOneBy({ id });\n        if (!mission)\n            throw new common_1.NotFoundException('해당 미션을 찾을 수 없습니다.');\n        await this.missionRepo.remove(mission);\n    }\n    async participate(missionId, userUuid) {\n        const mission = await this.missionRepo.findOneBy({ id: missionId });\n        if (!mission)\n            throw new common_1.NotFoundException('미션을 찾을 수 없습니다.');\n        const exists = await this.participationRepo.findOneBy({\n            missionId,\n            userUuid,\n        });\n        if (exists)\n            return exists;\n        const participation = this.participationRepo.create({\n            missionId,\n            userUuid,\n            joinedAt: new Date(),\n            completed: false,\n            resultData: null,\n        });\n        return this.participationRepo.save(participation);\n    }\n    async getDetailWithRank(missionId, userUuid) {\n        const mission = await this.missionRepo.findOneBy({ id: missionId });\n        if (!mission)\n            throw new common_1.NotFoundException('미션을 찾을 수 없습니다.');\n        const now = new Date();\n        let status = 'UPCOMING';\n        if (mission.startTime <= now && mission.endTime >= now) {\n            status = 'ONGOING';\n        }\n        else if (mission.endTime < now) {\n            status = 'COMPLETED';\n        }\n        const allResults = await this.participationRepo.find({\n            where: { missionId },\n        });\n        const userUuids = allResults.map((p) => p.userUuid);\n        const users = await this.userRepo.findBy({ userUuid: (0, typeorm_2.In)(userUuids) });\n        const userMap = new Map(users.map((u) => [\n            u.userUuid,\n            { name: u.nickname, profileImage: u.profileImage },\n        ]));\n        const ranked = allResults\n            .filter((p) => p.resultData != null)\n            .map((p) => ({\n            userUuid: p.userUuid,\n            name: userMap.get(p.userUuid)?.name || '알 수 없음',\n            profileImage: userMap.get(p.userUuid)?.profileImage || null,\n            result: p.resultData,\n        }))\n            .sort((a, b) => b.result - a.result);\n        const isParticipating = allResults.some((p) => p.userUuid === userUuid);\n        const myResult = ranked.find((r) => r.userUuid === userUuid)?.result ?? null;\n        const myRank = ranked.findIndex((r) => r.userUuid === userUuid);\n        const myRankValue = myRank === -1 ? null : myRank + 1;\n        const myName = userMap.get(userUuid)?.name ?? null;\n        const myProfileImage = userMap.get(userUuid)?.profileImage ?? null;\n        return {\n            mission,\n            isParticipating,\n            myResult,\n            myRank: myRankValue,\n            myName,\n            myProfileImage,\n            rankings: ranked.slice(0, 20),\n            status,\n        };\n    }\n    async submitResult(missionId, userUuid, resultData) {\n        const participation = await this.participationRepo.findOneBy({\n            missionId,\n            userUuid,\n        });\n        if (!participation) {\n            throw new common_1.NotFoundException('해당 미션에 참여한 기록이 없습니다.');\n        }\n        const mission = await this.missionRepo.findOneBy({ id: missionId });\n        if (!mission) {\n            throw new common_1.NotFoundException('미션을 찾을 수 없습니다.');\n        }\n        participation.resultData = resultData;\n        if (!mission.isLongTerm) {\n            participation.completed = true;\n        }\n        return this.participationRepo.save(participation);\n    }\n    async findAll() {\n        const now = new Date();\n        const missions = await this.missionRepo.find({\n            order: { startTime: 'DESC' },\n        });\n        return missions.map((mission) => {\n            let status;\n            if (mission.startTime > now) {\n                status = 'UPCOMING';\n            }\n            else if (mission.endTime < now) {\n                status = 'COMPLETED';\n            }\n            else {\n                status = 'ONGOING';\n            }\n            return {\n                ...mission,\n                status,\n            };\n        });\n    }\n    async findMyMissions(userUuid) {\n        const participations = await this.participationRepo.find({\n            where: { userUuid },\n            order: { joinedAt: 'DESC' },\n        });\n        const missionIds = participations.map((p) => p.missionId);\n        if (missionIds.length === 0)\n            return [];\n        const missions = await this.missionRepo.find({\n            where: { id: (0, typeorm_2.In)(missionIds) },\n        });\n        const now = new Date();\n        return missions\n            .filter((mission) => mission)\n            .map((mission) => {\n            let status;\n            if (now < mission.startTime)\n                status = '진행예정';\n            else if (now <= mission.endTime)\n                status = '진행중';\n            else\n                status = '완료';\n            return {\n                id: mission.id,\n                title: mission.title,\n                description: mission.description,\n                type: mission.type,\n                startTime: mission.startTime,\n                endTime: mission.endTime,\n                reward: mission.reward,\n                status,\n            };\n        });\n    }\n    async cancelParticipation(userUuid, missionId) {\n        const participation = await this.participationRepo.findOne({\n            where: { userUuid, missionId },\n        });\n        if (!participation) {\n            throw new common_1.NotFoundException('참여 기록이 없습니다.');\n        }\n        await this.participationRepo.remove(participation);\n        return { message: '미션 참여가 취소되었습니다.' };\n    }\n};\nexports.MissionService = MissionService;\nexports.MissionService = MissionService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(mission_entity_1.Mission)),\n    __param(1, (0, typeorm_1.InjectRepository)(mission_participation_entity_1.MissionParticipation)),\n    __param(2, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __metadata(\"design:paramtypes\", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository])\n], MissionService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/mission/mission.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/notifications/apns-push.service.ts':
      /*!********************************************************!*\
  !*** ./src/modules/notifications/apns-push.service.ts ***!
  \********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar ApnsPushService_1;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApnsPushService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst config_1 = __webpack_require__(/*! @nestjs/config */ \"@nestjs/config\");\nconst apn = __webpack_require__(/*! node-apn */ \"node-apn\");\nconst fs = __webpack_require__(/*! fs */ \"fs\");\nconst path = __webpack_require__(/*! path */ \"path\");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ \"./src/utils/custom-exception.ts\");\nlet ApnsPushService = ApnsPushService_1 = class ApnsPushService {\n    constructor(configService) {\n        this.configService = configService;\n        this.logger = new common_1.Logger(ApnsPushService_1.name);\n        this.isInitialized = false;\n    }\n    async onModuleInit() {\n        await this.initializeProvider();\n    }\n    async initializeProvider() {\n        try {\n            const keyPath = this.configService.get('APNS_KEY_PATH');\n            const keyId = this.configService.get('APNS_KEY_ID');\n            const teamId = this.configService.get('APNS_TEAM_ID');\n            const isProduction = this.configService.get('NODE_ENV') === 'production';\n            if (!keyPath || !keyId || !teamId) {\n                const errorMessage = '필요한 환경변수: APNS_KEY_PATH, APNS_KEY_ID, APNS_TEAM_ID';\n                this.logger.error(errorMessage);\n                custom_exception_1.BusinessException.pushProviderConfigurationError(errorMessage);\n            }\n            const fullKeyPath = path.resolve(keyPath);\n            if (!fs.existsSync(fullKeyPath)) {\n                const errorMessage = `APNs 키 파일을 찾을 수 없습니다: ${fullKeyPath}`;\n                this.logger.error(errorMessage);\n                custom_exception_1.BusinessException.pushProviderConfigurationError(errorMessage);\n            }\n            const options = {\n                token: {\n                    key: fullKeyPath,\n                    keyId: keyId,\n                    teamId: teamId,\n                },\n                production: isProduction,\n                connectionRetryLimit: 3,\n            };\n            this.apnProvider = new apn.Provider(options);\n            this.setupEventListeners();\n            this.isInitialized = true;\n            this.logger.log(`APNs Provider 초기화 완료`);\n            this.logger.log(`환경: ${isProduction ? 'Production' : 'Sandbox (Development)'}`);\n            this.logger.log(`Key ID: ${keyId}`);\n            this.logger.log(`Team ID: ${teamId}`);\n        }\n        catch (error) {\n            this.logger.error('APNs Provider 초기화 실패:', error);\n            this.isInitialized = false;\n            custom_exception_1.BusinessException.pushProviderConnectionFailed(error.message);\n        }\n    }\n    setupEventListeners() {\n        if (!this.apnProvider)\n            return;\n        this.apnProvider.on('connected', () => {\n            this.logger.log('APNs 서버에 연결됨');\n        });\n        this.apnProvider.on('disconnected', () => {\n            this.logger.warn('APNs 서버 연결 해제됨');\n        });\n        this.apnProvider.on('socketError', (err) => {\n            this.logger.error('APNs 소켓 에러:', err);\n        });\n        this.apnProvider.on('transmitted', (notification, device) => {\n            this.logger.debug(`푸시 전송 성공: ${device.substring(0, 8)}...`);\n        });\n        this.apnProvider.on('transmissionError', (errorCode, notification, device) => {\n            this.logger.error(`푸시 전송 실패: ${device.substring(0, 8)}..., 에러: ${errorCode}`);\n        });\n    }\n    async sendToDevice(deviceToken, payload) {\n        return this.sendToDevices([deviceToken], payload);\n    }\n    async sendToDevices(deviceTokens, payload) {\n        if (!this.isInitialized) {\n            this.logger.error('APNs Provider가 초기화되지 않았습니다');\n            custom_exception_1.BusinessException.pushProviderNotInitialized();\n        }\n        if (!deviceTokens?.length) {\n            return {\n                success: true,\n                sent: 0,\n                failed: 0,\n                invalidTokens: [],\n            };\n        }\n        try {\n            const notification = this.createNotification(payload);\n            const result = await this.apnProvider.send(notification, deviceTokens);\n            const invalidTokens = [];\n            const errors = [];\n            result.failed.forEach((failure) => {\n                const deviceToken = failure.device;\n                const status = failure.status;\n                const response = failure.response;\n                if (status === '410' || status === '400') {\n                    invalidTokens.push(deviceToken);\n                    this.logger.warn(`잘못된 디바이스 토큰: ${deviceToken.substring(0, 8)}... (${status})`);\n                }\n                else {\n                    const errorMsg = `${deviceToken.substring(0, 8)}...: ${status} - ${response}`;\n                    errors.push(errorMsg);\n                    this.logger.error(`푸시 전송 실패: ${errorMsg}`);\n                }\n            });\n            result.sent.forEach((sentResult) => {\n                this.logger.debug(`푸시 전송 성공: ${sentResult.device.substring(0, 8)}...`);\n            });\n            const finalResult = {\n                success: true,\n                sent: result.sent.length,\n                failed: result.failed.length,\n                invalidTokens,\n                errors: errors.length > 0 ? errors : undefined,\n            };\n            this.logger.log(`푸시 전송 완료 - 성공: ${finalResult.sent}, 실패: ${finalResult.failed}, 잘못된 토큰: ${invalidTokens.length}`);\n            return finalResult;\n        }\n        catch (error) {\n            this.logger.error('푸시 전송 중 예외 발생:', error);\n            if (error.code === 'ECONNREFUSED' || error.code === 'ENOTFOUND') {\n                custom_exception_1.BusinessException.pushProviderConnectionFailed(error.message);\n            }\n            else if (error.message?.includes('invalid token')) {\n                custom_exception_1.BusinessException.pushInvalidDeviceToken(deviceTokens[0] || 'unknown');\n            }\n            else {\n                custom_exception_1.BusinessException.pushSendFailed(deviceTokens[0] || 'unknown', error.message || '알 수 없는 오류');\n            }\n        }\n    }\n    createNotification(payload) {\n        const notification = new apn.Notification();\n        notification.alert = {\n            title: payload.title,\n            body: payload.body,\n        };\n        notification.badge = payload.badge ?? 0;\n        notification.sound = payload.sound || 'default';\n        if (payload.category) {\n            notification.category = payload.category;\n        }\n        if (payload.data) {\n            notification.payload = payload.data;\n        }\n        const bundleId = this.configService.get('APNS_BUNDLE_ID');\n        if (bundleId) {\n            notification.topic = bundleId;\n        }\n        notification.expiry = Math.floor(Date.now() / 1000) + 3600;\n        notification.priority = 10;\n        notification.pushType = 'alert';\n        return notification;\n    }\n    isReady() {\n        return this.isInitialized && !!this.apnProvider;\n    }\n    async sendTestPush(deviceToken) {\n        return this.sendToDevice(deviceToken, {\n            title: '테스트 알림',\n            body: 'APNs 연결이 정상적으로 동작합니다.',\n            badge: 1,\n            sound: 'default',\n            data: {\n                type: 'test',\n                timestamp: new Date().toISOString(),\n            },\n        });\n    }\n    async onModuleDestroy() {\n        if (this.apnProvider) {\n            try {\n                await this.apnProvider.shutdown();\n                this.logger.log('APNs Provider 연결 해제 완료');\n            }\n            catch (error) {\n                this.logger.error('APNs Provider 종료 중 오류:', error);\n            }\n        }\n    }\n};\nexports.ApnsPushService = ApnsPushService;\nexports.ApnsPushService = ApnsPushService = ApnsPushService_1 = __decorate([\n    (0, common_1.Injectable)(),\n    __metadata(\"design:paramtypes\", [config_1.ConfigService])\n], ApnsPushService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/apns-push.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/notifications/decorators/notifications.swagger.ts':
      /*!***********************************************************************!*\
  !*** ./src/modules/notifications/decorators/notifications.swagger.ts ***!
  \***********************************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiCreateNotification = ApiCreateNotification;\nexports.ApiGetNotifications = ApiGetNotifications;\nexports.ApiGetUnreadCount = ApiGetUnreadCount;\nexports.ApiMarkAsRead = ApiMarkAsRead;\nexports.ApiDeleteNotification = ApiDeleteNotification;\nexports.ApiSendPush = ApiSendPush;\nexports.ApiSendPushMultiple = ApiSendPushMultiple;\nexports.ApiSendTestPush = ApiSendTestPush;\nexports.ApiGetPushStatus = ApiGetPushStatus;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! @/decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nfunction ApiCreateNotification() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '알림 생성',\n        description: '새로운 알림을 생성합니다. (시스템용)',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            required: ['recipientUuid', 'type', 'title', 'content'],\n            properties: {\n                recipientUuid: {\n                    type: 'string',\n                    description: '수신자 UUID',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                senderUuid: {\n                    type: 'string',\n                    description: '발신자 UUID (선택적)',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                type: {\n                    type: 'string',\n                    enum: [\n                        'friend_request',\n                        'friend_accepted',\n                        'challenge_invite',\n                        'challenge_start',\n                        'challenge_end',\n                        'new_message',\n                        'post_like',\n                        'post_comment',\n                        'mention',\n                    ],\n                    description: '알림 타입',\n                    example: 'friend_request',\n                },\n                title: {\n                    type: 'string',\n                    description: '알림 제목',\n                    example: '친구 요청이 도착했습니다',\n                },\n                content: {\n                    type: 'string',\n                    description: '알림 내용',\n                    example: '김철수님이 친구 요청을 보냈습니다.',\n                },\n                data: {\n                    type: 'object',\n                    description: '추가 데이터 (JSON)',\n                    example: { friendRequestId: 123 },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '알림이 성공적으로 생성됨',\n        schema: {\n            type: 'object',\n            properties: {\n                id: { type: 'number', example: 1 },\n                recipientUuid: {\n                    type: 'string',\n                    example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                },\n                senderUuid: { type: 'string', example: '01HZQK5J8X2M3N4P5Q6R7S8T9V' },\n                type: { type: 'string', example: 'friend_request' },\n                title: { type: 'string', example: '친구 요청이 도착했습니다' },\n                content: {\n                    type: 'string',\n                    example: '김철수님이 친구 요청을 보냈습니다.',\n                },\n                data: { type: 'object', example: { friendRequestId: 123 } },\n                isRead: { type: 'boolean', example: false },\n                isSent: { type: 'boolean', example: false },\n                createdAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n                updatedAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.NotFound), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetNotifications() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '알림 목록 조회',\n        description: '사용자의 알림 목록을 페이지네이션으로 조회합니다.',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지당 항목 수 (기본값: 20)',\n        example: 20,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'unreadOnly',\n        required: false,\n        description: '미읽음 알림만 조회',\n        example: false,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'type',\n        required: false,\n        description: '알림 타입 필터',\n        enum: [\n            'friend_request',\n            'friend_accepted',\n            'challenge_invite',\n            'challenge_start',\n            'challenge_end',\n            'new_message',\n            'post_like',\n            'post_comment',\n            'mention',\n        ],\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '알림 목록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                notifications: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            id: { type: 'number', example: 1 },\n                            recipientUuid: {\n                                type: 'string',\n                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                            },\n                            senderUuid: {\n                                type: 'string',\n                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                            },\n                            type: { type: 'string', example: 'friend_request' },\n                            title: { type: 'string', example: '친구 요청이 도착했습니다' },\n                            content: {\n                                type: 'string',\n                                example: '김철수님이 친구 요청을 보냈습니다.',\n                            },\n                            data: { type: 'object', example: { friendRequestId: 123 } },\n                            isRead: { type: 'boolean', example: false },\n                            isSent: { type: 'boolean', example: true },\n                            createdAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                            updatedAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                        },\n                    },\n                },\n                pagination: {\n                    type: 'object',\n                    properties: {\n                        currentPage: { type: 'number', example: 1 },\n                        totalPages: { type: 'number', example: 5 },\n                        totalItems: { type: 'number', example: 100 },\n                        itemsPerPage: { type: 'number', example: 20 },\n                    },\n                },\n                unreadCount: { type: 'number', example: 5 },\n            },\n        },\n    }));\n}\nfunction ApiGetUnreadCount() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '미읽음 알림 개수 조회',\n        description: '사용자의 미읽음 알림 개수를 조회합니다.',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '미읽음 알림 개수 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                unreadCount: { type: 'number', example: 5 },\n            },\n        },\n    }));\n}\nfunction ApiMarkAsRead() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '알림 읽음 처리',\n        description: '지정된 알림들을 읽음 상태로 변경합니다. notificationIds가 없으면 모든 미읽음 알림을 읽음 처리합니다.',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            properties: {\n                notificationIds: {\n                    type: 'array',\n                    items: { type: 'number' },\n                    description: '읽음 처리할 알림 ID 배열 (선택적)',\n                    example: [1, 2, 3],\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '알림 읽음 처리 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                success: { type: 'boolean', example: true },\n                message: {\n                    type: 'string',\n                    example: '3개의 알림이 읽음 처리되었습니다.',\n                },\n            },\n        },\n    }));\n}\nfunction ApiDeleteNotification() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '알림 삭제',\n        description: '지정된 알림을 삭제합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'id',\n        description: '삭제할 알림 ID',\n        example: 1,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '알림 삭제 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                success: { type: 'boolean', example: true },\n                message: { type: 'string', example: '알림이 삭제되었습니다.' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_001', '해당 알림을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiSendPush() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '푸시알림 전송',\n        description: '단일 디바이스에 푸시알림을 전송합니다.',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            required: ['deviceToken', 'title', 'body'],\n            properties: {\n                deviceToken: {\n                    type: 'string',\n                    description: '디바이스 토큰',\n                    example: 'a9d0ed10e9cfd022a61cb08753f49c5a0b0dfb383697bf9f9d750a1003da19c7',\n                },\n                title: {\n                    type: 'string',\n                    description: '푸시알림 제목',\n                    example: '새로운 메시지',\n                },\n                body: {\n                    type: 'string',\n                    description: '푸시알림 내용',\n                    example: '김철수님이 메시지를 보냈습니다.',\n                },\n                badge: {\n                    type: 'number',\n                    description: '배지 수',\n                    example: 1,\n                },\n                sound: {\n                    type: 'string',\n                    description: '알림 소리',\n                    example: 'default',\n                },\n                data: {\n                    type: 'object',\n                    description: '추가 데이터',\n                    example: { messageId: 123, type: 'message' },\n                },\n                category: {\n                    type: 'string',\n                    description: '알림 카테고리',\n                    example: 'MESSAGE_CATEGORY',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '푸시알림 전송 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                success: { type: 'boolean', example: true },\n                sent: { type: 'number', example: 1 },\n                failed: { type: 'number', example: 0 },\n                invalidTokens: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    example: [],\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_005', 'APNs 푸시 서비스가 초기화되지 않았습니다.', 503)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_006', 'APNs 서버 연결에 실패했습니다.', 502)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_007', '유효하지 않은 디바이스 토큰입니다.', 400)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_008', 'APNs 서비스 설정에 오류가 있습니다.', 500)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiSendPushMultiple() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '다중 푸시알림 전송',\n        description: '여러 디바이스에 푸시알림을 동시에 전송합니다.',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            required: ['deviceTokens', 'title', 'body'],\n            properties: {\n                deviceTokens: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    description: '디바이스 토큰 배열',\n                    example: [\n                        'a9d0ed10e9cfd022a61cb08753f49c5a0b0dfb383697bf9f9d750a1003da19c7',\n                        'b8c1fe21f0dfe133b72dc19864g50d6b1c1egc484708cgag851b1104eb20d8',\n                    ],\n                },\n                title: {\n                    type: 'string',\n                    description: '푸시알림 제목',\n                    example: '새로운 공지사항',\n                },\n                body: {\n                    type: 'string',\n                    description: '푸시알림 내용',\n                    example: '새로운 업데이트가 있습니다.',\n                },\n                badge: {\n                    type: 'number',\n                    description: '배지 수',\n                    example: 1,\n                },\n                sound: {\n                    type: 'string',\n                    description: '알림 소리',\n                    example: 'default',\n                },\n                data: {\n                    type: 'object',\n                    description: '추가 데이터',\n                    example: { announcementId: 456, type: 'announcement' },\n                },\n                category: {\n                    type: 'string',\n                    description: '알림 카테고리',\n                    example: 'ANNOUNCEMENT_CATEGORY',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '푸시알림 전송 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                success: { type: 'boolean', example: true },\n                sent: { type: 'number', example: 2 },\n                failed: { type: 'number', example: 0 },\n                invalidTokens: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    example: [],\n                },\n                errors: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    example: [],\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_005', 'APNs 푸시 서비스가 초기화되지 않았습니다.', 503)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_006', 'APNs 서버 연결에 실패했습니다.', 502)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_007', '유효하지 않은 디바이스 토큰입니다.', 400)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_008', 'APNs 서비스 설정에 오류가 있습니다.', 500)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiSendTestPush() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '테스트 푸시알림 전송',\n        description: '테스트용 푸시알림을 전송합니다.',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            required: ['deviceToken'],\n            properties: {\n                deviceToken: {\n                    type: 'string',\n                    description: '디바이스 토큰',\n                    example: 'a9d0ed10e9cfd022a61cb08753f49c5a0b0dfb383697bf9f9d750a1003da19c7',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '테스트 푸시알림 전송 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                success: { type: 'boolean', example: true },\n                sent: { type: 'number', example: 1 },\n                failed: { type: 'number', example: 0 },\n                invalidTokens: {\n                    type: 'array',\n                    items: { type: 'string' },\n                    example: [],\n                },\n                message: {\n                    type: 'string',\n                    example: '테스트 푸시알림이 전송되었습니다.',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_005', 'APNs 푸시 서비스가 초기화되지 않았습니다.', 503)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_006', 'APNs 서버 연결에 실패했습니다.', 502)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_007', '유효하지 않은 디바이스 토큰입니다.', 400)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_008', 'APNs 서비스 설정에 오류가 있습니다.', 500)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetPushStatus() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '푸시알림 서비스 상태 확인',\n        description: 'APNs 푸시알림 서비스의 연결 상태를 확인합니다.',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '푸시알림 서비스 상태 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                isReady: { type: 'boolean', example: true },\n                status: {\n                    type: 'string',\n                    example: 'connected',\n                    enum: ['connected', 'disconnected', 'initializing', 'error'],\n                },\n                message: {\n                    type: 'string',\n                    example: 'APNs 서비스가 정상적으로 동작중입니다.',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_005', 'APNs 푸시 서비스가 초기화되지 않았습니다.', 503)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('NOTIFICATION_008', 'APNs 서비스 설정에 오류가 있습니다.', 500)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/decorators/notifications.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/notifications/dto/create-notification.dto.ts':
      /*!******************************************************************!*\
  !*** ./src/modules/notifications/dto/create-notification.dto.ts ***!
  \******************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CreateNotificationDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst notification_enum_1 = __webpack_require__(/*! @/types/notification.enum */ "./src/types/notification.enum.ts");\nclass CreateNotificationDto {\n}\nexports.CreateNotificationDto = CreateNotificationDto;\n__decorate([\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateNotificationDto.prototype, "recipientUuid", void 0);\n__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, class_validator_1.IsOptional)(),\n    __metadata("design:type", String)\n], CreateNotificationDto.prototype, "senderUuid", void 0);\n__decorate([\n    (0, class_validator_1.IsEnum)(notification_enum_1.NotificationType),\n    __metadata("design:type", String)\n], CreateNotificationDto.prototype, "type", void 0);\n__decorate([\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateNotificationDto.prototype, "title", void 0);\n__decorate([\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreateNotificationDto.prototype, "content", void 0);\n__decorate([\n    (0, class_validator_1.IsObject)(),\n    (0, class_validator_1.IsOptional)(),\n    __metadata("design:type", Object)\n], CreateNotificationDto.prototype, "data", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/dto/create-notification.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/dto/get-notifications.dto.ts':
      /*!****************************************************************!*\
  !*** ./src/modules/notifications/dto/get-notifications.dto.ts ***!
  \****************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.GetNotificationsDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst class_transformer_1 = __webpack_require__(/*! class-transformer */ "class-transformer");\nconst notification_enum_1 = __webpack_require__(/*! @/types/notification.enum */ "./src/types/notification.enum.ts");\nclass GetNotificationsDto {\n    constructor() {\n        this.page = 1;\n        this.limit = 20;\n    }\n}\nexports.GetNotificationsDto = GetNotificationsDto;\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.Min)(1),\n    (0, class_transformer_1.Type)(() => Number),\n    __metadata("design:type", Number)\n], GetNotificationsDto.prototype, "page", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    (0, class_validator_1.Min)(1),\n    (0, class_transformer_1.Type)(() => Number),\n    __metadata("design:type", Number)\n], GetNotificationsDto.prototype, "limit", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsBoolean)(),\n    (0, class_transformer_1.Transform)(({ value }) => {\n        if (value === \'true\')\n            return true;\n        if (value === \'false\')\n            return false;\n        return value;\n    }),\n    __metadata("design:type", Boolean)\n], GetNotificationsDto.prototype, "unreadOnly", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsEnum)(notification_enum_1.NotificationType),\n    __metadata("design:type", String)\n], GetNotificationsDto.prototype, "type", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/dto/get-notifications.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/dto/mark-as-read.dto.ts':
      /*!***********************************************************!*\
  !*** ./src/modules/notifications/dto/mark-as-read.dto.ts ***!
  \***********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MarkAsReadDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nclass MarkAsReadDto {\n}\nexports.MarkAsReadDto = MarkAsReadDto;\n__decorate([\n    (0, class_validator_1.IsArray)(),\n    (0, class_validator_1.IsNumber)({}, { each: true }),\n    (0, class_validator_1.IsOptional)(),\n    __metadata("design:type", Array)\n], MarkAsReadDto.prototype, "notificationIds", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/dto/mark-as-read.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/dto/send-push.dto.ts':
      /*!********************************************************!*\
  !*** ./src/modules/notifications/dto/send-push.dto.ts ***!
  \********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SendTestPushDto = exports.SendPushMultipleDto = exports.SendPushDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass SendPushDto {\n}\nexports.SendPushDto = SendPushDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'디바이스 토큰\',\n        example: \'a9d0ed10e9cfd022a61cb08753f49c5a0b0dfb383697bf9f9d750a1003da19c7\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushDto.prototype, "deviceToken", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'푸시알림 제목\',\n        example: \'새로운 메시지\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushDto.prototype, "title", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'푸시알림 내용\',\n        example: \'배고픈 귤님이 메시지를 보냈습니다.\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushDto.prototype, "body", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'앱 아이콘의 배지 수\',\n        example: 1,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    __metadata("design:type", Number)\n], SendPushDto.prototype, "badge", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'알림 소리 (default, 사용자 정의 소리 파일명)\',\n        example: \'default\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushDto.prototype, "sound", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'앱으로 전달할 커스텀 데이터\',\n        example: { messageId: 123, type: \'message\', senderId: \'user123\' },\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsObject)(),\n    __metadata("design:type", Object)\n], SendPushDto.prototype, "data", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'알림 카테고리\',\n        example: \'MESSAGE_CATEGORY\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushDto.prototype, "category", void 0);\nclass SendPushMultipleDto {\n}\nexports.SendPushMultipleDto = SendPushMultipleDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'디바이스 토큰 배열\',\n        example: [\n            \'a9d0ed10e9cfd022a61cb08753f49c5a0b0dfb383697bf9f9d750a1003da19c7\',\n            \'b8c1fe21f0dfe133b72dc19864g50d6b1c1egc484708cgag851b1104eb20d8\',\n            \'c7d2gf32g1ege244c83ed20975h61e7c2d2fhd595819dhbh962c2205fc31e9\',\n        ],\n    }),\n    (0, class_validator_1.IsArray)(),\n    (0, class_validator_1.IsString)({ each: true }),\n    __metadata("design:type", Array)\n], SendPushMultipleDto.prototype, "deviceTokens", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'푸시알림 제목\',\n        example: \'새로운 공지사항\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushMultipleDto.prototype, "title", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'푸시알림 내용\',\n        example: \'앱 업데이트가 완료되었습니다. 새로운 기능을 확인해보세요!\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushMultipleDto.prototype, "body", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'앱 아이콘의 배지 수\',\n        example: 1,\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsNumber)(),\n    __metadata("design:type", Number)\n], SendPushMultipleDto.prototype, "badge", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'알림 소리 (default, 사용자 정의 소리 파일명)\',\n        example: \'default\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushMultipleDto.prototype, "sound", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'앱으로 전달할 커스텀 데이터\',\n        example: { announcementId: 456, type: \'announcement\', priority: \'high\' },\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsObject)(),\n    __metadata("design:type", Object)\n], SendPushMultipleDto.prototype, "data", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'알림 카테고리\',\n        example: \'ANNOUNCEMENT_CATEGORY\',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendPushMultipleDto.prototype, "category", void 0);\nclass SendTestPushDto {\n}\nexports.SendTestPushDto = SendTestPushDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: \'테스트용 디바이스 토큰\',\n        example: \'a9d0ed10e9cfd022a61cb08753f49c5a0b0dfb383697bf9f9d750a1003da19c7\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], SendTestPushDto.prototype, "deviceToken", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/dto/send-push.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/notifications.controller.ts':
      /*!***************************************************************!*\
  !*** ./src/modules/notifications/notifications.controller.ts ***!
  \***************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.NotificationsController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst notifications_service_1 = __webpack_require__(/*! ./notifications.service */ "./src/modules/notifications/notifications.service.ts");\nconst apns_push_service_1 = __webpack_require__(/*! ./apns-push.service */ "./src/modules/notifications/apns-push.service.ts");\nconst create_notification_dto_1 = __webpack_require__(/*! ./dto/create-notification.dto */ "./src/modules/notifications/dto/create-notification.dto.ts");\nconst get_notifications_dto_1 = __webpack_require__(/*! ./dto/get-notifications.dto */ "./src/modules/notifications/dto/get-notifications.dto.ts");\nconst mark_as_read_dto_1 = __webpack_require__(/*! ./dto/mark-as-read.dto */ "./src/modules/notifications/dto/mark-as-read.dto.ts");\nconst send_push_dto_1 = __webpack_require__(/*! ./dto/send-push.dto */ "./src/modules/notifications/dto/send-push.dto.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst notifications_swagger_1 = __webpack_require__(/*! ./decorators/notifications.swagger */ "./src/modules/notifications/decorators/notifications.swagger.ts");\nlet NotificationsController = class NotificationsController {\n    constructor(notificationsService, apnsPushService) {\n        this.notificationsService = notificationsService;\n        this.apnsPushService = apnsPushService;\n    }\n    createNotification(createNotificationDto) {\n        return this.notificationsService.createNotification(createNotificationDto);\n    }\n    getNotifications(getNotificationsDto, userUuid) {\n        return this.notificationsService.getNotifications(userUuid, getNotificationsDto);\n    }\n    getUnreadCount(userUuid) {\n        return this.notificationsService.getUnreadCount(userUuid);\n    }\n    getPushStatus() {\n        const isReady = this.apnsPushService.isReady();\n        return {\n            isReady,\n            status: isReady ? \'connected\' : \'disconnected\',\n            message: isReady\n                ? \'APNs 서비스가 정상적으로 동작중입니다.\'\n                : \'APNs 서비스가 연결되지 않았습니다.\',\n        };\n    }\n    sendPush(sendPushDto) {\n        return this.apnsPushService.sendToDevice(sendPushDto.deviceToken, {\n            title: sendPushDto.title,\n            body: sendPushDto.body,\n            badge: sendPushDto.badge,\n            sound: sendPushDto.sound,\n            data: sendPushDto.data,\n            category: sendPushDto.category,\n        });\n    }\n    sendPushMultiple(sendPushMultipleDto) {\n        return this.apnsPushService.sendToDevices(sendPushMultipleDto.deviceTokens, {\n            title: sendPushMultipleDto.title,\n            body: sendPushMultipleDto.body,\n            badge: sendPushMultipleDto.badge,\n            sound: sendPushMultipleDto.sound,\n            data: sendPushMultipleDto.data,\n            category: sendPushMultipleDto.category,\n        });\n    }\n    async sendTestPush(sendTestPushDto) {\n        const result = await this.apnsPushService.sendTestPush(sendTestPushDto.deviceToken);\n        return {\n            ...result,\n            message: \'테스트 푸시알림이 전송되었습니다.\',\n        };\n    }\n    markAsRead(markAsReadDto, userUuid) {\n        return this.notificationsService.markAsRead(userUuid, markAsReadDto);\n    }\n    markAllAsRead(userUuid) {\n        return this.notificationsService.markAsRead(userUuid);\n    }\n    deleteNotification(id, userUuid) {\n        return this.notificationsService.deleteNotification(userUuid, id);\n    }\n};\nexports.NotificationsController = NotificationsController;\n__decorate([\n    (0, common_1.Post)(),\n    (0, notifications_swagger_1.ApiCreateNotification)(),\n    __param(0, (0, common_1.Body)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [create_notification_dto_1.CreateNotificationDto]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "createNotification", null);\n__decorate([\n    (0, common_1.Get)(),\n    (0, notifications_swagger_1.ApiGetNotifications)(),\n    __param(0, (0, common_1.Query)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [get_notifications_dto_1.GetNotificationsDto, String]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "getNotifications", null);\n__decorate([\n    (0, common_1.Get)(\'unread-count\'),\n    (0, notifications_swagger_1.ApiGetUnreadCount)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "getUnreadCount", null);\n__decorate([\n    (0, common_1.Get)(\'push/status\'),\n    (0, notifications_swagger_1.ApiGetPushStatus)(),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", []),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "getPushStatus", null);\n__decorate([\n    (0, common_1.Post)(\'push/send\'),\n    (0, notifications_swagger_1.ApiSendPush)(),\n    __param(0, (0, common_1.Body)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [send_push_dto_1.SendPushDto]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "sendPush", null);\n__decorate([\n    (0, common_1.Post)(\'push/send-multiple\'),\n    (0, notifications_swagger_1.ApiSendPushMultiple)(),\n    __param(0, (0, common_1.Body)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [send_push_dto_1.SendPushMultipleDto]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "sendPushMultiple", null);\n__decorate([\n    (0, common_1.Post)(\'push/test\'),\n    (0, notifications_swagger_1.ApiSendTestPush)(),\n    __param(0, (0, common_1.Body)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [send_push_dto_1.SendTestPushDto]),\n    __metadata("design:returntype", Promise)\n], NotificationsController.prototype, "sendTestPush", null);\n__decorate([\n    (0, common_1.Patch)(\'mark-as-read\'),\n    (0, notifications_swagger_1.ApiMarkAsRead)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [mark_as_read_dto_1.MarkAsReadDto, String]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "markAsRead", null);\n__decorate([\n    (0, common_1.Patch)(\'mark-all-as-read\'),\n    (0, notifications_swagger_1.ApiMarkAsRead)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "markAllAsRead", null);\n__decorate([\n    (0, common_1.Delete)(\':id\'),\n    (0, notifications_swagger_1.ApiDeleteNotification)(),\n    __param(0, (0, common_1.Param)(\'id\', common_1.ParseIntPipe)),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Number, String]),\n    __metadata("design:returntype", void 0)\n], NotificationsController.prototype, "deleteNotification", null);\nexports.NotificationsController = NotificationsController = __decorate([\n    (0, swagger_1.ApiTags)(\'notifications\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'notifications\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [notifications_service_1.NotificationsService,\n        apns_push_service_1.ApnsPushService])\n], NotificationsController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/notifications.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/notifications.module.ts':
      /*!***********************************************************!*\
  !*** ./src/modules/notifications/notifications.module.ts ***!
  \***********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.NotificationsModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst config_1 = __webpack_require__(/*! @nestjs/config */ "@nestjs/config");\nconst notification_entity_1 = __webpack_require__(/*! @/entities/notification.entity */ "./src/entities/notification.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst notifications_controller_1 = __webpack_require__(/*! ./notifications.controller */ "./src/modules/notifications/notifications.controller.ts");\nconst push_token_controller_1 = __webpack_require__(/*! ./push-token.controller */ "./src/modules/notifications/push-token.controller.ts");\nconst notifications_service_1 = __webpack_require__(/*! ./notifications.service */ "./src/modules/notifications/notifications.service.ts");\nconst apns_push_service_1 = __webpack_require__(/*! ./apns-push.service */ "./src/modules/notifications/apns-push.service.ts");\nconst user_push_service_1 = __webpack_require__(/*! ./user-push.service */ "./src/modules/notifications/user-push.service.ts");\nlet NotificationsModule = class NotificationsModule {\n};\nexports.NotificationsModule = NotificationsModule;\nexports.NotificationsModule = NotificationsModule = __decorate([\n    (0, common_1.Module)({\n        imports: [typeorm_1.TypeOrmModule.forFeature([notification_entity_1.Notification, user_entity_1.User]), config_1.ConfigModule],\n        controllers: [notifications_controller_1.NotificationsController, push_token_controller_1.PushTokenController],\n        providers: [notifications_service_1.NotificationsService, apns_push_service_1.ApnsPushService, user_push_service_1.UserPushService],\n        exports: [notifications_service_1.NotificationsService, user_push_service_1.UserPushService],\n    })\n], NotificationsModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/notifications.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/notifications.service.ts':
      /*!************************************************************!*\
  !*** ./src/modules/notifications/notifications.service.ts ***!
  \************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar NotificationsService_1;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.NotificationsService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");\nconst notification_entity_1 = __webpack_require__(/*! @/entities/notification.entity */ "./src/entities/notification.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst notification_enum_1 = __webpack_require__(/*! @/types/notification.enum */ "./src/types/notification.enum.ts");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ "./src/utils/custom-exception.ts");\nconst user_push_service_1 = __webpack_require__(/*! ./user-push.service */ "./src/modules/notifications/user-push.service.ts");\nlet NotificationsService = NotificationsService_1 = class NotificationsService {\n    constructor(notificationRepository, userRepository, userPushService) {\n        this.notificationRepository = notificationRepository;\n        this.userRepository = userRepository;\n        this.userPushService = userPushService;\n        this.logger = new common_1.Logger(NotificationsService_1.name);\n    }\n    async createNotification(createNotificationDto) {\n        const recipient = await this.userRepository.findOne({\n            where: { userUuid: createNotificationDto.recipientUuid },\n        });\n        if (!recipient) {\n            custom_exception_1.BusinessException.userNotFound(createNotificationDto.recipientUuid);\n        }\n        if (createNotificationDto.senderUuid) {\n            const sender = await this.userRepository.findOne({\n                where: { userUuid: createNotificationDto.senderUuid },\n            });\n            if (!sender) {\n                custom_exception_1.BusinessException.userNotFound(createNotificationDto.senderUuid);\n            }\n        }\n        const notification = this.notificationRepository.create(createNotificationDto);\n        const savedNotification = await this.notificationRepository.save(notification);\n        this.sendPushNotificationAsync(savedNotification);\n        return this.mapToResponseDto(savedNotification);\n    }\n    async sendPushNotificationAsync(notification) {\n        try {\n            const unreadCount = await this.notificationRepository.count({\n                where: {\n                    recipientUuid: notification.recipientUuid,\n                    isRead: false,\n                },\n            });\n            const result = await this.userPushService.sendPushToUser(notification.recipientUuid, {\n                title: notification.title,\n                body: notification.content,\n                badge: unreadCount,\n                data: {\n                    notificationId: notification.id,\n                    type: notification.type,\n                    ...notification.data,\n                },\n            });\n            if (result.sent > 0) {\n                await this.notificationRepository.update(notification.id, {\n                    isSent: true,\n                });\n            }\n            this.logger.log(`푸시 알림 발송 완료 - 성공: ${result.sent}, 실패: ${result.failed}`);\n        }\n        catch (error) {\n            this.logger.error(\'푸시 알림 발송 실패:\', error);\n        }\n    }\n    async createBulkNotifications(recipientUuids, notificationData) {\n        let success = 0;\n        let failed = 0;\n        const notifications = [];\n        for (const recipientUuid of recipientUuids) {\n            try {\n                const notification = this.notificationRepository.create({\n                    ...notificationData,\n                    recipientUuid,\n                });\n                const savedNotification = await this.notificationRepository.save(notification);\n                notifications.push(savedNotification);\n                success++;\n            }\n            catch (error) {\n                this.logger.error(`알림 저장 실패: ${recipientUuid}`, error);\n                failed++;\n            }\n        }\n        if (notifications.length > 0) {\n            this.sendBulkPushNotificationAsync(notifications);\n        }\n        this.logger.log(`대량 알림 생성 완료 - 성공: ${success}, 실패: ${failed}`);\n        return { success, failed };\n    }\n    async sendBulkPushNotificationAsync(notifications) {\n        try {\n            const userUuids = notifications.map((n) => n.recipientUuid);\n            const result = await this.userPushService.sendPushToUsers(userUuids, {\n                title: notifications[0].title,\n                body: notifications[0].content,\n                badge: 1,\n                data: {\n                    type: notifications[0].type,\n                },\n            });\n            if (result.sent > 0) {\n                const notificationIds = notifications.map((n) => n.id);\n                await this.notificationRepository.update({ id: (0, typeorm_2.In)(notificationIds) }, { isSent: true });\n            }\n            this.logger.log(`대량 푸시 발송 완료 - 성공: ${result.sent}, 실패: ${result.failed}`);\n        }\n        catch (error) {\n            this.logger.error(\'대량 푸시 발송 실패:\', error);\n        }\n    }\n    async getNotifications(userUuid, getNotificationsDto) {\n        const { page = 1, limit = 20, unreadOnly, type } = getNotificationsDto;\n        const skip = (page - 1) * limit;\n        const queryBuilder = this.notificationRepository\n            .createQueryBuilder(\'notification\')\n            .where(\'notification.recipientUuid = :userUuid\', { userUuid })\n            .orderBy(\'notification.createdAt\', \'DESC\');\n        if (unreadOnly) {\n            queryBuilder.andWhere(\'notification.isRead = :isRead\', { isRead: false });\n        }\n        if (type) {\n            queryBuilder.andWhere(\'notification.type = :type\', { type });\n        }\n        const totalItems = await queryBuilder.getCount();\n        const notifications = await queryBuilder.skip(skip).take(limit).getMany();\n        const unreadCount = await this.notificationRepository.count({\n            where: {\n                recipientUuid: userUuid,\n                isRead: false,\n            },\n        });\n        const totalPages = Math.ceil(totalItems / limit);\n        return {\n            notifications: notifications.map((notification) => this.mapToResponseDto(notification)),\n            pagination: {\n                currentPage: page,\n                totalPages,\n                totalItems,\n                itemsPerPage: limit,\n            },\n            unreadCount,\n        };\n    }\n    async markAsRead(userUuid, markAsReadDto) {\n        let updateResult;\n        if (markAsReadDto?.notificationIds &&\n            markAsReadDto.notificationIds.length > 0) {\n            updateResult = await this.notificationRepository.update({\n                id: (0, typeorm_2.In)(markAsReadDto.notificationIds),\n                recipientUuid: userUuid,\n                isRead: false,\n            }, { isRead: true });\n        }\n        else {\n            updateResult = await this.notificationRepository.update({\n                recipientUuid: userUuid,\n                isRead: false,\n            }, { isRead: true });\n        }\n        return {\n            success: true,\n            message: `${updateResult.affected || 0}개의 알림이 읽음 처리되었습니다.`,\n        };\n    }\n    async deleteNotification(userUuid, notificationId) {\n        const notification = await this.notificationRepository.findOne({\n            where: {\n                id: notificationId,\n                recipientUuid: userUuid,\n            },\n        });\n        if (!notification) {\n            custom_exception_1.BusinessException.notificationNotFound(notificationId);\n        }\n        await this.notificationRepository.remove(notification);\n        return {\n            success: true,\n            message: \'알림이 삭제되었습니다.\',\n        };\n    }\n    async getUnreadCount(userUuid) {\n        const unreadCount = await this.notificationRepository.count({\n            where: {\n                recipientUuid: userUuid,\n                isRead: false,\n            },\n        });\n        return { unreadCount };\n    }\n    mapToResponseDto(notification) {\n        return {\n            id: notification.id,\n            recipientUuid: notification.recipientUuid,\n            senderUuid: notification.senderUuid,\n            type: notification.type,\n            title: notification.title,\n            content: notification.content,\n            data: notification.data,\n            isRead: notification.isRead,\n            isSent: notification.isSent,\n            createdAt: notification.createdAt,\n            updatedAt: notification.updatedAt,\n        };\n    }\n    async createFriendRequestNotification(recipientUuid, senderUuid, senderNickname) {\n        return this.createNotification({\n            recipientUuid,\n            senderUuid,\n            type: notification_enum_1.NotificationType.FRIEND_REQUEST,\n            title: \'친구 요청이 도착했습니다\',\n            content: `${senderNickname}님이 친구 요청을 보냈습니다.`,\n            data: { senderUuid, senderNickname },\n        });\n    }\n    async createFriendAcceptedNotification(recipientUuid, senderUuid, senderNickname) {\n        return this.createNotification({\n            recipientUuid,\n            senderUuid,\n            type: notification_enum_1.NotificationType.FRIEND_ACCEPTED,\n            title: \'친구 요청이 수락되었습니다\',\n            content: `${senderNickname}님이 친구 요청을 수락했습니다.`,\n            data: { senderUuid, senderNickname },\n        });\n    }\n    async createChallengeInviteNotification(recipientUuid, senderUuid, senderNickname, challengeTitle, challengeUuid) {\n        return this.createNotification({\n            recipientUuid,\n            senderUuid,\n            type: notification_enum_1.NotificationType.CHALLENGE_INVITE,\n            title: \'챌린지 초대가 도착했습니다\',\n            content: `${senderNickname}님이 "${challengeTitle}" 챌린지에 초대했습니다.`,\n            data: { senderUuid, senderNickname, challengeUuid, challengeTitle },\n        });\n    }\n    async createPostLikeNotification(recipientUuid, senderUuid, senderNickname, postUuid) {\n        return this.createNotification({\n            recipientUuid,\n            senderUuid,\n            type: notification_enum_1.NotificationType.POST_LIKE,\n            title: \'게시글에 좋아요가 달렸습니다\',\n            content: `${senderNickname}님이 회원님의 게시글에 좋아요를 눌렀습니다.`,\n            data: { senderUuid, senderNickname, postUuid },\n        });\n    }\n    async createPostCommentNotification(recipientUuid, senderUuid, senderNickname, postUuid, commentContent) {\n        return this.createNotification({\n            recipientUuid,\n            senderUuid,\n            type: notification_enum_1.NotificationType.POST_COMMENT,\n            title: \'게시글에 댓글이 달렸습니다\',\n            content: `${senderNickname}님이 회원님의 게시글에 댓글을 달았습니다: "${commentContent}"`,\n            data: { senderUuid, senderNickname, postUuid, commentContent },\n        });\n    }\n    async createNewMessageNotification(recipientUuid, senderUuid, senderNickname, chatRoomUuid, messageContent) {\n        return this.createNotification({\n            recipientUuid,\n            senderUuid,\n            type: notification_enum_1.NotificationType.NEW_MESSAGE,\n            title: \'새 메시지가 도착했습니다\',\n            content: `${senderNickname}: ${messageContent}`,\n            data: { senderUuid, senderNickname, chatRoomUuid, messageContent },\n        });\n    }\n};\nexports.NotificationsService = NotificationsService;\nexports.NotificationsService = NotificationsService = NotificationsService_1 = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(notification_entity_1.Notification)),\n    __param(1, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __metadata("design:paramtypes", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        user_push_service_1.UserPushService])\n], NotificationsService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/notifications.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/push-token.controller.ts':
      /*!************************************************************!*\
  !*** ./src/modules/notifications/push-token.controller.ts ***!
  \************************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PushTokenController = exports.RemovePushTokenDto = exports.RegisterPushTokenDto = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst user_push_service_1 = __webpack_require__(/*! ./user-push.service */ "./src/modules/notifications/user-push.service.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nclass RegisterPushTokenDto {\n}\nexports.RegisterPushTokenDto = RegisterPushTokenDto;\nclass RemovePushTokenDto {\n}\nexports.RemovePushTokenDto = RemovePushTokenDto;\nlet PushTokenController = class PushTokenController {\n    constructor(userPushService) {\n        this.userPushService = userPushService;\n    }\n    async registerPushToken(dto, userUuid) {\n        await this.userPushService.registerPushToken({\n            userUuid,\n            pushToken: dto.pushToken,\n            platform: dto.platform || \'ios\',\n        });\n        return {\n            success: true,\n            message: \'푸시 토큰이 등록되었습니다.\',\n        };\n    }\n    async removePushToken(dto, userUuid) {\n        await this.userPushService.removePushToken(userUuid, dto.pushToken);\n        return {\n            success: true,\n            message: \'푸시 토큰이 제거되었습니다.\',\n        };\n    }\n    async removeAllPushTokens(userUuid) {\n        await this.userPushService.removeAllPushTokens(userUuid);\n        return {\n            success: true,\n            message: \'모든 푸시 토큰이 제거되었습니다.\',\n        };\n    }\n};\nexports.PushTokenController = PushTokenController;\n__decorate([\n    (0, common_1.Post)(\'register\'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    (0, swagger_1.ApiOperation)({\n        summary: \'푸시 토큰 등록\',\n        description: \'푸시 알림을 위한 디바이스 토큰을 등록합니다.\',\n    }),\n    (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: \'푸시 토큰 등록 성공\',\n        schema: {\n            type: \'object\',\n            properties: {\n                success: { type: \'boolean\', example: true },\n                message: { type: \'string\', example: \'푸시 토큰이 등록되었습니다.\' },\n            },\n        },\n    }),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [RegisterPushTokenDto, String]),\n    __metadata("design:returntype", Promise)\n], PushTokenController.prototype, "registerPushToken", null);\n__decorate([\n    (0, common_1.Delete)(\'remove\'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    (0, swagger_1.ApiOperation)({\n        summary: \'푸시 토큰 제거\',\n        description: \'등록된 특정 푸시 토큰을 제거합니다.\',\n    }),\n    (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: \'푸시 토큰 제거 성공\',\n    }),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [RemovePushTokenDto, String]),\n    __metadata("design:returntype", Promise)\n], PushTokenController.prototype, "removePushToken", null);\n__decorate([\n    (0, common_1.Delete)(\'remove-all\'),\n    (0, common_1.HttpCode)(common_1.HttpStatus.OK),\n    (0, swagger_1.ApiOperation)({\n        summary: \'모든 푸시 토큰 제거\',\n        description: \'사용자의 모든 푸시 토큰을 제거합니다. (로그아웃 시 사용)\',\n    }),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], PushTokenController.prototype, "removeAllPushTokens", null);\nexports.PushTokenController = PushTokenController = __decorate([\n    (0, swagger_1.ApiTags)(\'push-tokens\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'push-tokens\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [user_push_service_1.UserPushService])\n], PushTokenController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/push-token.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/notifications/user-push.service.ts':
      /*!********************************************************!*\
  !*** ./src/modules/notifications/user-push.service.ts ***!
  \********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar UserPushService_1;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UserPushService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst apns_push_service_1 = __webpack_require__(/*! ./apns-push.service */ "./src/modules/notifications/apns-push.service.ts");\nlet UserPushService = UserPushService_1 = class UserPushService {\n    constructor(userRepository, apnsPushService) {\n        this.userRepository = userRepository;\n        this.apnsPushService = apnsPushService;\n        this.logger = new common_1.Logger(UserPushService_1.name);\n    }\n    async registerPushToken(dto) {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { userUuid: dto.userUuid },\n            });\n            if (!user) {\n                throw new Error(`사용자를 찾을 수 없습니다: ${dto.userUuid}`);\n            }\n            let pushTokens = user.pushTokens || [];\n            pushTokens = pushTokens.filter((token) => token !== dto.pushToken);\n            pushTokens.push(dto.pushToken);\n            if (pushTokens.length > 5) {\n                pushTokens = pushTokens.slice(-5);\n            }\n            await this.userRepository.update(user.id, {\n                pushTokens,\n                pushToken: dto.pushToken,\n            });\n            this.logger.log(`푸시 토큰 등록 완료: ${dto.userUuid}`);\n        }\n        catch (error) {\n            this.logger.error(\'푸시 토큰 등록 실패:\', error);\n            throw error;\n        }\n    }\n    async removePushToken(userUuid, pushToken) {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { userUuid },\n            });\n            if (!user) {\n                throw new Error(`사용자를 찾을 수 없습니다: ${userUuid}`);\n            }\n            const pushTokens = (user.pushTokens || []).filter((token) => token !== pushToken);\n            const newPushToken = user.pushToken === pushToken ? null : user.pushToken;\n            await this.userRepository.update(user.id, {\n                pushTokens,\n                pushToken: newPushToken,\n            });\n            this.logger.log(`푸시 토큰 제거 완료: ${userUuid}`);\n        }\n        catch (error) {\n            this.logger.error(\'푸시 토큰 제거 실패:\', error);\n            throw error;\n        }\n    }\n    async removeAllPushTokens(userUuid) {\n        await this.userRepository.update({ userUuid }, {\n            pushTokens: [],\n            pushToken: null,\n        });\n        this.logger.log(`모든 푸시 토큰 제거 완료: ${userUuid}`);\n    }\n    async sendPushToUser(userUuid, payload) {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { userUuid },\n                select: [\'userUuid\', \'pushTokens\', \'pushToken\', \'isPushEnabled\'],\n            });\n            if (!user || !user.isPushEnabled) {\n                return { sent: 0, failed: 0 };\n            }\n            const allTokens = new Set();\n            if (user.pushTokens) {\n                user.pushTokens.forEach((token) => allTokens.add(token));\n            }\n            if (user.pushToken) {\n                allTokens.add(user.pushToken);\n            }\n            const tokens = Array.from(allTokens);\n            if (tokens.length === 0) {\n                return { sent: 0, failed: 0 };\n            }\n            const result = await this.apnsPushService.sendToDevices(tokens, payload);\n            if (result.invalidTokens.length > 0) {\n                await this.removeInvalidTokens(userUuid, result.invalidTokens);\n            }\n            return { sent: result.sent, failed: result.failed };\n        }\n        catch (error) {\n            this.logger.error(`푸시 발송 실패: ${userUuid}`, error);\n            return { sent: 0, failed: 1 };\n        }\n    }\n    async sendPushToUsers(userUuids, payload) {\n        if (userUuids.length === 0) {\n            return { sent: 0, failed: 0 };\n        }\n        try {\n            const users = await this.userRepository.find({\n                where: {\n                    userUuid: (0, typeorm_2.In)(userUuids),\n                    isPushEnabled: true,\n                },\n                select: [\'userUuid\', \'pushTokens\', \'pushToken\'],\n            });\n            const allTokens = new Set();\n            const userTokenMap = new Map();\n            users.forEach((user) => {\n                const userTokens = [];\n                if (user.pushTokens) {\n                    user.pushTokens.forEach((token) => {\n                        allTokens.add(token);\n                        userTokens.push(token);\n                    });\n                }\n                if (user.pushToken) {\n                    allTokens.add(user.pushToken);\n                    userTokens.push(user.pushToken);\n                }\n                if (userTokens.length > 0) {\n                    userTokenMap.set(user.userUuid, userTokens);\n                }\n            });\n            const tokens = Array.from(allTokens);\n            if (tokens.length === 0) {\n                return { sent: 0, failed: 0 };\n            }\n            const result = await this.apnsPushService.sendToDevices(tokens, payload);\n            if (result.invalidTokens.length > 0) {\n                await this.cleanupInvalidTokensForUsers(userTokenMap, result.invalidTokens);\n            }\n            return { sent: result.sent, failed: result.failed };\n        }\n        catch (error) {\n            this.logger.error(\'대량 푸시 발송 실패:\', error);\n            return { sent: 0, failed: userUuids.length };\n        }\n    }\n    async removeInvalidTokens(userUuid, invalidTokens) {\n        try {\n            const user = await this.userRepository.findOne({\n                where: { userUuid },\n            });\n            if (!user)\n                return;\n            const validTokens = (user.pushTokens || []).filter((token) => !invalidTokens.includes(token));\n            const newPushToken = invalidTokens.includes(user.pushToken)\n                ? null\n                : user.pushToken;\n            await this.userRepository.update(user.id, {\n                pushTokens: validTokens,\n                pushToken: newPushToken,\n            });\n            this.logger.log(`잘못된 토큰 ${invalidTokens.length}개 제거: ${userUuid}`);\n        }\n        catch (error) {\n            this.logger.error(\'잘못된 토큰 제거 실패:\', error);\n        }\n    }\n    async cleanupInvalidTokensForUsers(userTokenMap, invalidTokens) {\n        for (const [userUuid, userTokens] of userTokenMap.entries()) {\n            const userInvalidTokens = userTokens.filter((token) => invalidTokens.includes(token));\n            if (userInvalidTokens.length > 0) {\n                await this.removeInvalidTokens(userUuid, userInvalidTokens);\n            }\n        }\n    }\n};\nexports.UserPushService = UserPushService;\nexports.UserPushService = UserPushService = UserPushService_1 = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __metadata("design:paramtypes", [typeorm_2.Repository,\n        apns_push_service_1.ApnsPushService])\n], UserPushService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/notifications/user-push.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/payment/decorators/payment.swagger.ts':
      /*!***********************************************************!*\
  !*** ./src/modules/payment/decorators/payment.swagger.ts ***!
  \***********************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiPostWithdraw = ApiPostWithdraw;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nfunction ApiPostWithdraw() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiOperation)({\n        summary: '코인 차감(기프티콘 변환)',\n        description: '출금 계좌 입력 없이, 차감할 코인 수량(amount)만 전달합니다.',\n    }), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            properties: {\n                amount: {\n                    type: 'number',\n                    example: 5000,\n                    description: '차감할 코인 수량',\n                },\n            },\n            required: ['amount'],\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '코인 차감 성공',\n        schema: {\n            example: {\n                message: '기프티콘 변환이 완료되었습니다.',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 400,\n        description: '코인 부족 또는 유효하지 않은 요청',\n        schema: {\n            example: {\n                statusCode: 400,\n                message: '보유 코인이 부족합니다.',\n                error: 'Bad Request',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: 'JWT 인증 실패',\n        schema: {\n            example: {\n                statusCode: 401,\n                message: 'Unauthorized',\n            },\n        },\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/payment/decorators/payment.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/payment/payment.controller.ts':
      /*!***************************************************!*\
  !*** ./src/modules/payment/payment.controller.ts ***!
  \***************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PaymentController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst payment_service_1 = __webpack_require__(/*! ./payment.service */ "./src/modules/payment/payment.service.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst payment_swagger_1 = __webpack_require__(/*! ./decorators/payment.swagger */ "./src/modules/payment/decorators/payment.swagger.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nlet PaymentController = class PaymentController {\n    constructor(paymentService) {\n        this.paymentService = paymentService;\n    }\n    async fakeConfirm(body, req, userUuid) {\n        return this.paymentService.grantCoins(userUuid, body.amount);\n    }\n    async withdraw(body, userUuid) {\n        return this.paymentService.withdrawCoins(userUuid, body.amount);\n    }\n};\nexports.PaymentController = PaymentController;\n__decorate([\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    (0, common_1.Post)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, common_1.Req)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object, Object, String]),\n    __metadata("design:returntype", Promise)\n], PaymentController.prototype, "fakeConfirm", null);\n__decorate([\n    (0, common_1.Post)(\'withdraw\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    (0, payment_swagger_1.ApiPostWithdraw)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object, String]),\n    __metadata("design:returntype", Promise)\n], PaymentController.prototype, "withdraw", null);\nexports.PaymentController = PaymentController = __decorate([\n    (0, swagger_1.ApiTags)(\'payment\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'payment\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [payment_service_1.PaymentService])\n], PaymentController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/payment/payment.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/payment/payment.module.ts':
      /*!***********************************************!*\
  !*** ./src/modules/payment/payment.module.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PaymentModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst payment_service_1 = __webpack_require__(/*! ./payment.service */ "./src/modules/payment/payment.service.ts");\nconst payment_controller_1 = __webpack_require__(/*! ./payment.controller */ "./src/modules/payment/payment.controller.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst payment_entity_1 = __webpack_require__(/*! @/entities/payment.entity */ "./src/entities/payment.entity.ts");\nconst users_module_1 = __webpack_require__(/*! ../users/users.module */ "./src/modules/users/users.module.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst withdrawal_entity_1 = __webpack_require__(/*! @/entities/withdrawal.entity */ "./src/entities/withdrawal.entity.ts");\nconst jwt_1 = __webpack_require__(/*! @nestjs/jwt */ "@nestjs/jwt");\nlet PaymentModule = class PaymentModule {\n};\nexports.PaymentModule = PaymentModule;\nexports.PaymentModule = PaymentModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([payment_entity_1.Payment, user_entity_1.User, withdrawal_entity_1.Withdrawal]),\n            users_module_1.UsersModule,\n            jwt_1.JwtModule.register({\n                secret: process.env.JWT_SECRET,\n                signOptions: { expiresIn: \'1h\' },\n            }),\n        ],\n        controllers: [payment_controller_1.PaymentController],\n        providers: [payment_service_1.PaymentService],\n        exports: [payment_service_1.PaymentService],\n    })\n], PaymentModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/payment/payment.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/payment/payment.service.ts':
      /*!************************************************!*\
  !*** ./src/modules/payment/payment.service.ts ***!
  \************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PaymentService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst payment_entity_1 = __webpack_require__(/*! @/entities/payment.entity */ "./src/entities/payment.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst withdrawal_entity_1 = __webpack_require__(/*! @/entities/withdrawal.entity */ "./src/entities/withdrawal.entity.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");\nlet PaymentService = class PaymentService {\n    constructor(paymentRepo, userRepo, withdrawalRepo) {\n        this.paymentRepo = paymentRepo;\n        this.userRepo = userRepo;\n        this.withdrawalRepo = withdrawalRepo;\n    }\n    async grantCoins(userUuid, amount) {\n        const user = await this.userRepo.findOneBy({ userUuid: userUuid });\n        if (!user) {\n        }\n        user.coins += amount;\n        await this.userRepo.save(user);\n        await this.paymentRepo.save({\n            userUuid,\n            orderId: `test_${Date.now()}`,\n            amount,\n            status: \'SUCCESS\',\n        });\n        return { message: \'코인 지급 완료\' };\n    }\n    async withdrawCoins(userUuid, amount) {\n        const user = await this.userRepo.findOneBy({ userUuid });\n        if (!user)\n            throw new Error(\'사용자를 찾을 수 없습니다.\');\n        if (user.coins < amount) {\n            throw new common_1.BadRequestException(\'보유 코인이 부족합니다.\');\n        }\n        user.coins -= amount;\n        await this.userRepo.save(user);\n        await this.withdrawalRepo.save({\n            userUuid,\n            amount,\n            accountNumber: \'123\',\n            status: \'PENDING\',\n        });\n        return { message: \'기프티콘 변환이 완료되었습니다.\' };\n    }\n};\nexports.PaymentService = PaymentService;\nexports.PaymentService = PaymentService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(payment_entity_1.Payment)),\n    __param(1, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __param(2, (0, typeorm_1.InjectRepository)(withdrawal_entity_1.Withdrawal)),\n    __metadata("design:paramtypes", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository])\n], PaymentService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/payment/payment.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/posts/decorators/posts.swagger.ts':
      /*!*******************************************************!*\
  !*** ./src/modules/posts/decorators/posts.swagger.ts ***!
  \*******************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiCreatePost = ApiCreatePost;\nexports.ApiUpdatePost = ApiUpdatePost;\nexports.ApiGetMyPosts = ApiGetMyPosts;\nexports.ApiGetPostDetail = ApiGetPostDetail;\nexports.ApiDeletePost = ApiDeletePost;\nexports.ApiGetUserPosts = ApiGetUserPosts;\nexports.ApiGetPostsByChallenge = ApiGetPostsByChallenge;\nexports.ApiGetMyCalendar = ApiGetMyCalendar;\nexports.ApiGetOtherCalendar = ApiGetOtherCalendar;\nexports.ApiReportSuspicion = ApiReportSuspicion;\nexports.ApiGetPostVerificationStatus = ApiGetPostVerificationStatus;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst update_post_dto_1 = __webpack_require__(/*! ../dto/update-post.dto */ \"./src/modules/posts/dto/update-post.dto.ts\");\nconst create_post_dto_1 = __webpack_require__(/*! ../dto/create-post.dto */ \"./src/modules/posts/dto/create-post.dto.ts\");\nfunction ApiCreatePost() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자 게시글 생성',\n        description: '게시글 생성 정보를 받아 새로운 게시글을 생성합니다.',\n    }), (0, swagger_1.ApiBody)({\n        type: create_post_dto_1.CreatePostDto,\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '게시글 생성 성공',\n        schema: {\n            example: {\n                message: '게시물이 생성되었습니다.',\n                post: {\n                    id: 1,\n                    postUuid: '01JZ13GQ31DJAY0GVF5F69HEH1',\n                    title: '제목 예시',\n                    userUuid: '01JZ13GQ31DJAY0GVF5F69HEH1',\n                    challengeUuid: '01JZ13GQ31DJAY0GVF5F69HEH2',\n                    content: '내용 예시',\n                    imageUrl: ['https://example.com/image1.jpg'],\n                    isPublic: true,\n                    createdAt: '2025-07-02T09:00:00.000Z',\n                    updatedAt: '2025-07-02T09:00:00.000Z',\n                },\n            },\n        },\n    }));\n}\nfunction ApiUpdatePost() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '게시글 수정',\n        description: '게시글을 수정합니다. 작성자 본인만 수정할 수 있습니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        type: String,\n        description: '수정할 게시글 UUID',\n        example: '01JZ13GQ31DJAY0GVF5F69HEH2',\n    }), (0, swagger_1.ApiBody)({\n        type: update_post_dto_1.UpdatePostDto,\n        description: '수정할 게시글 정보',\n        examples: {\n            default: {\n                summary: '게시글 수정 예시',\n                value: {\n                    title: '오늘의 인증글 제목 수정',\n                    content: '오늘은 이렇게 운동했습니다. 수정본!',\n                    imageUrl: ['https://example.com/image1.jpg'],\n                    isPublic: true,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '게시글 수정 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '게시글이 수정되었습니다.' },\n                post: {\n                    type: 'object',\n                    properties: {\n                        id: { type: 'number', example: 1 },\n                        postUuid: {\n                            type: 'string',\n                            example: '01JZ13GQ31DJAY0GVF5F69HEH2',\n                        },\n                        title: { type: 'string', example: '오늘의 인증글 제목 수정' },\n                        content: {\n                            type: 'string',\n                            example: '오늘은 이렇게 운동했습니다. 수정본!',\n                        },\n                        imageUrl: {\n                            type: 'array',\n                            items: {\n                                type: 'string',\n                                example: 'https://example.com/image1.jpg',\n                            },\n                        },\n                        isPublic: { type: 'boolean', example: true },\n                        createdAt: { type: 'string', format: 'date-time' },\n                        updatedAt: { type: 'string', format: 'date-time' },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: 'POST_001: 해당 게시글이 없습니다.',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'POST_001' },\n                message: { type: 'string', example: '해당 게시글이 없습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n                details: {\n                    type: 'object',\n                    properties: {\n                        postUuid: {\n                            type: 'string',\n                            example: '01JZ13GQ31DJAY0GVF5F69HEH2',\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: 'POST_002: 해당 포스트에 접근할 수 없습니다.',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'POST_002' },\n                message: {\n                    type: 'string',\n                    example: '해당 포스트에 접근할 수 없습니다.',\n                },\n                timestamp: { type: 'string', format: 'date-time' },\n                details: {},\n            },\n        },\n    }));\n}\nfunction ApiGetMyPosts() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자 게시글 조회 (페이지네이션)',\n        description: '현재 로그인한 사용자의 게시글 목록을 페이지네이션으로 조회합니다.',\n    }), (0, swagger_1.ApiQuery)({ name: 'page', required: false, type: Number, example: 1 }), (0, swagger_1.ApiQuery)({ name: 'limit', required: false, type: Number, example: 10 }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '사용자 게시글 조회 성공' },\n                total: { type: 'number', example: 25 },\n                page: { type: 'number', example: 1 },\n                limit: { type: 'number', example: 10 },\n                posts: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            postUuid: {\n                                type: 'string',\n                                example: '01JZ13GQ31DJAY0GVF5F69HEH2',\n                            },\n                            title: { type: 'string', example: '오늘의 인증글 제목' },\n                            content: { type: 'string', example: '인증글 내용' },\n                            imageUrl: {\n                                type: 'array',\n                                items: {\n                                    type: 'string',\n                                    example: 'https://example.com/image.jpg',\n                                },\n                            },\n                            isPublic: { type: 'boolean', example: true },\n                            createdAt: { type: 'string', format: 'date-time' },\n                            updatedAt: { type: 'string', format: 'date-time' },\n                        },\n                    },\n                },\n            },\n        },\n    }));\n}\nfunction ApiGetPostDetail() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '게시글 상세 조회',\n        description: '게시글의 상세 내용을 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        description: '조회할 게시글 ULID',\n        type: String,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '게시글 상세 조회 성공',\n        schema: {\n            example: {\n                message: '게시글 상세 조회 성공',\n                post: {\n                    id: 2,\n                    postUuid: '01JZ5ZE1BANYQXND8XX8DESPXM',\n                    title: '오늘의 인증글 제목',\n                    challengeUuid: '01JZ13GQ31DJAY0GVF5F69HEH2',\n                    content: '오늘 헬스장에서 3시간 운동했어요! 💪',\n                    imageUrl: [\n                        'https://soapft-bucket.s3.amazonaws.com/images/workout2.jpg',\n                    ],\n                    isPublic: true,\n                    createdAt: '2025-07-02T16:27:33.105Z',\n                    updatedAt: '2025-07-02T16:40:59.340Z',\n                    userUuid: '01JYKVN18MCW5B9FZ1PP7T14XS',\n                    isMine: true,\n                    views: 10,\n                    user: {\n                        userUuid: '01JYKVN18MCW5B9FZ1PP7T14XS',\n                        nickname: '헬스왕',\n                        profileImage: 'https://example.com/profile.jpg',\n                    },\n                    likeCount: 0,\n                    isLiked: false,\n                    suspicionCount: 1,\n                    isSuspicious: true,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: 'POST_001: 해당 게시글이 없습니다.',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'POST_001' },\n                message: { type: 'string', example: '해당 게시글이 없습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n                details: {\n                    type: 'object',\n                    properties: {\n                        postUuid: {\n                            type: 'string',\n                            example: '01JZ13GQ31DJAY0GVF5F69HEH2',\n                        },\n                    },\n                },\n            },\n        },\n    }));\n}\nfunction ApiDeletePost() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '게시글 삭제',\n        description: '특정 게시글을 삭제합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        description: '삭제할 게시글 ULID',\n        type: String,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '게시글 삭제 성공',\n        schema: {\n            example: {\n                message: '게시글이 삭제되었습니다.',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: 'POST_001: 해당 게시글을 찾을 수 없습니다.',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'POST_001' },\n                message: {\n                    type: 'string',\n                    example: '해당 게시글을 찾을 수 없습니다.',\n                },\n                timestamp: { type: 'string', format: 'date-time' },\n                details: { type: 'object' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 403,\n        description: 'POST_002: 해당 포스트에 접근할 수 없습니다.',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'POST_002' },\n                message: {\n                    type: 'string',\n                    example: '해당 포스트에 접근할 수 없습니다.',\n                },\n                timestamp: { type: 'string', format: 'date-time' },\n                details: { type: 'object' },\n            },\n        },\n    }));\n}\nfunction ApiGetUserPosts() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({ summary: '특정 사용자 게시글 목록 조회' }), (0, swagger_1.ApiParam)({ name: 'userUuid', description: '사용자 UUID', type: String }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호',\n        type: Number,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지당 개수',\n        type: Number,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '사용자 게시글 목록 조회 성공',\n        schema: {\n            example: {\n                message: '사용자 게시글 목록 조회 성공',\n                total: 12,\n                page: 1,\n                limit: 10,\n                posts: [\n                    {\n                        id: 1,\n                        postUuid: '01JZ....',\n                        title: '인증글 제목',\n                        content: '오늘은 이렇게 운동했습니다.',\n                        imageUrl: ['https://example.com/image.jpg'],\n                        isPublic: true,\n                        createdAt: '2025-07-02T12:34:56Z',\n                        updatedAt: '2025-07-02T12:34:56Z',\n                    },\n                ],\n            },\n        },\n    }));\n}\nfunction ApiGetPostsByChallenge() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '챌린지 게시글 목록 조회',\n        description: '특정 챌린지의 게시글을 페이지네이션으로 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'challengeUuid',\n        description: '조회할 챌린지 UUID',\n        type: String,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        type: Number,\n        description: '페이지 번호 (기본값: 1)',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        type: Number,\n        description: '페이지당 항목 수 (기본값: 10)',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '챌린지 게시글 목록 조회 성공',\n        schema: {\n            example: {\n                message: '챌린지 게시글 목록 조회 성공',\n                total: 100,\n                page: 1,\n                limit: 10,\n                posts: [\n                    {\n                        id: 1,\n                        postUuid: '01JZ644RN20G8VEFSNY09069AD',\n                        title: '오늘의 인증글',\n                        userUuid: '01JYKVN18MCW5B9FZ1PP7T14XS',\n                        challengeUuid: '01JZ644RN20G8VEFSNY09069AD',\n                        content: '오늘 헬스장에서 3시간 운동했어요! 💪',\n                        imageUrl: ['https://example.com/image.jpg'],\n                        isPublic: true,\n                        views: 10,\n                        createdAt: '2025-07-02T16:27:33.105Z',\n                        updatedAt: '2025-07-02T16:40:59.340Z',\n                        user: {\n                            userUuid: '01JYKVN18MCW5B9FZ1PP7T14XS',\n                            nickname: '사용자닉네임',\n                            profileImage: 'https://example.com/profile.jpg',\n                        },\n                    },\n                ],\n            },\n        },\n    }));\n}\nfunction ApiGetMyCalendar() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '내 달력 조회',\n        description: '자신의 인증글 달력 데이터를 조회합니다.',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'year',\n        required: true,\n        type: Number,\n        example: 2025,\n        description: '조회할 연도',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'month',\n        required: true,\n        type: Number,\n        example: 7,\n        description: '조회할 월 (1~12)',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '달력 조회 성공',\n        schema: {\n            example: {\n                data: [\n                    {\n                        date: '2025-07-02',\n                        posts: [\n                            {\n                                postUuid: '01JZFP44NM9XPNFQRQF4CHE9A6',\n                                thumbnailUrl: 'https://cdn.example.com/images/post1-thumb.jpg',\n                            },\n                        ],\n                    },\n                    {\n                        date: '2025-07-04',\n                        posts: [\n                            {\n                                postUuid: '01JZFP44NM9XPNFQRQF4CHE9B7',\n                                thumbnailUrl: 'https://cdn.example.com/images/post2-thumb.jpg',\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n    }));\n}\nfunction ApiGetOtherCalendar() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '다른 사용자 달력 조회',\n        description: '특정 사용자의 인증글 달력 데이터를 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'userUuid',\n        required: true,\n        type: String,\n        example: '01HYXXXXXXX',\n        description: '조회할 사용자 UUID',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'year',\n        required: true,\n        type: Number,\n        example: 2025,\n        description: '조회할 연도',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'month',\n        required: true,\n        type: Number,\n        example: 7,\n        description: '조회할 월 (1~12)',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '달력 조회 성공',\n        schema: {\n            example: {\n                data: [\n                    {\n                        date: '2025-07-02',\n                        posts: [\n                            {\n                                postUuid: '01JZFP44NM9XPNFQRQF4CHE9A6',\n                                thumbnailUrl: 'https://cdn.example.com/images/post1-thumb.jpg',\n                            },\n                        ],\n                    },\n                    {\n                        date: '2025-07-04',\n                        posts: [\n                            {\n                                postUuid: '01JZFP44NM9XPNFQRQF4CHE9B7',\n                                thumbnailUrl: 'https://cdn.example.com/images/post2-thumb.jpg',\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n    }));\n}\nfunction ApiReportSuspicion() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '게시글 의심 등록',\n        description: '게시글이 챌린지와 무관하거나 부적절할 경우 신고할 수 있습니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        required: true,\n        type: String,\n        example: '01JZPOSTUUIDEXAMPLE123',\n        description: '의심하려는 게시글 UUID',\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '의심 등록 성공',\n        schema: {\n            example: {\n                message: '의심 등록 완료',\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 400,\n        description: '이미 의심 등록된 게시글입니다.',\n    }));\n}\nfunction ApiGetPostVerificationStatus() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '게시글 AI 검증 상태 조회',\n        description: '특정 게시글의 AI 검증 상태와 분석 결과를 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'postUuid',\n        type: String,\n        description: '조회할 게시글 UUID',\n        example: '01JZZP4T40RB3H2SP70PKBJWNR',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '검증 상태 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '게시글 검증 상태 조회 성공',\n                },\n                data: {\n                    type: 'object',\n                    properties: {\n                        postUuid: {\n                            type: 'string',\n                            example: '01JZZP4T40RB3H2SP70PKBJWNR',\n                        },\n                        verificationStatus: {\n                            type: 'string',\n                            enum: ['pending', 'approved', 'rejected', 'review'],\n                            example: 'approved',\n                            description: '검증 상태 (pending: 대기중, approved: 승인됨, rejected: 거부됨, review: 검토 필요)',\n                        },\n                        aiConfidence: {\n                            type: 'number',\n                            example: 0.85,\n                            description: 'AI 신뢰도 점수 (0-1 사이)',\n                        },\n                        aiAnalysisResult: {\n                            type: 'string',\n                            example: '이미지에서 러닝화와 GPS 앱이 확인되어 러닝 챌린지와 관련성이 높습니다.',\n                            description: 'AI 분석 결과 설명',\n                        },\n                        verifiedAt: {\n                            type: 'string',\n                            format: 'date-time',\n                            example: '2025-01-27T10:30:00.000Z',\n                            description: '검증 완료 시간',\n                        },\n                        images: {\n                            type: 'array',\n                            items: {\n                                type: 'object',\n                                properties: {\n                                    imageUrl: {\n                                        type: 'string',\n                                        example: 'https://example.com/image.jpg',\n                                    },\n                                    verificationStatus: {\n                                        type: 'string',\n                                        enum: ['pending', 'approved', 'rejected', 'review'],\n                                        example: 'approved',\n                                    },\n                                    confidence: {\n                                        type: 'number',\n                                        example: 0.85,\n                                    },\n                                    analysisResult: {\n                                        type: 'string',\n                                        example: '러닝화 이미지가 명확하게 식별되었습니다.',\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '게시글을 찾을 수 없음',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'POST_001' },\n                message: { type: 'string', example: '해당 게시글이 없습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 500,\n        description: '서버 내부 오류',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'SYS_001' },\n                message: { type: 'string', example: '서버 오류가 발생했습니다.' },\n                timestamp: { type: 'string', format: 'date-time' },\n            },\n        },\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/posts/decorators/posts.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/posts/dto/create-post.dto.ts':
      /*!**************************************************!*\
  !*** ./src/modules/posts/dto/create-post.dto.ts ***!
  \**************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CreatePostDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass CreatePostDto {\n    constructor() {\n        this.isPublic = true;\n    }\n}\nexports.CreatePostDto = CreatePostDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'오늘의 인증글 제목\',\n        description: \'게시글 제목\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreatePostDto.prototype, "title", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'01JZ13GQ31DJAY0GVF5F69HEH2\',\n        description: \'연동된 챌린지 UUID\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreatePostDto.prototype, "challengeUuid", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: \'오늘은 이렇게 운동했습니다!\',\n        description: \'게시글 내용\',\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], CreatePostDto.prototype, "content", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: [\'https://example.com/image1.jpg\'],\n        description: \'첨부 이미지 URL 배열\',\n    }),\n    (0, class_validator_1.IsArray)(),\n    __metadata("design:type", Array)\n], CreatePostDto.prototype, "imageUrl", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        example: true,\n        description: \'공개 여부 (true: 공개, false: 비공개)\',\n        required: false,\n        default: true,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsBoolean)(),\n    __metadata("design:type", Boolean)\n], CreatePostDto.prototype, "isPublic", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/posts/dto/create-post.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/posts/dto/update-post.dto.ts':
      /*!**************************************************!*\
  !*** ./src/modules/posts/dto/update-post.dto.ts ***!
  \**************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdatePostDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst create_post_dto_1 = __webpack_require__(/*! ./create-post.dto */ "./src/modules/posts/dto/create-post.dto.ts");\nclass UpdatePostDto extends (0, swagger_1.PartialType)(create_post_dto_1.CreatePostDto) {\n}\nexports.UpdatePostDto = UpdatePostDto;\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/posts/dto/update-post.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/posts/posts.controller.ts':
      /*!***********************************************!*\
  !*** ./src/modules/posts/posts.controller.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PostsController = void 0;\nconst posts_service_1 = __webpack_require__(/*! ./posts.service */ "./src/modules/posts/posts.service.ts");\nconst create_post_dto_1 = __webpack_require__(/*! ./dto/create-post.dto */ "./src/modules/posts/dto/create-post.dto.ts");\nconst update_post_dto_1 = __webpack_require__(/*! ./dto/update-post.dto */ "./src/modules/posts/dto/update-post.dto.ts");\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst platform_express_1 = __webpack_require__(/*! @nestjs/platform-express */ "@nestjs/platform-express");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst posts_swagger_1 = __webpack_require__(/*! ./decorators/posts.swagger */ "./src/modules/posts/decorators/posts.swagger.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nlet PostsController = class PostsController {\n    constructor(postsService) {\n        this.postsService = postsService;\n    }\n    async precheckImages(challengeUuid, images, userUuid) {\n        return this.postsService.precheckImagesForChallenge(challengeUuid, images, userUuid);\n    }\n    async createVerifiedPost(createVerifiedPostDto, userUuid) {\n        return this.postsService.createVerifiedPost(createVerifiedPostDto, userUuid);\n    }\n    async createPost(createPostDto, userUuid) {\n        return await this.postsService.createPost(createPostDto, userUuid);\n    }\n    async getMyPosts(userUuid, page, limit) {\n        return await this.postsService.getPostsByUserUuid(userUuid, Number(page), Number(limit));\n    }\n    async getMyCalendar(userUuid, year, month) {\n        const data = await this.postsService.getUserCalendar(userUuid, year, month);\n        return { data };\n    }\n    async getOtherCalendar(userUuid, year, month) {\n        const data = await this.postsService.getUserCalendar(userUuid, year, month);\n        return { data };\n    }\n    async getUserPosts(userUuid, page = 1, limit = 10) {\n        return await this.postsService.getUserPosts(userUuid, Number(page), Number(limit));\n    }\n    async findOnePost(postUuid, userUuid) {\n        return await this.postsService.getPostDetail(postUuid, userUuid);\n    }\n    async updatePost(postUuid, updatePostDto, userUuid) {\n        return await this.postsService.updatePost(postUuid, updatePostDto, userUuid);\n    }\n    async deletePost(postUuid, userUuid) {\n        return await this.postsService.deletePost(postUuid, userUuid);\n    }\n    async getPostsByChallenge(challengeUuid, page = 1, limit = 10) {\n        return await this.postsService.getPostsByChallenge(challengeUuid, Number(page), Number(limit));\n    }\n    async reportPost(postUuid, userUuid) {\n        return this.postsService.reportSuspiciousPost(userUuid, postUuid);\n    }\n    async getPostVerificationStatus(postUuid) {\n        return this.postsService.getPostVerificationStatus(postUuid);\n    }\n};\nexports.PostsController = PostsController;\n__decorate([\n    (0, common_1.Post)(\'precheck-images\'),\n    (0, common_1.UseInterceptors)((0, platform_express_1.FilesInterceptor)(\'images\', 5)),\n    (0, swagger_1.ApiConsumes)(\'multipart/form-data\'),\n    (0, swagger_1.ApiOperation)({\n        summary: \'게시글 생성 전 이미지 AI 검증\',\n        description: `\n      게시글 작성 전에 이미지를 업로드하고 AI가 챌린지 관련성을 검증합니다.\n      - 이미지 S3 업로드\n      - Bedrock AI 분석\n      - 즉시 결과 반환 (approve/reject/review)\n    `,\n    }),\n    (0, swagger_1.ApiBody)({\n        schema: {\n            type: \'object\',\n            properties: {\n                challengeUuid: {\n                    type: \'string\',\n                    description: \'챌린지 UUID\',\n                    example: \'01JZZ7V6QKM61EM8CK3D6WA885\',\n                },\n                images: {\n                    type: \'array\',\n                    items: { type: \'string\', format: \'binary\' },\n                    description: \'검증할 이미지들 (최대 5개)\',\n                },\n            },\n        },\n    }),\n    __param(0, (0, common_1.Body)(\'challengeUuid\')),\n    __param(1, (0, common_1.UploadedFiles)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Array, String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "precheckImages", null);\n__decorate([\n    (0, common_1.Post)(\'create-verified\'),\n    (0, swagger_1.ApiOperation)({\n        summary: \'AI 검증 완료된 이미지로 게시글 생성\',\n        description: \'이미 AI 검증을 통과한 이미지들로 게시글을 생성합니다.\',\n    }),\n    (0, swagger_1.ApiBody)({\n        schema: {\n            type: \'object\',\n            properties: {\n                title: { type: \'string\', example: \'런닝 챌린지 5일차 인증\' },\n                content: { type: \'string\', example: \'오늘 5km 뛰었습니다!\' },\n                challengeUuid: { type: \'string\' },\n                verifiedImageUrls: {\n                    type: \'array\',\n                    items: { type: \'string\' },\n                    description: \'AI 검증을 통과한 이미지 URL들\',\n                },\n                verificationToken: {\n                    type: \'string\',\n                    description: \'AI 검증 완료 토큰 (보안용)\',\n                },\n                isPublic: { type: \'boolean\', default: true },\n            },\n        },\n    }),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object, String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "createVerifiedPost", null);\n__decorate([\n    (0, common_1.Post)(),\n    (0, posts_swagger_1.ApiCreatePost)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [create_post_dto_1.CreatePostDto, String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "createPost", null);\n__decorate([\n    (0, common_1.Get)(\'my\'),\n    (0, posts_swagger_1.ApiGetMyPosts)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __param(1, (0, common_1.Query)(\'page\', common_1.ParseIntPipe)),\n    __param(2, (0, common_1.Query)(\'limit\', common_1.ParseIntPipe)),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Number, Number]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "getMyPosts", null);\n__decorate([\n    (0, common_1.Get)(\'calendar\'),\n    (0, posts_swagger_1.ApiGetMyCalendar)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __param(1, (0, common_1.Query)(\'year\')),\n    __param(2, (0, common_1.Query)(\'month\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Number, Number]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "getMyCalendar", null);\n__decorate([\n    (0, common_1.Get)(\'calendar/:userUuid\'),\n    (0, posts_swagger_1.ApiGetOtherCalendar)(),\n    __param(0, (0, common_1.Param)(\'userUuid\')),\n    __param(1, (0, common_1.Query)(\'year\')),\n    __param(2, (0, common_1.Query)(\'month\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Number, Number]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "getOtherCalendar", null);\n__decorate([\n    (0, common_1.Get)(\'user/:userUuid\'),\n    (0, posts_swagger_1.ApiGetUserPosts)(),\n    __param(0, (0, common_1.Param)(\'userUuid\')),\n    __param(1, (0, common_1.Query)(\'page\')),\n    __param(2, (0, common_1.Query)(\'limit\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Object, Object]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "getUserPosts", null);\n__decorate([\n    (0, common_1.Get)(\':postUuid\'),\n    (0, posts_swagger_1.ApiGetPostDetail)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "findOnePost", null);\n__decorate([\n    (0, common_1.Patch)(\':postUuid\'),\n    (0, posts_swagger_1.ApiUpdatePost)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, common_1.Body)()),\n    __param(2, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, update_post_dto_1.UpdatePostDto, String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "updatePost", null);\n__decorate([\n    (0, common_1.Delete)(\':postUuid\'),\n    (0, posts_swagger_1.ApiDeletePost)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "deletePost", null);\n__decorate([\n    (0, common_1.Get)(\'/challenge/:challengeUuid\'),\n    (0, posts_swagger_1.ApiGetPostsByChallenge)(),\n    __param(0, (0, common_1.Param)(\'challengeUuid\')),\n    __param(1, (0, common_1.Query)(\'page\')),\n    __param(2, (0, common_1.Query)(\'limit\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, Object, Object]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "getPostsByChallenge", null);\n__decorate([\n    (0, common_1.Post)(\'post/:postUuid/report\'),\n    (0, posts_swagger_1.ApiReportSuspicion)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "reportPost", null);\n__decorate([\n    (0, common_1.Get)(\':postUuid/verification\'),\n    (0, posts_swagger_1.ApiGetPostVerificationStatus)(),\n    __param(0, (0, common_1.Param)(\'postUuid\')),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], PostsController.prototype, "getPostVerificationStatus", null);\nexports.PostsController = PostsController = __decorate([\n    (0, swagger_1.ApiTags)(\'post\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'post\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [posts_service_1.PostsService])\n], PostsController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/posts/posts.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/posts/posts.module.ts':
      /*!*******************************************!*\
  !*** ./src/modules/posts/posts.module.ts ***!
  \*******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.PostsModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst posts_service_1 = __webpack_require__(/*! ./posts.service */ "./src/modules/posts/posts.service.ts");\nconst posts_controller_1 = __webpack_require__(/*! ./posts.controller */ "./src/modules/posts/posts.controller.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ "./src/entities/post.entity.ts");\nconst likes_module_1 = __webpack_require__(/*! @/modules/likes/likes.module */ "./src/modules/likes/likes.module.ts");\nconst comments_module_1 = __webpack_require__(/*! ../comments/comments.module */ "./src/modules/comments/comments.module.ts");\nconst challenge_module_1 = __webpack_require__(/*! ../challenges/challenge.module */ "./src/modules/challenges/challenge.module.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst users_module_1 = __webpack_require__(/*! ../users/users.module */ "./src/modules/users/users.module.ts");\nconst comment_entity_1 = __webpack_require__(/*! @/entities/comment.entity */ "./src/entities/comment.entity.ts");\nconst suspicion_entity_1 = __webpack_require__(/*! @/entities/suspicion.entity */ "./src/entities/suspicion.entity.ts");\nconst like_entity_1 = __webpack_require__(/*! @/entities/like.entity */ "./src/entities/like.entity.ts");\nconst image_verification_entity_1 = __webpack_require__(/*! @/entities/image-verification.entity */ "./src/entities/image-verification.entity.ts");\nconst ai_module_1 = __webpack_require__(/*! ../ai/ai.module */ "./src/modules/ai/ai.module.ts");\nconst challenge_entity_1 = __webpack_require__(/*! @/entities/challenge.entity */ "./src/entities/challenge.entity.ts");\nconst uploads_module_1 = __webpack_require__(/*! ../uploads/uploads.module */ "./src/modules/uploads/uploads.module.ts");\nconst s3_module_1 = __webpack_require__(/*! ../s3/s3.module */ "./src/modules/s3/s3.module.ts");\nconst jwt_1 = __webpack_require__(/*! @nestjs/jwt */ "@nestjs/jwt");\nlet PostsModule = class PostsModule {\n};\nexports.PostsModule = PostsModule;\nexports.PostsModule = PostsModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([\n                post_entity_1.Post,\n                user_entity_1.User,\n                comment_entity_1.Comment,\n                suspicion_entity_1.Suspicion,\n                like_entity_1.Like,\n                image_verification_entity_1.ImageVerification,\n                challenge_entity_1.Challenge,\n            ]),\n            (0, common_1.forwardRef)(() => likes_module_1.LikesModule),\n            (0, common_1.forwardRef)(() => comments_module_1.CommentsModule),\n            (0, common_1.forwardRef)(() => challenge_module_1.ChallengeModule),\n            (0, common_1.forwardRef)(() => users_module_1.UsersModule),\n            ai_module_1.AiModule,\n            uploads_module_1.UploadsModule,\n            s3_module_1.S3Module,\n            jwt_1.JwtModule.register({\n                secret: process.env.JWT_SECRET || \'your-secret-key\',\n                signOptions: { expiresIn: \'1h\' },\n            }),\n        ],\n        controllers: [posts_controller_1.PostsController],\n        providers: [posts_service_1.PostsService],\n        exports: [posts_service_1.PostsService],\n    })\n], PostsModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/posts/posts.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/posts/posts.service.ts':
      /*!********************************************!*\
  !*** ./src/modules/posts/posts.service.ts ***!
  \********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          "{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PostsService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ \"@nestjs/typeorm\");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ \"typeorm\");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ \"./src/entities/post.entity.ts\");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ \"./src/utils/custom-exception.ts\");\nconst error_code_enum_1 = __webpack_require__(/*! @/types/error-code.enum */ \"./src/types/error-code.enum.ts\");\nconst likes_service_1 = __webpack_require__(/*! @/modules/likes/likes.service */ \"./src/modules/likes/likes.service.ts\");\nconst comments_service_1 = __webpack_require__(/*! ../comments/comments.service */ \"./src/modules/comments/comments.service.ts\");\nconst challenge_service_1 = __webpack_require__(/*! ../challenges/challenge.service */ \"./src/modules/challenges/challenge.service.ts\");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ \"./src/entities/user.entity.ts\");\nconst users_service_1 = __webpack_require__(/*! ../users/users.service */ \"./src/modules/users/users.service.ts\");\nconst ulid_1 = __webpack_require__(/*! ulid */ \"ulid\");\nconst comment_entity_1 = __webpack_require__(/*! @/entities/comment.entity */ \"./src/entities/comment.entity.ts\");\nconst suspicion_entity_1 = __webpack_require__(/*! @/entities/suspicion.entity */ \"./src/entities/suspicion.entity.ts\");\nconst like_entity_1 = __webpack_require__(/*! @/entities/like.entity */ \"./src/entities/like.entity.ts\");\nconst image_verification_entity_1 = __webpack_require__(/*! @/entities/image-verification.entity */ \"./src/entities/image-verification.entity.ts\");\nconst ai_service_1 = __webpack_require__(/*! ../ai/ai.service */ \"./src/modules/ai/ai.service.ts\");\nconst challenge_entity_1 = __webpack_require__(/*! @/entities/challenge.entity */ \"./src/entities/challenge.entity.ts\");\nconst jwt_1 = __webpack_require__(/*! @nestjs/jwt */ \"@nestjs/jwt\");\nconst s3_service_1 = __webpack_require__(/*! ../s3/s3.service */ \"./src/modules/s3/s3.service.ts\");\nconst axios_1 = __webpack_require__(/*! axios */ \"axios\");\nlet PostsService = class PostsService {\n    constructor(postRepository, userRepository, commentRepository, suspicionRepository, likeRepository, imageVerificationRepository, challengeRepository, likesService, commentsService, challengeService, userService, aiService, s3Service, jwtService) {\n        this.postRepository = postRepository;\n        this.userRepository = userRepository;\n        this.commentRepository = commentRepository;\n        this.suspicionRepository = suspicionRepository;\n        this.likeRepository = likeRepository;\n        this.imageVerificationRepository = imageVerificationRepository;\n        this.challengeRepository = challengeRepository;\n        this.likesService = likesService;\n        this.commentsService = commentsService;\n        this.challengeService = challengeService;\n        this.userService = userService;\n        this.aiService = aiService;\n        this.s3Service = s3Service;\n        this.jwtService = jwtService;\n    }\n    async precheckImagesForChallenge(challengeUuid, images, userUuid) {\n        try {\n            console.log(`이미지 사전 검증 시작 - 사용자: ${userUuid}, 챌린지: ${challengeUuid}`);\n            const challenge = await this.challengeRepository.findOne({\n                where: { challengeUuid },\n            });\n            if (!challenge) {\n                throw new Error('챌린지를 찾을 수 없습니다.');\n            }\n            if (!images || images.length === 0) {\n                throw new Error('이미지가 필요합니다.');\n            }\n            if (images.length > 5) {\n                throw new Error('최대 5개의 이미지만 업로드할 수 있습니다.');\n            }\n            const uploadResults = await Promise.all(images.map(async (image, index) => {\n                try {\n                    const imageUrl = await this.s3Service.uploadImage(image);\n                    return {\n                        success: true,\n                        imageUrl: imageUrl,\n                        originalName: image.originalname,\n                        size: image.size,\n                    };\n                }\n                catch (error) {\n                    console.error(`이미지 ${index} 업로드 실패:`, error);\n                    return {\n                        success: false,\n                        error: error.message,\n                        originalName: image.originalname,\n                    };\n                }\n            }));\n            const failedUploads = uploadResults.filter((result) => !result.success);\n            if (failedUploads.length > 0) {\n                throw new Error(`이미지 업로드 실패: ${failedUploads.map((f) => f.originalName).join(', ')}`);\n            }\n            const analysisResults = await Promise.all(uploadResults.map(async (uploadResult, index) => {\n                try {\n                    console.log(`이미지 ${index + 1} AI 분석 시작: ${uploadResult.imageUrl}`);\n                    const imageBase64 = await this.imageUrlToBase64(uploadResult.imageUrl);\n                    const analysisResult = await this.aiService.analyzeImageRelevance(imageBase64, challenge.title, challenge.introduce, challenge.verificationGuide);\n                    console.log(`이미지 ${index + 1} AI 분석 완료: ${analysisResult.suggestedAction} (신뢰도: ${analysisResult.confidence}%)`);\n                    return {\n                        imageUrl: uploadResult.imageUrl,\n                        originalName: uploadResult.originalName,\n                        analysis: analysisResult,\n                        success: true,\n                    };\n                }\n                catch (error) {\n                    console.error(`이미지 ${index + 1} AI 분석 실패:`, error);\n                    return {\n                        imageUrl: uploadResult.imageUrl,\n                        originalName: uploadResult.originalName,\n                        analysis: {\n                            isRelevant: false,\n                            confidence: 0,\n                            reasoning: `분석 실패: ${error.message}`,\n                            suggestedAction: 'reject',\n                        },\n                        success: false,\n                        error: error.message,\n                    };\n                }\n            }));\n            const overallResult = this.aiService.getFinalVerificationResult(analysisResults.map((r) => r.analysis));\n            const verificationToken = this.jwtService.sign({\n                userUuid,\n                challengeUuid,\n                imageUrls: analysisResults.map((r) => r.imageUrl),\n                timestamp: Date.now(),\n            }, { expiresIn: '10m' });\n            const response = {\n                success: true,\n                message: '이미지 검증 완료',\n                challengeInfo: {\n                    challengeUuid: challenge.challengeUuid,\n                    title: challenge.title,\n                    verificationGuide: challenge.verificationGuide,\n                },\n                verification: {\n                    overallStatus: overallResult.overallResult,\n                    averageConfidence: Math.round(overallResult.averageConfidence),\n                    totalImages: analysisResults.length,\n                    approvedImages: analysisResults.filter((r) => r.analysis.suggestedAction === 'approve').length,\n                    rejectedImages: analysisResults.filter((r) => r.analysis.suggestedAction === 'reject').length,\n                    reviewImages: 0,\n                },\n                images: analysisResults.map((result) => ({\n                    imageUrl: result.imageUrl,\n                    originalName: result.originalName,\n                    status: result.analysis.suggestedAction,\n                    confidence: result.analysis.confidence,\n                    reasoning: result.analysis.reasoning,\n                    isRelevant: result.analysis.isRelevant,\n                })),\n                verificationToken,\n                canCreatePost: overallResult.overallResult === 'approved',\n                recommendations: this.getRecommendations(overallResult.overallResult, analysisResults),\n            };\n            return response;\n        }\n        catch (error) {\n            console.error('이미지 사전 검증 실패:', error);\n            return {\n                success: false,\n                message: error.message || '이미지 검증 중 오류가 발생했습니다.',\n                canCreatePost: false,\n            };\n        }\n    }\n    async createVerifiedPost(createVerifiedPostDto, userUuid) {\n        try {\n            const tokenPayload = this.jwtService.verify(createVerifiedPostDto.verificationToken);\n            if (tokenPayload.userUuid !== userUuid) {\n                throw new Error('유효하지 않은 검증 토큰입니다.');\n            }\n            if (tokenPayload.challengeUuid !== createVerifiedPostDto.challengeUuid) {\n                throw new Error('챌린지 정보가 일치하지 않습니다.');\n            }\n            const postUuid = (0, ulid_1.ulid)();\n            const post = this.postRepository.create({\n                postUuid,\n                userUuid,\n                challengeUuid: createVerifiedPostDto.challengeUuid,\n                title: createVerifiedPostDto.title,\n                content: createVerifiedPostDto.content,\n                imageUrl: createVerifiedPostDto.verifiedImageUrls,\n                isPublic: createVerifiedPostDto.isPublic ?? true,\n                verificationStatus: 'approved',\n                aiConfidence: 100,\n                verifiedAt: new Date(),\n                createdAt: new Date(),\n            });\n            const savedPost = await this.postRepository.save(post);\n            return {\n                success: true,\n                message: '게시글이 성공적으로 생성되었습니다.',\n                post: savedPost,\n            };\n        }\n        catch (error) {\n            console.error('검증된 게시글 생성 실패:', error);\n            throw new Error(`게시글 생성 실패: ${error.message}`);\n        }\n    }\n    getRecommendations(overallResult, analysisResults) {\n        const recommendations = [];\n        if (overallResult === 'approved') {\n            recommendations.push('모든 이미지가 챌린지와 관련이 있습니다.');\n            recommendations.push('이제 게시글을 작성하실 수 있습니다.');\n        }\n        else if (overallResult === 'rejected') {\n            recommendations.push('일부 이미지가 챌린지와 관련이 없습니다.');\n            const rejectedImages = analysisResults.filter((r) => r.analysis.suggestedAction === 'reject');\n            if (rejectedImages.length > 0) {\n                recommendations.push(`관련성이 낮은 이미지: ${rejectedImages.map((r) => r.originalName).join(', ')}`);\n            }\n            recommendations.push('챌린지 가이드에 맞는 이미지로 다시 촬영해주세요.');\n        }\n        else {\n            recommendations.push('일부 이미지가 명확하지 않습니다.');\n            recommendations.push('더 명확한 사진을 촬영하거나, 관리자 검토를 기다려주세요.');\n        }\n        return recommendations;\n    }\n    async createPost(dto, userUuid) {\n        const newPost = this.postRepository.create({\n            postUuid: (0, ulid_1.ulid)(),\n            title: dto.title,\n            userUuid,\n            challengeUuid: dto.challengeUuid,\n            content: dto.content,\n            imageUrl: dto.imageUrl,\n            isPublic: dto.isPublic ?? true,\n            verificationStatus: dto.challengeUuid ? 'pending' : 'approved',\n        });\n        await this.postRepository.save(newPost);\n        return {\n            message: '게시물이 생성되었습니다.',\n            post: newPost,\n        };\n    }\n    async updatePost(postUuid, dto, userUuid) {\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n        });\n        if (!post) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_NOT_FOUND, '해당 게시글이 없습니다.');\n        }\n        if (post.userUuid !== userUuid) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_ACCESS_DENIED, '해당 포스트에 접근할 수 없습니다.');\n        }\n        if (dto.title !== undefined)\n            post.title = dto.title;\n        if (dto.content !== undefined)\n            post.content = dto.content;\n        if (dto.imageUrl !== undefined)\n            post.imageUrl = dto.imageUrl;\n        if (dto.isPublic !== undefined)\n            post.isPublic = dto.isPublic;\n        await this.postRepository.save(post);\n        return {\n            message: '게시글이 수정되었습니다.',\n            post,\n        };\n    }\n    async getPostsByUserUuid(userUuid, page = 1, limit = 10) {\n        const [posts, total] = await this.postRepository.findAndCount({\n            where: { userUuid },\n            order: { createdAt: 'DESC' },\n            skip: (page - 1) * limit,\n            take: limit,\n        });\n        return {\n            message: '사용자 게시글 조회 성공',\n            total,\n            page,\n            limit,\n            posts,\n        };\n    }\n    async getUserPosts(userUuid, page, limit) {\n        const [posts, total] = await this.postRepository.findAndCount({\n            where: { userUuid },\n            order: { createdAt: 'DESC' },\n            skip: (page - 1) * limit,\n            take: limit,\n        });\n        return {\n            message: '사용자 게시글 목록 조회 성공',\n            total,\n            page,\n            limit,\n            posts,\n        };\n    }\n    async getPostDetail(postUuid, userUuid) {\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n        });\n        if (!post) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_NOT_FOUND, '해당 게시글을 찾을 수 없습니다.');\n        }\n        post.views += 1;\n        await this.postRepository.save(post);\n        const user = await this.userRepository.findOne({\n            where: { userUuid: post.userUuid },\n            select: ['userUuid', 'nickname', 'profileImage'],\n        });\n        const likeCount = await this.likeRepository.count({\n            where: { postUuid },\n        });\n        const liked = await this.likeRepository.findOne({\n            where: { postUuid, userUuid },\n        });\n        const suspicionCount = await this.suspicionRepository.count({\n            where: { postUuid },\n        });\n        const suspicious = await this.suspicionRepository.findOne({\n            where: { postUuid, userUuid },\n        });\n        return {\n            message: '게시글 상세 조회 성공',\n            post: {\n                id: post.id,\n                postUuid: post.postUuid,\n                title: post.title,\n                challengeUuid: post.challengeUuid,\n                content: post.content,\n                imageUrl: post.imageUrl,\n                isPublic: post.isPublic,\n                createdAt: post.createdAt,\n                updatedAt: post.updatedAt,\n                userUuid: post.userUuid,\n                isMine: post.userUuid === userUuid,\n                views: post.views,\n                user: user\n                    ? {\n                        userUuid: user.userUuid,\n                        nickname: user.nickname,\n                        profileImage: user.profileImage,\n                    }\n                    : null,\n                likeCount,\n                isLiked: !!liked,\n                suspicionCount,\n                isSuspicious: !!suspicious,\n            },\n        };\n    }\n    async deletePost(postUuid, userUuid) {\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n        });\n        if (!post) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_NOT_FOUND, '해당 게시글을 찾을 수 없습니다.');\n        }\n        if (post.userUuid !== userUuid) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_ACCESS_DENIED, '해당 게시글을 삭제할 권한이 없습니다.');\n        }\n        await this.postRepository.remove(post);\n        return {\n            message: '게시글이 삭제되었습니다.',\n        };\n    }\n    async getPostsByChallenge(challengeUuid, page, limit) {\n        const [posts, total] = await this.postRepository.findAndCount({\n            where: { challengeUuid },\n            order: { createdAt: 'DESC' },\n            skip: (page - 1) * limit,\n            take: limit,\n        });\n        const postUuids = posts.map((post) => post.postUuid);\n        if (postUuids.length === 0) {\n            return {\n                message: '챌린지 게시글 목록 조회 성공',\n                total,\n                page,\n                limit,\n                posts: [],\n            };\n        }\n        const likeCounts = await this.likesService.getLikeCountsByPostIds(postUuids);\n        const commentCountsArray = await this.commentRepository\n            .createQueryBuilder('comment')\n            .select('comment.postUuid', 'postUuid')\n            .addSelect('COUNT(comment.id)', 'count')\n            .where('comment.postUuid IN (:...postUuids)', { postUuids })\n            .groupBy('comment.postUuid')\n            .getRawMany();\n        const commentCounts = new Map();\n        commentCountsArray.forEach((c) => commentCounts.set(c.postUuid, parseInt(c.count)));\n        const postsWithUserAndLike = await Promise.all(posts.map(async (post) => {\n            const user = await this.userRepository.findOne({\n                where: { userUuid: post.userUuid },\n                select: ['userUuid', 'nickname', 'profileImage'],\n            });\n            return {\n                ...post,\n                user: user\n                    ? {\n                        userUuid: user.userUuid,\n                        nickname: user.nickname,\n                        profileImage: user.profileImage,\n                    }\n                    : null,\n                likeCount: likeCounts.get(post.postUuid) || 0,\n                commentCount: commentCounts.get(post.postUuid) || 0,\n            };\n        }));\n        return {\n            message: '챌린지 게시글 목록 조회 성공',\n            total,\n            page,\n            limit,\n            posts: postsWithUserAndLike,\n        };\n    }\n    async getUserCalendar(userUuid, year, month) {\n        const posts = await this.postRepository.find({\n            where: {\n                userUuid,\n                createdAt: (0, typeorm_2.Between)(new Date(`${year}-${month}-01`), new Date(`${year}-${month}-31`)),\n            },\n            select: ['postUuid', 'imageUrl', 'createdAt'],\n        });\n        const grouped = posts.reduce((acc, post) => {\n            const date = post.createdAt.toISOString().split('T')[0];\n            if (!acc[date])\n                acc[date] = [];\n            acc[date].push({\n                postUuid: post.postUuid,\n                imageUrl: post.imageUrl,\n            });\n            return acc;\n        }, {});\n        return Object.entries(grouped).map(([date, posts]) => ({\n            date,\n            posts,\n        }));\n    }\n    async reportSuspiciousPost(userUuid, postUuid) {\n        const existing = await this.suspicionRepository.findOne({\n            where: { userUuid, postUuid },\n        });\n        if (existing) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.ALREADY_REPORTED, '이미 의심한 게시글입니다.');\n        }\n        const report = this.suspicionRepository.create({ userUuid, postUuid });\n        await this.suspicionRepository.save(report);\n        return { message: '의심하기 완료' };\n    }\n    async imageUrlToBase64(imageUrl) {\n        try {\n            const response = await axios_1.default.get(imageUrl, {\n                responseType: 'arraybuffer',\n                timeout: 10000,\n                headers: {\n                    'User-Agent': 'Mozilla/5.0 (compatible; SOAPFT-Bot/1.0)',\n                },\n            });\n            const base64 = Buffer.from(response.data, 'binary').toString('base64');\n            return base64;\n        }\n        catch (error) {\n            console.error('이미지 다운로드 실패:', imageUrl, error);\n            throw new Error(`이미지를 다운로드할 수 없습니다: ${imageUrl}`);\n        }\n    }\n    async getPostVerificationStatus(postUuid) {\n        const post = await this.postRepository.findOne({\n            where: { postUuid },\n            select: [\n                'postUuid',\n                'verificationStatus',\n                'aiConfidence',\n                'aiAnalysisResult',\n                'verifiedAt',\n            ],\n        });\n        if (!post) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.POST_NOT_FOUND, '해당 게시글을 찾을 수 없습니다.');\n        }\n        const imageVerifications = await this.imageVerificationRepository.find({\n            where: { postUuid },\n            order: { createdAt: 'ASC' },\n        });\n        return {\n            message: '검증 상태 조회 성공',\n            verification: {\n                postUuid: post.postUuid,\n                status: post.verificationStatus,\n                confidence: post.aiConfidence,\n                verifiedAt: post.verifiedAt,\n                analysisResult: post.aiAnalysisResult\n                    ? JSON.parse(post.aiAnalysisResult)\n                    : null,\n                imageVerifications,\n            },\n        };\n    }\n};\nexports.PostsService = PostsService;\nexports.PostsService = PostsService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(post_entity_1.Post)),\n    __param(1, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __param(2, (0, typeorm_1.InjectRepository)(comment_entity_1.Comment)),\n    __param(3, (0, typeorm_1.InjectRepository)(suspicion_entity_1.Suspicion)),\n    __param(4, (0, typeorm_1.InjectRepository)(like_entity_1.Like)),\n    __param(5, (0, typeorm_1.InjectRepository)(image_verification_entity_1.ImageVerification)),\n    __param(6, (0, typeorm_1.InjectRepository)(challenge_entity_1.Challenge)),\n    __param(8, (0, common_1.Inject)((0, common_1.forwardRef)(() => comments_service_1.CommentsService))),\n    __param(9, (0, common_1.Inject)((0, common_1.forwardRef)(() => challenge_service_1.ChallengeService))),\n    __metadata(\"design:paramtypes\", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        likes_service_1.LikesService,\n        comments_service_1.CommentsService,\n        challenge_service_1.ChallengeService,\n        users_service_1.UsersService,\n        ai_service_1.AiService,\n        s3_service_1.S3Service,\n        jwt_1.JwtService])\n], PostsService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/posts/posts.service.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/s3/s3.controller.ts':
      /*!*****************************************!*\
  !*** ./src/modules/s3/s3.controller.ts ***!
  \*****************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.S3Controller = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst s3_service_1 = __webpack_require__(/*! ./s3.service */ "./src/modules/s3/s3.service.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nlet S3Controller = class S3Controller {\n    constructor(s3Service) {\n        this.s3Service = s3Service;\n    }\n};\nexports.S3Controller = S3Controller;\nexports.S3Controller = S3Controller = __decorate([\n    (0, swagger_1.ApiTags)(\'s3\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'s3\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [s3_service_1.S3Service])\n], S3Controller);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/s3/s3.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/s3/s3.module.ts':
      /*!*************************************!*\
  !*** ./src/modules/s3/s3.module.ts ***!
  \*************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.S3Module = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst s3_service_1 = __webpack_require__(/*! ./s3.service */ "./src/modules/s3/s3.service.ts");\nconst s3_controller_1 = __webpack_require__(/*! ./s3.controller */ "./src/modules/s3/s3.controller.ts");\nconst config_1 = __webpack_require__(/*! @nestjs/config */ "@nestjs/config");\nlet S3Module = class S3Module {\n};\nexports.S3Module = S3Module;\nexports.S3Module = S3Module = __decorate([\n    (0, common_1.Module)({\n        imports: [config_1.ConfigModule],\n        controllers: [s3_controller_1.S3Controller],\n        providers: [s3_service_1.S3Service],\n        exports: [s3_service_1.S3Service],\n    })\n], S3Module);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/s3/s3.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/s3/s3.service.ts':
      /*!**************************************!*\
  !*** ./src/modules/s3/s3.service.ts ***!
  \**************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.S3Service = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst config_1 = __webpack_require__(/*! @nestjs/config */ "@nestjs/config");\nconst client_s3_1 = __webpack_require__(/*! @aws-sdk/client-s3 */ "@aws-sdk/client-s3");\nconst lib_storage_1 = __webpack_require__(/*! @aws-sdk/lib-storage */ "@aws-sdk/lib-storage");\nconst winston_1 = __webpack_require__(/*! winston */ "winston");\nconst uuid_1 = __webpack_require__(/*! uuid */ "uuid");\nlet S3Service = class S3Service {\n    constructor(configService) {\n        this.configService = configService;\n        this.bucketName = this.configService.get(\'AWS_S3_BUCKET\');\n        this.s3 = new client_s3_1.S3Client({\n            credentials: {\n                accessKeyId: this.configService.get(\'AWS_ACCESS_KEY_ID\'),\n                secretAccessKey: this.configService.get(\'AWS_SECRET_ACCESS_KEY\'),\n            },\n            region: this.configService.get(\'AWS_REGION\'),\n        });\n    }\n    async uploadImage(file) {\n        try {\n            const fileExtension = file.originalname.split(\'.\').pop();\n            const fileName = `${(0, uuid_1.v4)()}.${fileExtension}`;\n            const upload = new lib_storage_1.Upload({\n                client: this.s3,\n                params: {\n                    Bucket: this.bucketName,\n                    Key: `images/${fileName}`,\n                    Body: file.buffer,\n                    ContentType: file.mimetype,\n                    ACL: \'public-read\',\n                },\n            });\n            const result = await upload.done();\n            const location = `https://${this.bucketName}.s3.amazonaws.com/images/${fileName}`;\n            this.logger.info(\'이미지 업로드 성공\', { location });\n            return location;\n        }\n        catch (error) {\n            this.logger.error(\'이미지 업로드 실패\', { error: error.message });\n            throw error;\n        }\n    }\n    async deleteImage(imageUrl) {\n        try {\n            const key = imageUrl.split(\'/\').slice(3).join(\'/\');\n            const command = new client_s3_1.DeleteObjectCommand({\n                Bucket: this.bucketName,\n                Key: key,\n            });\n            await this.s3.send(command);\n            this.logger.info(\'이미지 삭제 성공\', { key });\n        }\n        catch (error) {\n            this.logger.error(\'이미지 삭제 실패\', { error: error.message });\n            throw error;\n        }\n    }\n};\nexports.S3Service = S3Service;\n__decorate([\n    (0, common_1.Inject)(\'winston\'),\n    __metadata("design:type", winston_1.Logger)\n], S3Service.prototype, "logger", void 0);\nexports.S3Service = S3Service = __decorate([\n    (0, common_1.Injectable)(),\n    __metadata("design:paramtypes", [config_1.ConfigService])\n], S3Service);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/s3/s3.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/uploads/decorators/uploads.swagger.ts':
      /*!***********************************************************!*\
  !*** ./src/modules/uploads/decorators/uploads.swagger.ts ***!
  \***********************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiUploadImage = ApiUploadImage;\nexports.ApiDeleteImage = ApiDeleteImage;\nexports.ApiUploadMultipleImages = ApiUploadMultipleImages;\nexports.ApiGetUploadHistory = ApiGetUploadHistory;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nfunction ApiUploadImage() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '이미지 업로드',\n        description: 'S3 Bucket에 이미지 파일을 업로드합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiConsumes)('multipart/form-data'), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            properties: {\n                image: {\n                    type: 'string',\n                    format: 'binary',\n                    description: '업로드할 이미지 파일 (jpg, jpeg, png, gif만 가능)',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '이미지가 성공적으로 업로드됨',\n        schema: {\n            type: 'object',\n            properties: {\n                imageUrl: {\n                    type: 'string',\n                    example: 'https://soapft-bucket.s3.amazonaws.com/images/example-image.jpg',\n                },\n                message: {\n                    type: 'string',\n                    example: '이미지가 업로드되었습니다.',\n                },\n                fileName: {\n                    type: 'string',\n                    example: 'example-image.jpg',\n                },\n                fileSize: {\n                    type: 'number',\n                    example: 1024000,\n                },\n                uploadedAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_001', '지원하지 않는 파일 형식입니다.', 400, {\n        allowedTypes: ['jpg', 'jpeg', 'png', 'gif'],\n    })), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_002', '파일 크기가 너무 큽니다.', 413, {\n        maxSize: '10MB',\n    })), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_003', '파일 업로드에 실패했습니다.', 500)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiDeleteImage() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '이미지 삭제',\n        description: '업로드된 이미지를 S3에서 삭제합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiParam)({\n        name: 'imageUrl',\n        description: '삭제할 이미지 URL (URL 인코딩 필요)',\n        required: true,\n        example: 'https%3A%2F%2Fsoapft-bucket.s3.amazonaws.com%2Fimages%2Fexample-image.jpg',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '이미지가 성공적으로 삭제됨',\n        schema: {\n            type: 'object',\n            properties: {\n                message: {\n                    type: 'string',\n                    example: '이미지가 삭제되었습니다.',\n                },\n                deletedUrl: {\n                    type: 'string',\n                    example: 'https://soapft-bucket.s3.amazonaws.com/images/example-image.jpg',\n                },\n                deletedAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_004', '파일을 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_005', '파일 삭제에 실패했습니다.', 500)), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_006', '파일 삭제 권한이 없습니다.', 403)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Forbidden), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiUploadMultipleImages() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '다중 이미지 업로드',\n        description: '여러 개의 이미지 파일을 한 번에 업로드합니다. (최대 10개)',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiConsumes)('multipart/form-data'), (0, swagger_1.ApiBody)({\n        schema: {\n            type: 'object',\n            properties: {\n                images: {\n                    type: 'array',\n                    items: {\n                        type: 'string',\n                        format: 'binary',\n                    },\n                    description: '업로드할 이미지 파일들 (최대 10개)',\n                    maxItems: 10,\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '이미지들이 성공적으로 업로드됨',\n        schema: {\n            type: 'object',\n            properties: {\n                imageUrls: {\n                    type: 'array',\n                    items: {\n                        type: 'string',\n                    },\n                    example: [\n                        'https://soapft-bucket.s3.amazonaws.com/images/image1.jpg',\n                        'https://soapft-bucket.s3.amazonaws.com/images/image2.jpg',\n                    ],\n                },\n                message: {\n                    type: 'string',\n                    example: '2개의 이미지가 업로드되었습니다.',\n                },\n                uploadCount: {\n                    type: 'number',\n                    example: 2,\n                },\n                totalSize: {\n                    type: 'number',\n                    example: 2048000,\n                },\n                uploadedAt: {\n                    type: 'string',\n                    format: 'date-time',\n                    example: '2025-06-22T12:00:00Z',\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_001', '지원하지 않는 파일 형식입니다.', 400, {\n        allowedTypes: ['jpg', 'jpeg', 'png', 'gif'],\n    })), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_002', '파일 크기가 너무 큽니다.', 413, {\n        maxSize: '10MB',\n    })), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_007', '업로드 파일 개수가 초과되었습니다.', 400, { maxFiles: 10 })), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('FILE_003', '파일 업로드에 실패했습니다.', 500)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetUploadHistory() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '업로드 기록 조회',\n        description: '사용자가 업로드한 이미지들의 기록을 조회합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '업로드 기록 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                uploads: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            id: { type: 'number', example: 123 },\n                            imageUrl: {\n                                type: 'string',\n                                example: 'https://soapft-bucket.s3.amazonaws.com/images/example.jpg',\n                            },\n                            fileName: { type: 'string', example: 'example.jpg' },\n                            fileSize: { type: 'number', example: 1024000 },\n                            mimeType: { type: 'string', example: 'image/jpeg' },\n                            uploadedAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                            isUsed: { type: 'boolean', example: true },\n                            usedIn: {\n                                type: 'object',\n                                properties: {\n                                    type: { type: 'string', example: 'post' },\n                                    id: {\n                                        type: 'string',\n                                        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                    },\n                                },\n                            },\n                        },\n                    },\n                },\n                totalCount: { type: 'number', example: 25 },\n                totalSize: { type: 'number', example: 52428800 },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 401,\n        description: '인증되지 않은 사용자',\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/uploads/decorators/uploads.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/uploads/dto/delete-image-param.dto.ts':
      /*!***********************************************************!*\
  !*** ./src/modules/uploads/dto/delete-image-param.dto.ts ***!
  \***********************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.DeleteImageParamDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nclass DeleteImageParamDto {\n}\nexports.DeleteImageParamDto = DeleteImageParamDto;\n__decorate([\n    (0, class_validator_1.IsNotEmpty)(),\n    (0, class_validator_1.IsString)(),\n    __metadata("design:type", String)\n], DeleteImageParamDto.prototype, "ImageUrl", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/uploads/dto/delete-image-param.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/uploads/uploads.controller.ts':
      /*!***************************************************!*\
  !*** ./src/modules/uploads/uploads.controller.ts ***!
  \***************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UploadsController = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst uploads_service_1 = __webpack_require__(/*! ./uploads.service */ "./src/modules/uploads/uploads.service.ts");\nconst winston_1 = __webpack_require__(/*! winston */ "winston");\nconst s3_service_1 = __webpack_require__(/*! ../s3/s3.service */ "./src/modules/s3/s3.service.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst delete_image_param_dto_1 = __webpack_require__(/*! ./dto/delete-image-param.dto */ "./src/modules/uploads/dto/delete-image-param.dto.ts");\nconst file_interceptor_decorator_1 = __webpack_require__(/*! @/decorators/file-interceptor.decorator */ "./src/decorators/file-interceptor.decorator.ts");\nconst uploads_swagger_1 = __webpack_require__(/*! ./decorators/uploads.swagger */ "./src/modules/uploads/decorators/uploads.swagger.ts");\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nlet UploadsController = class UploadsController {\n    constructor(uploadsService, logger, s3Service) {\n        this.uploadsService = uploadsService;\n        this.logger = logger;\n        this.s3Service = s3Service;\n    }\n    async uploadImage(file) {\n        if (!file) {\n            throw new common_1.BadRequestException(\'이미지 파일을 제공해주세요.\');\n        }\n        try {\n            this.logger.info(`이미지 업로드 시작: ${file.originalname}`);\n            const imageUrl = await this.s3Service.uploadImage(file);\n            this.logger.info(`이미지 업로드 완료: ${imageUrl}`);\n            return { message: \'이미지가 업로드되었습니다.\', imageUrl };\n        }\n        catch (error) {\n            this.logger.error(`이미지 업로드 실패 - ${error.message}`);\n            throw new common_1.BadRequestException(`이미지 업로드 실패: ${error.message}`);\n        }\n    }\n    async deleteImage(params) {\n        try {\n            this.logger.info(`이미지 삭제 시작: ${params.ImageUrl}`);\n            await this.s3Service.deleteImage(params.ImageUrl);\n            this.logger.info(`이미지 삭제 완료: ${params.ImageUrl}`);\n            return {\n                message: \'이미지가 삭제되었습니다.\',\n            };\n        }\n        catch (error) {\n            this.logger.error(`이미지 삭제 실패 - ${error.message}`);\n            throw new common_1.BadRequestException(`이미지 삭제 실패: ${error.message}`);\n        }\n    }\n};\nexports.UploadsController = UploadsController;\n__decorate([\n    (0, common_1.Post)(\'image\'),\n    (0, uploads_swagger_1.ApiUploadImage)(),\n    (0, file_interceptor_decorator_1.ImageFileInterceptor)(\'image\'),\n    __param(0, (0, common_1.UploadedFile)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [Object]),\n    __metadata("design:returntype", Promise)\n], UploadsController.prototype, "uploadImage", null);\n__decorate([\n    (0, common_1.Delete)(\'image/:url\'),\n    (0, uploads_swagger_1.ApiDeleteImage)(),\n    __param(0, (0, common_1.Param)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [delete_image_param_dto_1.DeleteImageParamDto]),\n    __metadata("design:returntype", Promise)\n], UploadsController.prototype, "deleteImage", null);\nexports.UploadsController = UploadsController = __decorate([\n    (0, swagger_1.ApiTags)(\'upload\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'upload\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __param(1, (0, common_1.Inject)(\'winston\')),\n    __metadata("design:paramtypes", [uploads_service_1.UploadsService,\n        winston_1.Logger,\n        s3_service_1.S3Service])\n], UploadsController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/uploads/uploads.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/uploads/uploads.module.ts':
      /*!***********************************************!*\
  !*** ./src/modules/uploads/uploads.module.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UploadsModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst uploads_service_1 = __webpack_require__(/*! ./uploads.service */ "./src/modules/uploads/uploads.service.ts");\nconst uploads_controller_1 = __webpack_require__(/*! ./uploads.controller */ "./src/modules/uploads/uploads.controller.ts");\nconst s3_module_1 = __webpack_require__(/*! ../s3/s3.module */ "./src/modules/s3/s3.module.ts");\nlet UploadsModule = class UploadsModule {\n};\nexports.UploadsModule = UploadsModule;\nexports.UploadsModule = UploadsModule = __decorate([\n    (0, common_1.Module)({\n        imports: [s3_module_1.S3Module],\n        controllers: [uploads_controller_1.UploadsController],\n        providers: [uploads_service_1.UploadsService],\n        exports: [uploads_service_1.UploadsService],\n    })\n], UploadsModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/uploads/uploads.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/uploads/uploads.service.ts':
      /*!************************************************!*\
  !*** ./src/modules/uploads/uploads.service.ts ***!
  \************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UploadsService = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nlet UploadsService = class UploadsService {\n};\nexports.UploadsService = UploadsService;\nexports.UploadsService = UploadsService = __decorate([\n    (0, common_1.Injectable)()\n], UploadsService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/uploads/uploads.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/users/decorators/users.swagger.ts':
      /*!*******************************************************!*\
  !*** ./src/modules/users/decorators/users.swagger.ts ***!
  \*******************************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiOnboarding = ApiOnboarding;\nexports.ApiGetUserInfo = ApiGetUserInfo;\nexports.ApiUpdateProfile = ApiUpdateProfile;\nexports.ApiLogout = ApiLogout;\nexports.ApiGetUserPosts = ApiGetUserPosts;\nexports.ApiGetOtherUserInfo = ApiGetOtherUserInfo;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ \"@nestjs/swagger\");\nconst swagger_decorator_1 = __webpack_require__(/*! ../../../decorators/swagger.decorator */ \"./src/decorators/swagger.decorator.ts\");\nconst onBoarding_dto_1 = __webpack_require__(/*! ../dto/onBoarding.dto */ \"./src/modules/users/dto/onBoarding.dto.ts\");\nconst update_profile_dto_1 = __webpack_require__(/*! ../dto/update-profile.dto */ \"./src/modules/users/dto/update-profile.dto.ts\");\nfunction ApiOnboarding() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '온보딩 정보 입력',\n        description: '회원가입 후 추가 정보(닉네임, 성별, 나이)를 입력합니다.',\n    }), (0, swagger_1.ApiBody)({\n        type: onBoarding_dto_1.OnBoardingDto,\n    }), (0, swagger_1.ApiResponse)({\n        status: 201,\n        description: '회원가입 완료',\n        schema: {\n            type: 'object',\n            properties: {\n                statusCode: { type: 'number', example: 201 },\n                message: { type: 'string', example: '회원가입 완료' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('USER_001', '해당 사용자를 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetUserInfo() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자 정보 조회',\n        description: '사용자의 닉네임, 프로필 이미지, 소개글, UUID를 조회합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '사용자 정보 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                userName: { type: 'string', example: '홍길동' },\n                userImage: {\n                    type: 'string',\n                    example: 'https://example.com/profile.jpg',\n                },\n                userIntroduction: { type: 'string', example: '안녕하세요!' },\n                userUuid: { type: 'string', example: '01HZQ...' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('USER_001', '해당 사용자를 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiUpdateProfile() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '프로필 수정',\n        description: '사용자의 닉네임, 소개글, 프로필 이미지를 수정합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiBody)({ type: update_profile_dto_1.UpdateProfileDto }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '프로필 수정 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '프로필이 수정되었습니다.' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)((0, swagger_decorator_1.createErrorResponse)('USER_001', '해당 사용자를 찾을 수 없습니다.', 404)), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.ValidationFailed), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiLogout() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '로그아웃',\n        description: '사용자를 로그아웃합니다.',\n    }), (0, swagger_1.ApiBearerAuth)(), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '로그아웃 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                message: { type: 'string', example: '로그아웃 성공' },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonAuthResponses.Unauthorized), (0, swagger_1.ApiResponse)(swagger_decorator_1.CommonErrorResponses.InternalServerError));\n}\nfunction ApiGetUserPosts() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '사용자 인증글 조회',\n        description: '특정 사용자가 작성한 인증글 목록을 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'userUuid',\n        description: '사용자 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiQuery)({\n        name: 'page',\n        required: false,\n        description: '페이지 번호 (기본값: 1)',\n        example: 1,\n    }), (0, swagger_1.ApiQuery)({\n        name: 'limit',\n        required: false,\n        description: '페이지당 항목 수 (기본값: 10)',\n        example: 10,\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '사용자 인증글 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                user: {\n                    type: 'object',\n                    properties: {\n                        userUuid: {\n                            type: 'string',\n                            example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                        },\n                        nickname: { type: 'string', example: '운동러버' },\n                        profileImage: {\n                            type: 'string',\n                            example: 'https://example.com/profile.jpg',\n                        },\n                        introduction: {\n                            type: 'string',\n                            example: '건강한 삶을 추구하는 운동 애호가입니다!',\n                        },\n                    },\n                },\n                posts: {\n                    type: 'array',\n                    items: {\n                        type: 'object',\n                        properties: {\n                            postUuid: {\n                                type: 'string',\n                                example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                            },\n                            content: {\n                                type: 'string',\n                                example: '오늘 헬스장에서 2시간 운동했어요! 💪',\n                            },\n                            imageUrl: {\n                                type: 'array',\n                                items: { type: 'string' },\n                                example: [\n                                    'https://soapft-bucket.s3.amazonaws.com/images/workout1.jpg',\n                                ],\n                            },\n                            challenge: {\n                                type: 'object',\n                                properties: {\n                                    challengeUuid: {\n                                        type: 'string',\n                                        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n                                    },\n                                    title: { type: 'string', example: '30일 헬스 챌린지' },\n                                },\n                            },\n                            likeCount: { type: 'number', example: 15 },\n                            commentCount: { type: 'number', example: 3 },\n                            createdAt: {\n                                type: 'string',\n                                format: 'date-time',\n                                example: '2025-06-22T12:00:00Z',\n                            },\n                        },\n                    },\n                },\n                pagination: {\n                    type: 'object',\n                    properties: {\n                        currentPage: { type: 'number', example: 1 },\n                        totalPages: { type: 'number', example: 5 },\n                        totalItems: { type: 'number', example: 50 },\n                        itemsPerPage: { type: 'number', example: 10 },\n                    },\n                },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '사용자를 찾을 수 없음',\n    }));\n}\nfunction ApiGetOtherUserInfo() {\n    return (0, common_1.applyDecorators)((0, swagger_1.ApiOperation)({\n        summary: '다른 사용자 정보 조회',\n        description: '특정 사용자의 닉네임, 프로필 이미지, 소개글, 게시글 수, 친구 수를 조회합니다.',\n    }), (0, swagger_1.ApiParam)({\n        name: 'userUuid',\n        description: '조회할 사용자 UUID',\n        example: '01HZQK5J8X2M3N4P5Q6R7S8T9V',\n    }), (0, swagger_1.ApiResponse)({\n        status: 200,\n        description: '사용자 정보 조회 성공',\n        schema: {\n            type: 'object',\n            properties: {\n                userName: { type: 'string', example: '상냥한너구리' },\n                userImage: {\n                    type: 'string',\n                    example: 'https://example.com/profile.jpg',\n                },\n                userIntroduction: { type: 'string', example: '안녕하세요!' },\n                userUuid: { type: 'string', example: '01HZQK5J8X2M3N4P5Q6R7S8T9V' },\n                postCount: { type: 'number', example: 5 },\n                friendCount: { type: 'number', example: 10 },\n            },\n        },\n    }), (0, swagger_1.ApiResponse)({\n        status: 404,\n        description: '사용자를 찾을 수 없습니다.',\n        schema: {\n            type: 'object',\n            properties: {\n                errorCode: { type: 'string', example: 'USER_001' },\n                message: {\n                    type: 'string',\n                    example: '해당 사용자를 찾을 수 없습니다.',\n                },\n            },\n        },\n    }));\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/users/decorators/users.swagger.ts?\n}",
        );

        /***/
      },

    /***/ './src/modules/users/dto/onBoarding.dto.ts':
      /*!*************************************************!*\
  !*** ./src/modules/users/dto/onBoarding.dto.ts ***!
  \*************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.OnBoardingDto = void 0;\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst challenge_enum_1 = __webpack_require__(/*! @/types/challenge.enum */ "./src/types/challenge.enum.ts");\nclass OnBoardingDto {\n}\nexports.OnBoardingDto = OnBoardingDto;\n__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, swagger_1.ApiProperty)({\n        description: \'유저 닉네임\',\n        example: \'상냥한너구리\',\n    }),\n    __metadata("design:type", String)\n], OnBoardingDto.prototype, "nickname", void 0);\n__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, swagger_1.ApiProperty)({\n        description: \'성별\',\n        example: \'MALE | FEMALE\',\n    }),\n    __metadata("design:type", String)\n], OnBoardingDto.prototype, "gender", void 0);\n__decorate([\n    (0, class_validator_1.IsString)(),\n    (0, swagger_1.ApiProperty)({\n        description: \'생년월일 (YYYY-MM-DD)\',\n        example: \'1995-06-13\',\n    }),\n    __metadata("design:type", Date)\n], OnBoardingDto.prototype, "birthDate", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/users/dto/onBoarding.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/users/dto/update-profile.dto.ts':
      /*!*****************************************************!*\
  !*** ./src/modules/users/dto/update-profile.dto.ts ***!
  \*****************************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UpdateProfileDto = void 0;\nconst class_validator_1 = __webpack_require__(/*! class-validator */ "class-validator");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nclass UpdateProfileDto {\n}\nexports.UpdateProfileDto = UpdateProfileDto;\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    (0, swagger_1.ApiPropertyOptional)({\n        example: \'홍길동\',\n        description: \'새로운 닉네임\',\n    }),\n    __metadata("design:type", String)\n], UpdateProfileDto.prototype, "newNickname", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    (0, swagger_1.ApiPropertyOptional)({\n        example: \'안녕하세요. 자기소개입니다!\',\n        description: \'새로운 소개글\',\n    }),\n    __metadata("design:type", String)\n], UpdateProfileDto.prototype, "newIntroduction", void 0);\n__decorate([\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    (0, swagger_1.ApiPropertyOptional)({\n        example: \'https://example.com/profile.jpg\',\n        description: \'새로운 프로필 이미지 URL\',\n    }),\n    __metadata("design:type", String)\n], UpdateProfileDto.prototype, "newProfileImg", void 0);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/users/dto/update-profile.dto.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/users/users.controller.ts':
      /*!***********************************************!*\
  !*** ./src/modules/users/users.controller.ts ***!
  \***********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UsersController = void 0;\nconst jwt_auth_guard_1 = __webpack_require__(/*! @/auth/guards/jwt-auth.guard */ "./src/auth/guards/jwt-auth.guard.ts");\nconst user_uuid_decorator_1 = __webpack_require__(/*! @/decorators/user-uuid.decorator */ "./src/decorators/user-uuid.decorator.ts");\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst users_service_1 = __webpack_require__(/*! ./users.service */ "./src/modules/users/users.service.ts");\nconst swagger_1 = __webpack_require__(/*! @nestjs/swagger */ "@nestjs/swagger");\nconst users_swagger_1 = __webpack_require__(/*! ./decorators/users.swagger */ "./src/modules/users/decorators/users.swagger.ts");\nconst update_profile_dto_1 = __webpack_require__(/*! ./dto/update-profile.dto */ "./src/modules/users/dto/update-profile.dto.ts");\nconst onBoarding_dto_1 = __webpack_require__(/*! ./dto/onBoarding.dto */ "./src/modules/users/dto/onBoarding.dto.ts");\nlet UsersController = class UsersController {\n    constructor(usersService) {\n        this.usersService = usersService;\n    }\n    async completeOnboarding(onBoardingDto, UserUuid) {\n        return this.usersService.completeOnboarding(UserUuid, onBoardingDto);\n    }\n    async logout(UserUuid) {\n        return this.usersService.logout(UserUuid);\n    }\n    async updateProfile(updateProfileDto, UserUuid) {\n        return this.usersService.updateProfile(UserUuid, updateProfileDto);\n    }\n    async deleteAccount(UserUuid) {\n        return this.usersService.deleteUser(UserUuid);\n    }\n    async getUserInfo(UserUuid) {\n        return this.usersService.getUserInfo(UserUuid);\n    }\n    async getOtherUserInfo(userUuid, viewerUuid) {\n        return this.usersService.getOtherUserInfo(viewerUuid, userUuid);\n    }\n};\nexports.UsersController = UsersController;\n__decorate([\n    (0, common_1.Post)(\'onboarding\'),\n    (0, users_swagger_1.ApiOnboarding)(),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [onBoarding_dto_1.OnBoardingDto, String]),\n    __metadata("design:returntype", Promise)\n], UsersController.prototype, "completeOnboarding", null);\n__decorate([\n    (0, common_1.Post)(\'logout\'),\n    (0, users_swagger_1.ApiLogout)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], UsersController.prototype, "logout", null);\n__decorate([\n    (0, common_1.Post)(\'profile\'),\n    (0, users_swagger_1.ApiUpdateProfile)(),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __param(0, (0, common_1.Body)()),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [update_profile_dto_1.UpdateProfileDto, String]),\n    __metadata("design:returntype", Promise)\n], UsersController.prototype, "updateProfile", null);\n__decorate([\n    (0, common_1.Delete)(\'member\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], UsersController.prototype, "deleteAccount", null);\n__decorate([\n    (0, common_1.Get)(\'userInfo\'),\n    (0, users_swagger_1.ApiGetUserInfo)(),\n    __param(0, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String]),\n    __metadata("design:returntype", Promise)\n], UsersController.prototype, "getUserInfo", null);\n__decorate([\n    (0, common_1.Get)(\'info/:userUuid\'),\n    (0, users_swagger_1.ApiGetOtherUserInfo)(),\n    __param(0, (0, common_1.Param)(\'userUuid\')),\n    __param(1, (0, user_uuid_decorator_1.UserUuid)()),\n    __metadata("design:type", Function),\n    __metadata("design:paramtypes", [String, String]),\n    __metadata("design:returntype", Promise)\n], UsersController.prototype, "getOtherUserInfo", null);\nexports.UsersController = UsersController = __decorate([\n    (0, swagger_1.ApiTags)(\'user\'),\n    (0, swagger_1.ApiBearerAuth)(\'JWT-auth\'),\n    (0, common_1.Controller)(\'user\'),\n    (0, common_1.UseGuards)(jwt_auth_guard_1.JwtAuthGuard),\n    __metadata("design:paramtypes", [users_service_1.UsersService])\n], UsersController);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/users/users.controller.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/users/users.module.ts':
      /*!*******************************************!*\
  !*** ./src/modules/users/users.module.ts ***!
  \*******************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UsersModule = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst users_controller_1 = __webpack_require__(/*! ./users.controller */ "./src/modules/users/users.controller.ts");\nconst users_service_1 = __webpack_require__(/*! ./users.service */ "./src/modules/users/users.service.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst likes_module_1 = __webpack_require__(/*! ../likes/likes.module */ "./src/modules/likes/likes.module.ts");\nconst auth_entity_1 = __webpack_require__(/*! @/entities/auth.entity */ "./src/entities/auth.entity.ts");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ "./src/entities/post.entity.ts");\nconst posts_module_1 = __webpack_require__(/*! ../posts/posts.module */ "./src/modules/posts/posts.module.ts");\nconst auth_module_1 = __webpack_require__(/*! @/auth/auth.module */ "./src/auth/auth.module.ts");\nconst friendship_entity_1 = __webpack_require__(/*! @/entities/friendship.entity */ "./src/entities/friendship.entity.ts");\nconst friendship_module_1 = __webpack_require__(/*! @/modules/friendship/friendship.module */ "./src/modules/friendship/friendship.module.ts");\nlet UsersModule = class UsersModule {\n};\nexports.UsersModule = UsersModule;\nexports.UsersModule = UsersModule = __decorate([\n    (0, common_1.Module)({\n        imports: [\n            typeorm_1.TypeOrmModule.forFeature([user_entity_1.User, auth_entity_1.Auth, post_entity_1.Post, friendship_entity_1.Friendship]),\n            (0, common_1.forwardRef)(() => likes_module_1.LikesModule),\n            (0, common_1.forwardRef)(() => posts_module_1.PostsModule),\n            (0, common_1.forwardRef)(() => auth_module_1.AuthModule),\n            (0, common_1.forwardRef)(() => friendship_module_1.FriendshipModule),\n        ],\n        controllers: [users_controller_1.UsersController],\n        providers: [users_service_1.UsersService],\n        exports: [users_service_1.UsersService],\n    })\n], UsersModule);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/users/users.module.ts?\n}',
        );

        /***/
      },

    /***/ './src/modules/users/users.service.ts':
      /*!********************************************!*\
  !*** ./src/modules/users/users.service.ts ***!
  \********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UsersService = void 0;\nconst auth_entity_1 = __webpack_require__(/*! @/entities/auth.entity */ "./src/entities/auth.entity.ts");\nconst user_entity_1 = __webpack_require__(/*! @/entities/user.entity */ "./src/entities/user.entity.ts");\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst typeorm_1 = __webpack_require__(/*! @nestjs/typeorm */ "@nestjs/typeorm");\nconst typeorm_2 = __webpack_require__(/*! typeorm */ "typeorm");\nconst post_entity_1 = __webpack_require__(/*! @/entities/post.entity */ "./src/entities/post.entity.ts");\nconst user_status_enum_1 = __webpack_require__(/*! @/types/user-status.enum */ "./src/types/user-status.enum.ts");\nconst custom_exception_1 = __webpack_require__(/*! @/utils/custom-exception */ "./src/utils/custom-exception.ts");\nconst error_code_enum_1 = __webpack_require__(/*! @/types/error-code.enum */ "./src/types/error-code.enum.ts");\nconst friendship_entity_1 = __webpack_require__(/*! @/entities/friendship.entity */ "./src/entities/friendship.entity.ts");\nconst friendship_enum_1 = __webpack_require__(/*! @/types/friendship.enum */ "./src/types/friendship.enum.ts");\nlet UsersService = class UsersService {\n    constructor(userRepository, authRepository, postRepository, friendshipRepository) {\n        this.userRepository = userRepository;\n        this.authRepository = authRepository;\n        this.postRepository = postRepository;\n        this.friendshipRepository = friendshipRepository;\n    }\n    calculateAge(birthDate) {\n        const dateObj = birthDate instanceof Date ? birthDate : new Date(birthDate);\n        const today = new Date();\n        return today.getFullYear() - dateObj.getFullYear() + 1;\n    }\n    findOneBySocialId(socialId) {\n        return this.userRepository.findOneBy({ socialId });\n    }\n    findOneByNickname(nickname) {\n        return this.userRepository.findOneBy({ nickname });\n    }\n    createUser(user, uuid) {\n        const newUser = this.userRepository.create({\n            userUuid: uuid,\n            nickname: user.nickname,\n            socialNickname: user.socialNickname,\n            profileImage: user.profileImage,\n            socialProvider: user.socialProvider,\n            socialId: user.socialId,\n            pushToken: user.pushToken,\n            coins: 20,\n            status: user_status_enum_1.UserStatusType.INCOMPLETE,\n        });\n        return this.userRepository.save(newUser);\n    }\n    async getUserIdByUuid(userUuid) {\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n            select: [\'id\'],\n        });\n        if (!user) {\n            throw new common_1.NotFoundException(`UUID ${userUuid}에 해당하는 사용자를 찾을 수 없습니다.`);\n        }\n        return user.id;\n    }\n    async getUserByUuid(userUuid) {\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n        });\n        if (!user) {\n            throw new common_1.NotFoundException(`UUID ${userUuid}에 해당하는 사용자를 찾을 수 없습니다.`);\n        }\n        return user;\n    }\n    async completeOnboarding(userUuid, dto) {\n        const user = await this.userRepository.findOne({ where: { userUuid } });\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, \'해당 사용자를 찾을 수 없습니다.\');\n        }\n        user.nickname = dto.nickname;\n        user.gender = dto.gender;\n        user.birthDate = dto.birthDate;\n        user.status = user_status_enum_1.UserStatusType.ACTIVE;\n        await this.userRepository.save(user);\n        return {\n            statusCode: 201,\n            message: \'회원가입 완료\',\n        };\n    }\n    async logout(userUuid) {\n        await this.authRepository.update({ userUuid }, {\n            refreshToken: null,\n        });\n        return {\n            message: \'로그아웃 성공\',\n        };\n    }\n    async updateProfile(userUuid, dto) {\n        const { newNickname, newIntroduction, newProfileImg } = dto;\n        const user = await this.userRepository.findOneBy({ userUuid });\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, \'해당 사용자를 찾을 수 없습니다.\');\n        }\n        if (newNickname !== undefined) {\n            user.nickname = newNickname;\n        }\n        if (newIntroduction !== undefined) {\n            user.introduction = newIntroduction;\n        }\n        if (newProfileImg !== undefined) {\n            user.profileImage = newProfileImg;\n        }\n        await this.userRepository.save(user);\n        return { message: \'프로필이 수정되었습니다.\' };\n    }\n    async checkUserExists(userUuid) {\n        const user = await this.userRepository.findOne({ where: { userUuid } });\n        return !!user;\n    }\n    async getUserByIds(idArray) {\n        const users = await Promise.all(idArray.map(async (id) => {\n            const user = await this.userRepository.findOneBy({ userUuid: id });\n            return user;\n        }));\n        return users.filter((user) => user !== null);\n    }\n    async deleteUser(userUuid) {\n        const user = await this.userRepository.findOneBy({ userUuid });\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, \'해당 사용자를 찾을 수 없습니다.\');\n        }\n        user.status = user_status_enum_1.UserStatusType.DELETE;\n        user.nickname = null;\n        user.profileImage = null;\n        await this.userRepository.save(user);\n        return { message: \'회원 탈퇴 성공!\' };\n    }\n    async getUserInfo(userUuid) {\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n        });\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, \'해당 사용자를 찾을 수 없습니다.\');\n        }\n        const postCount = await this.postRepository.count({\n            where: { userUuid },\n        });\n        const friendCount = await this.friendshipRepository.count({\n            where: [\n                { requesterUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n                { addresseeUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n            ],\n        });\n        const age = this.calculateAge(user.birthDate);\n        return {\n            userName: user.nickname,\n            userImage: user.profileImage,\n            userIntroduction: user.introduction,\n            userUuid: user.userUuid,\n            userAge: age,\n            coins: user.coins,\n            postCount,\n            friendCount,\n        };\n    }\n    async getOtherUserInfo(viewerUuid, userUuid) {\n        const user = await this.userRepository.findOne({\n            where: { userUuid },\n        });\n        if (!user) {\n            custom_exception_1.CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, \'해당 사용자를 찾을 수 없습니다.\');\n        }\n        const postCount = await this.postRepository.count({\n            where: { userUuid },\n        });\n        const friendCount = await this.friendshipRepository.count({\n            where: [\n                { requesterUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n                { addresseeUuid: userUuid, status: friendship_enum_1.FriendshipStatus.ACCEPTED },\n            ],\n        });\n        const friendRelation = await this.friendshipRepository.findOne({\n            where: [\n                { requesterUuid: viewerUuid, addresseeUuid: userUuid },\n                { requesterUuid: userUuid, addresseeUuid: viewerUuid },\n            ],\n        });\n        let friendStatus;\n        let friendId = null;\n        if (!friendRelation) {\n            friendStatus = \'no_relation\';\n        }\n        else {\n            friendId = friendRelation.id;\n            if (friendRelation.status === friendship_enum_1.FriendshipStatus.PENDING) {\n                friendStatus =\n                    friendRelation.requesterUuid === viewerUuid\n                        ? \'request_sent\'\n                        : \'request_received\';\n            }\n            else if (friendRelation.status === friendship_enum_1.FriendshipStatus.ACCEPTED) {\n                friendStatus = \'friends\';\n            }\n            else if (friendRelation.status === friendship_enum_1.FriendshipStatus.BLOCKED) {\n                friendStatus = \'blocked\';\n            }\n        }\n        const age = this.calculateAge(user.birthDate);\n        return {\n            userName: user.nickname,\n            userImage: user.profileImage,\n            userIntroduction: user.introduction,\n            userUuid: user.userUuid,\n            userAge: age,\n            postCount,\n            friendCount,\n            friendStatus,\n            friendId,\n        };\n    }\n};\nexports.UsersService = UsersService;\nexports.UsersService = UsersService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, typeorm_1.InjectRepository)(user_entity_1.User)),\n    __param(1, (0, typeorm_1.InjectRepository)(auth_entity_1.Auth)),\n    __param(2, (0, typeorm_1.InjectRepository)(post_entity_1.Post)),\n    __param(3, (0, typeorm_1.InjectRepository)(friendship_entity_1.Friendship)),\n    __metadata("design:paramtypes", [typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository,\n        typeorm_2.Repository])\n], UsersService);\n\n\n//# sourceURL=webpack://soapft-backend/./src/modules/users/users.service.ts?\n}',
        );

        /***/
      },

    /***/ './src/types/challenge.enum.ts':
      /*!*************************************!*\
  !*** ./src/types/challenge.enum.ts ***!
  \*************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ChallengeFilterType = exports.ChallengeStatusType = exports.GenderType = exports.ChallengeType = void 0;\nvar ChallengeType;\n(function (ChallengeType) {\n    ChallengeType["NORMAL"] = "NORMAL";\n    ChallengeType["EVENT"] = "EVENT";\n})(ChallengeType || (exports.ChallengeType = ChallengeType = {}));\nvar GenderType;\n(function (GenderType) {\n    GenderType["NONE"] = "NONE";\n    GenderType["MALE"] = "MALE";\n    GenderType["FEMALE"] = "FEMALE";\n})(GenderType || (exports.GenderType = GenderType = {}));\nvar ChallengeStatusType;\n(function (ChallengeStatusType) {\n    ChallengeStatusType["BEFORE"] = "before";\n    ChallengeStatusType["IN_PROGRESS"] = "in_progress";\n    ChallengeStatusType["COMPLETED"] = "completed";\n})(ChallengeStatusType || (exports.ChallengeStatusType = ChallengeStatusType = {}));\nvar ChallengeFilterType;\n(function (ChallengeFilterType) {\n    ChallengeFilterType["ALL"] = "all";\n    ChallengeFilterType["UPCOMING"] = "upcoming";\n    ChallengeFilterType["ONGOING"] = "ongoing";\n})(ChallengeFilterType || (exports.ChallengeFilterType = ChallengeFilterType = {}));\n\n\n//# sourceURL=webpack://soapft-backend/./src/types/challenge.enum.ts?\n}',
        );

        /***/
      },

    /***/ './src/types/chat.enum.ts':
      /*!********************************!*\
  !*** ./src/types/chat.enum.ts ***!
  \********************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MessageType = exports.ChatRoomType = void 0;\nvar ChatRoomType;\n(function (ChatRoomType) {\n    ChatRoomType["DIRECT"] = "DIRECT";\n    ChatRoomType["GROUP"] = "GROUP";\n})(ChatRoomType || (exports.ChatRoomType = ChatRoomType = {}));\nvar MessageType;\n(function (MessageType) {\n    MessageType["TEXT"] = "TEXT";\n    MessageType["IMAGE"] = "IMAGE";\n    MessageType["SYSTEM"] = "SYSTEM";\n})(MessageType || (exports.MessageType = MessageType = {}));\n\n\n//# sourceURL=webpack://soapft-backend/./src/types/chat.enum.ts?\n}',
        );

        /***/
      },

    /***/ './src/types/error-code.enum.ts':
      /*!**************************************!*\
  !*** ./src/types/error-code.enum.ts ***!
  \**************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ERROR_CODE_INFO = exports.ErrorCode = void 0;\nexports.getErrorInfo = getErrorInfo;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode["INTERNAL_SERVER_ERROR"] = "SYS_001";\n    ErrorCode["DATABASE_ERROR"] = "SYS_002";\n    ErrorCode["EXTERNAL_API_ERROR"] = "SYS_003";\n    ErrorCode["INVALID_INPUT_VALUE"] = "SYS_004";\n    ErrorCode["METHOD_NOT_ALLOWED"] = "SYS_005";\n    ErrorCode["RESOURCE_NOT_FOUND"] = "SYS_006";\n    ErrorCode["TOO_MANY_REQUESTS"] = "SYS_007";\n    ErrorCode["UNAUTHORIZED"] = "AUTH_001";\n    ErrorCode["FORBIDDEN"] = "AUTH_002";\n    ErrorCode["INVALID_TOKEN"] = "AUTH_003";\n    ErrorCode["EXPIRED_TOKEN"] = "AUTH_004";\n    ErrorCode["REFRESH_TOKEN_NOT_FOUND"] = "AUTH_005";\n    ErrorCode["INVALID_REFRESH_TOKEN"] = "AUTH_006";\n    ErrorCode["SOCIAL_LOGIN_FAILED"] = "AUTH_007";\n    ErrorCode["USER_NOT_FOUND"] = "USER_001";\n    ErrorCode["DUPLICATE_USER"] = "USER_002";\n    ErrorCode["INVALID_USER_STATUS"] = "USER_003";\n    ErrorCode["USER_ALREADY_DELETED"] = "USER_004";\n    ErrorCode["INVALID_AGE_RANGE"] = "USER_005";\n    ErrorCode["INVALID_GENDER"] = "USER_006";\n    ErrorCode["EMAIL_ALREADY_EXISTS"] = "ACCOUNT_001";\n    ErrorCode["PHONE_ALREADY_EXISTS"] = "ACCOUNT_002";\n    ErrorCode["INVALID_PASSWORD"] = "ACCOUNT_003";\n    ErrorCode["NICKNAME_ALREADY_EXISTS"] = "ACCOUNT_004";\n    ErrorCode["INVALID_NICKNAME"] = "ACCOUNT_005";\n    ErrorCode["SOCIAL_ID_ALREADY_EXISTS"] = "ACCOUNT_006";\n    ErrorCode["CHALLENGE_NOT_FOUND"] = "CHALLENGE_001";\n    ErrorCode["CHALLENGE_ALREADY_STARTED"] = "CHALLENGE_002";\n    ErrorCode["CHALLENGE_ALREADY_FINISHED"] = "CHALLENGE_003";\n    ErrorCode["CHALLENGE_FULL"] = "CHALLENGE_004";\n    ErrorCode["CHALLENGE_ACCESS_DENIED"] = "CHALLENGE_005";\n    ErrorCode["ALREADY_JOINED_CHALLENGE"] = "CHALLENGE_006";\n    ErrorCode["NOT_JOINED_CHALLENGE"] = "CHALLENGE_007";\n    ErrorCode["CHALLENGE_NOT_STARTED"] = "CHALLENGE_008";\n    ErrorCode["INVALID_CHALLENGE_DATES"] = "CHALLENGE_009";\n    ErrorCode["CHALLENGE_CREATOR_CANNOT_LEAVE"] = "CHALLENGE_010";\n    ErrorCode["AGE_RESTRICTION_NOT_MET"] = "CHALLENGE_011";\n    ErrorCode["GENDER_RESTRICTION_NOT_MET"] = "CHALLENGE_012";\n    ErrorCode["CHALLENGE_CANNOT_EDIT"] = "CHALLENGE_013";\n    ErrorCode["POST_NOT_FOUND"] = "POST_001";\n    ErrorCode["POST_ACCESS_DENIED"] = "POST_002";\n    ErrorCode["POST_ALREADY_DELETED"] = "POST_003";\n    ErrorCode["INVALID_POST_CONTENT"] = "POST_004";\n    ErrorCode["POST_IMAGE_LIMIT_EXCEEDED"] = "POST_005";\n    ErrorCode["CHALLENGE_POST_REQUIRED"] = "POST_006";\n    ErrorCode["POST_EDIT_TIME_EXPIRED"] = "POST_007";\n    ErrorCode["COMMENT_NOT_FOUND"] = "COMMENT_001";\n    ErrorCode["COMMENT_ALREADY_DELETED"] = "COMMENT_002";\n    ErrorCode["COMMENT_ACCESS_DENIED"] = "COMMENT_003";\n    ErrorCode["COMMENT_TOO_LONG"] = "COMMENT_004";\n    ErrorCode["COMMENT_EMPTY"] = "COMMENT_005";\n    ErrorCode["PARENT_COMMENT_NOT_FOUND"] = "COMMENT_006";\n    ErrorCode["INVALID_COMMENT_DEPTH"] = "COMMENT_007";\n    ErrorCode["POST_NOT_FOUND_FOR_COMMENT"] = "COMMENT_008";\n    ErrorCode["MENTIONED_USER_NOT_FOUND"] = "COMMENT_009";\n    ErrorCode["COMMENT_EDIT_TIME_EXPIRED"] = "COMMENT_010";\n    ErrorCode["LIKE_NOT_FOUND"] = "LIKE_001";\n    ErrorCode["ALREADY_LIKED"] = "LIKE_002";\n    ErrorCode["CANNOT_LIKE_OWN_POST"] = "LIKE_003";\n    ErrorCode["NOT_LIKED_POST"] = "LIKE_004";\n    ErrorCode["FRIENDSHIP_NOT_FOUND"] = "FRIENDSHIP_001";\n    ErrorCode["ALREADY_FRIENDS"] = "FRIENDSHIP_002";\n    ErrorCode["FRIEND_REQUEST_ALREADY_SENT"] = "FRIENDSHIP_003";\n    ErrorCode["FRIEND_REQUEST_NOT_FOUND"] = "FRIENDSHIP_004";\n    ErrorCode["CANNOT_FRIEND_SELF"] = "FRIENDSHIP_005";\n    ErrorCode["FRIEND_REQUEST_ALREADY_PROCESSED"] = "FRIENDSHIP_006";\n    ErrorCode["NOT_FRIEND_REQUEST_RECIPIENT"] = "FRIENDSHIP_007";\n    ErrorCode["NOT_FRIEND_REQUEST_SENDER"] = "FRIENDSHIP_008";\n    ErrorCode["USERS_NOT_FRIENDS"] = "FRIENDSHIP_009";\n    ErrorCode["BLOCK_NOT_FOUND"] = "BLOCK_001";\n    ErrorCode["ALREADY_BLOCKED"] = "BLOCK_002";\n    ErrorCode["CANNOT_BLOCK_SELF"] = "BLOCK_003";\n    ErrorCode["NOT_BLOCKED_USER"] = "BLOCK_004";\n    ErrorCode["BLOCKED_BY_USER"] = "BLOCK_005";\n    ErrorCode["CANNOT_INTERACT_WITH_BLOCKED_USER"] = "BLOCK_006";\n    ErrorCode["CHAT_ROOM_NOT_FOUND"] = "CHAT_001";\n    ErrorCode["CHAT_ROOM_ACCESS_DENIED"] = "CHAT_002";\n    ErrorCode["MESSAGE_NOT_FOUND"] = "CHAT_003";\n    ErrorCode["MESSAGE_ACCESS_DENIED"] = "CHAT_004";\n    ErrorCode["CANNOT_LEAVE_DIRECT_CHAT"] = "CHAT_005";\n    ErrorCode["CHAT_ROOM_FULL"] = "CHAT_006";\n    ErrorCode["NOT_FRIENDS_CANNOT_CHAT"] = "CHAT_007";\n    ErrorCode["MESSAGE_TOO_LONG"] = "CHAT_008";\n    ErrorCode["INVALID_MESSAGE_TYPE"] = "CHAT_009";\n    ErrorCode["MESSAGE_EDIT_TIME_EXPIRED"] = "CHAT_010";\n    ErrorCode["FILE_UPLOAD_FAILED"] = "FILE_001";\n    ErrorCode["FILE_NOT_FOUND"] = "FILE_002";\n    ErrorCode["INVALID_FILE_TYPE"] = "FILE_003";\n    ErrorCode["FILE_SIZE_EXCEEDED"] = "FILE_004";\n    ErrorCode["INVALID_FILE_FORMAT"] = "FILE_005";\n    ErrorCode["S3_UPLOAD_FAILED"] = "FILE_006";\n    ErrorCode["IMAGE_PROCESSING_FAILED"] = "FILE_007";\n    ErrorCode["NOTIFICATION_NOT_FOUND"] = "NOTIFICATION_001";\n    ErrorCode["NOTIFICATION_ALREADY_READ"] = "NOTIFICATION_002";\n    ErrorCode["PUSH_TOKEN_INVALID"] = "NOTIFICATION_003";\n    ErrorCode["PUSH_SEND_FAILED"] = "NOTIFICATION_004";\n    ErrorCode["PUSH_PROVIDER_NOT_INITIALIZED"] = "NOTIFICATION_005";\n    ErrorCode["PUSH_PROVIDER_CONNECTION_FAILED"] = "NOTIFICATION_006";\n    ErrorCode["PUSH_INVALID_DEVICE_TOKEN"] = "NOTIFICATION_007";\n    ErrorCode["PUSH_PROVIDER_CONFIGURATION_ERROR"] = "NOTIFICATION_008";\n    ErrorCode["REPORT_NOT_FOUND"] = "REPORT_001";\n    ErrorCode["ALREADY_REPORTED"] = "REPORT_002";\n    ErrorCode["CANNOT_REPORT_SELF"] = "REPORT_003";\n    ErrorCode["INVALID_REPORT_TYPE"] = "REPORT_004";\n    ErrorCode["INVALID_REPORT_REASON"] = "REPORT_005";\n    ErrorCode["REPORT_TARGET_NOT_FOUND"] = "REPORT_006";\n    ErrorCode["INSUFFICIENT_COINS"] = "COIN_001";\n    ErrorCode["INVALID_COIN_AMOUNT"] = "COIN_002";\n    ErrorCode["COIN_TRANSACTION_FAILED"] = "COIN_003";\n})(ErrorCode || (exports.ErrorCode = ErrorCode = {}));\nexports.ERROR_CODE_INFO = {\n    [ErrorCode.INTERNAL_SERVER_ERROR]: {\n        code: \'SYS_001\',\n        message: \'서버 오류가 발생했습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n    [ErrorCode.DATABASE_ERROR]: {\n        code: \'SYS_002\',\n        message: \'데이터베이스 오류가 발생했습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n    [ErrorCode.EXTERNAL_API_ERROR]: {\n        code: \'SYS_003\',\n        message: \'외부 API 호출 중 오류가 발생했습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_GATEWAY,\n    },\n    [ErrorCode.INVALID_INPUT_VALUE]: {\n        code: \'SYS_004\',\n        message: \'입력값이 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.METHOD_NOT_ALLOWED]: {\n        code: \'SYS_005\',\n        message: \'허용되지 않은 메서드입니다.\',\n        httpStatus: common_1.HttpStatus.METHOD_NOT_ALLOWED,\n    },\n    [ErrorCode.RESOURCE_NOT_FOUND]: {\n        code: \'SYS_006\',\n        message: \'요청한 리소스를 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.TOO_MANY_REQUESTS]: {\n        code: \'SYS_007\',\n        message: \'요청이 너무 많습니다. 잠시 후 다시 시도해주세요.\',\n        httpStatus: common_1.HttpStatus.TOO_MANY_REQUESTS,\n    },\n    [ErrorCode.UNAUTHORIZED]: {\n        code: \'AUTH_001\',\n        message: \'로그인이 필요합니다.\',\n        httpStatus: common_1.HttpStatus.UNAUTHORIZED,\n    },\n    [ErrorCode.FORBIDDEN]: {\n        code: \'AUTH_002\',\n        message: \'접근 권한이 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.INVALID_TOKEN]: {\n        code: \'AUTH_003\',\n        message: \'유효하지 않은 토큰입니다.\',\n        httpStatus: common_1.HttpStatus.UNAUTHORIZED,\n    },\n    [ErrorCode.EXPIRED_TOKEN]: {\n        code: \'AUTH_004\',\n        message: \'토큰이 만료되었습니다.\',\n        httpStatus: common_1.HttpStatus.UNAUTHORIZED,\n    },\n    [ErrorCode.REFRESH_TOKEN_NOT_FOUND]: {\n        code: \'AUTH_005\',\n        message: \'리프레시 토큰을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.UNAUTHORIZED,\n    },\n    [ErrorCode.INVALID_REFRESH_TOKEN]: {\n        code: \'AUTH_006\',\n        message: \'유효하지 않은 리프레시 토큰입니다.\',\n        httpStatus: common_1.HttpStatus.UNAUTHORIZED,\n    },\n    [ErrorCode.SOCIAL_LOGIN_FAILED]: {\n        code: \'AUTH_007\',\n        message: \'소셜 로그인에 실패했습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.USER_NOT_FOUND]: {\n        code: \'USER_001\',\n        message: \'존재하지 않는 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.DUPLICATE_USER]: {\n        code: \'USER_002\',\n        message: \'이미 존재하는 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.INVALID_USER_STATUS]: {\n        code: \'USER_003\',\n        message: \'사용자 상태가 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.USER_ALREADY_DELETED]: {\n        code: \'USER_004\',\n        message: \'이미 탈퇴한 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_AGE_RANGE]: {\n        code: \'USER_005\',\n        message: \'연령 범위가 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_GENDER]: {\n        code: \'USER_006\',\n        message: \'성별 정보가 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.EMAIL_ALREADY_EXISTS]: {\n        code: \'ACCOUNT_001\',\n        message: \'이미 등록된 이메일입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.PHONE_ALREADY_EXISTS]: {\n        code: \'ACCOUNT_002\',\n        message: \'이미 등록된 휴대폰 번호입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.INVALID_PASSWORD]: {\n        code: \'ACCOUNT_003\',\n        message: \'비밀번호가 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.NICKNAME_ALREADY_EXISTS]: {\n        code: \'ACCOUNT_004\',\n        message: \'이미 사용 중인 닉네임입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.INVALID_NICKNAME]: {\n        code: \'ACCOUNT_005\',\n        message: \'닉네임 형식이 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.SOCIAL_ID_ALREADY_EXISTS]: {\n        code: \'ACCOUNT_006\',\n        message: \'이미 등록된 소셜 계정입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.CHALLENGE_NOT_FOUND]: {\n        code: \'CHALLENGE_001\',\n        message: \'존재하지 않는 챌린지입니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.CHALLENGE_ALREADY_STARTED]: {\n        code: \'CHALLENGE_002\',\n        message: \'이미 시작된 챌린지입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHALLENGE_ALREADY_FINISHED]: {\n        code: \'CHALLENGE_003\',\n        message: \'이미 종료된 챌린지입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHALLENGE_FULL]: {\n        code: \'CHALLENGE_004\',\n        message: \'챌린지 정원이 가득 찼습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHALLENGE_ACCESS_DENIED]: {\n        code: \'CHALLENGE_005\',\n        message: \'챌린지에 접근할 권한이 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.ALREADY_JOINED_CHALLENGE]: {\n        code: \'CHALLENGE_006\',\n        message: \'이미 참여한 챌린지입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.NOT_JOINED_CHALLENGE]: {\n        code: \'CHALLENGE_007\',\n        message: \'참여하지 않은 챌린지입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHALLENGE_NOT_STARTED]: {\n        code: \'CHALLENGE_008\',\n        message: \'아직 시작되지 않은 챌린지입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_CHALLENGE_DATES]: {\n        code: \'CHALLENGE_009\',\n        message: \'챌린지 날짜가 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHALLENGE_CREATOR_CANNOT_LEAVE]: {\n        code: \'CHALLENGE_010\',\n        message: \'챌린지 생성자는 나갈 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.AGE_RESTRICTION_NOT_MET]: {\n        code: \'CHALLENGE_011\',\n        message: \'연령 제한에 맞지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.GENDER_RESTRICTION_NOT_MET]: {\n        code: \'CHALLENGE_012\',\n        message: \'성별 제한에 맞지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.POST_NOT_FOUND]: {\n        code: \'POST_001\',\n        message: \'존재하지 않는 인증글입니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.POST_ACCESS_DENIED]: {\n        code: \'POST_002\',\n        message: \'인증글에 접근할 권한이 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.POST_ALREADY_DELETED]: {\n        code: \'POST_003\',\n        message: \'이미 삭제된 인증글입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_POST_CONTENT]: {\n        code: \'POST_004\',\n        message: \'인증글 내용이 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.POST_IMAGE_LIMIT_EXCEEDED]: {\n        code: \'POST_005\',\n        message: \'인증글 이미지 개수를 초과했습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHALLENGE_POST_REQUIRED]: {\n        code: \'POST_006\',\n        message: \'챌린지 인증글이 필요합니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.POST_EDIT_TIME_EXPIRED]: {\n        code: \'POST_007\',\n        message: \'인증글 수정 시간이 만료되었습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHALLENGE_CANNOT_EDIT]: {\n        code: \'CHALLENGE_013\',\n        message: \'챌린지 생성자는 수정할 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.COMMENT_NOT_FOUND]: {\n        code: \'COMMENT_001\',\n        message: \'존재하지 않는 댓글입니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.COMMENT_ALREADY_DELETED]: {\n        code: \'COMMENT_002\',\n        message: \'이미 삭제된 댓글입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.COMMENT_ACCESS_DENIED]: {\n        code: \'COMMENT_003\',\n        message: \'댓글에 접근할 권한이 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.COMMENT_TOO_LONG]: {\n        code: \'COMMENT_004\',\n        message: \'댓글이 너무 깁니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.COMMENT_EMPTY]: {\n        code: \'COMMENT_005\',\n        message: \'댓글 내용이 비어있습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.PARENT_COMMENT_NOT_FOUND]: {\n        code: \'COMMENT_006\',\n        message: \'부모 댓글을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.INVALID_COMMENT_DEPTH]: {\n        code: \'COMMENT_007\',\n        message: \'댓글 깊이가 유효하지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.POST_NOT_FOUND_FOR_COMMENT]: {\n        code: \'COMMENT_008\',\n        message: \'댓글을 작성할 인증글을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.MENTIONED_USER_NOT_FOUND]: {\n        code: \'COMMENT_009\',\n        message: \'멘션된 사용자를 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.COMMENT_EDIT_TIME_EXPIRED]: {\n        code: \'COMMENT_010\',\n        message: \'댓글 수정 시간이 만료되었습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.LIKE_NOT_FOUND]: {\n        code: \'LIKE_001\',\n        message: \'좋아요 정보를 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.ALREADY_LIKED]: {\n        code: \'LIKE_002\',\n        message: \'이미 좋아요를 누른 인증글입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.CANNOT_LIKE_OWN_POST]: {\n        code: \'LIKE_003\',\n        message: \'자신의 인증글에는 좋아요를 누를 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.NOT_LIKED_POST]: {\n        code: \'LIKE_004\',\n        message: \'좋아요를 누르지 않은 인증글입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.FRIENDSHIP_NOT_FOUND]: {\n        code: \'FRIENDSHIP_001\',\n        message: \'친구 관계를 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.ALREADY_FRIENDS]: {\n        code: \'FRIENDSHIP_002\',\n        message: \'이미 친구인 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.FRIEND_REQUEST_ALREADY_SENT]: {\n        code: \'FRIENDSHIP_003\',\n        message: \'이미 친구 요청을 보낸 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.FRIEND_REQUEST_NOT_FOUND]: {\n        code: \'FRIENDSHIP_004\',\n        message: \'친구 요청을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.CANNOT_FRIEND_SELF]: {\n        code: \'FRIENDSHIP_005\',\n        message: \'자기 자신에게 친구 요청을 보낼 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.FRIEND_REQUEST_ALREADY_PROCESSED]: {\n        code: \'FRIENDSHIP_006\',\n        message: \'이미 처리된 친구 요청입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.NOT_FRIEND_REQUEST_RECIPIENT]: {\n        code: \'FRIENDSHIP_007\',\n        message: \'친구 요청을 받은 사람이 아닙니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.NOT_FRIEND_REQUEST_SENDER]: {\n        code: \'FRIENDSHIP_008\',\n        message: \'친구 요청을 보낸 사람이 아닙니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.USERS_NOT_FRIENDS]: {\n        code: \'FRIENDSHIP_009\',\n        message: \'친구 관계가 아닌 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.BLOCK_NOT_FOUND]: {\n        code: \'BLOCK_001\',\n        message: \'차단 정보를 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.ALREADY_BLOCKED]: {\n        code: \'BLOCK_002\',\n        message: \'이미 차단된 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.CANNOT_BLOCK_SELF]: {\n        code: \'BLOCK_003\',\n        message: \'자기 자신을 차단할 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.NOT_BLOCKED_USER]: {\n        code: \'BLOCK_004\',\n        message: \'차단되지 않은 사용자입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.BLOCKED_BY_USER]: {\n        code: \'BLOCK_005\',\n        message: \'해당 사용자에게 차단되었습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.CANNOT_INTERACT_WITH_BLOCKED_USER]: {\n        code: \'BLOCK_006\',\n        message: \'차단된 사용자와는 상호작용할 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.CHAT_ROOM_NOT_FOUND]: {\n        code: \'CHAT_001\',\n        message: \'채팅방을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.CHAT_ROOM_ACCESS_DENIED]: {\n        code: \'CHAT_002\',\n        message: \'채팅방에 접근할 권한이 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.MESSAGE_NOT_FOUND]: {\n        code: \'CHAT_003\',\n        message: \'메시지를 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.MESSAGE_ACCESS_DENIED]: {\n        code: \'CHAT_004\',\n        message: \'메시지에 접근할 권한이 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.CANNOT_LEAVE_DIRECT_CHAT]: {\n        code: \'CHAT_005\',\n        message: \'1대1 채팅방은 나갈 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.CHAT_ROOM_FULL]: {\n        code: \'CHAT_006\',\n        message: \'채팅방 정원이 가득 찼습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.NOT_FRIENDS_CANNOT_CHAT]: {\n        code: \'CHAT_007\',\n        message: \'친구가 아닌 사용자와는 채팅할 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.FORBIDDEN,\n    },\n    [ErrorCode.MESSAGE_TOO_LONG]: {\n        code: \'CHAT_008\',\n        message: \'메시지가 너무 깁니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_MESSAGE_TYPE]: {\n        code: \'CHAT_009\',\n        message: \'유효하지 않은 메시지 타입입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.MESSAGE_EDIT_TIME_EXPIRED]: {\n        code: \'CHAT_010\',\n        message: \'메시지 수정 시간이 만료되었습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.FILE_UPLOAD_FAILED]: {\n        code: \'FILE_001\',\n        message: \'파일 업로드에 실패했습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n    [ErrorCode.FILE_NOT_FOUND]: {\n        code: \'FILE_002\',\n        message: \'파일을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.INVALID_FILE_TYPE]: {\n        code: \'FILE_003\',\n        message: \'지원하지 않는 파일 형식입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.FILE_SIZE_EXCEEDED]: {\n        code: \'FILE_004\',\n        message: \'파일 크기가 제한을 초과했습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_FILE_FORMAT]: {\n        code: \'FILE_005\',\n        message: \'파일 형식이 올바르지 않습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.S3_UPLOAD_FAILED]: {\n        code: \'FILE_006\',\n        message: \'S3 업로드에 실패했습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n    [ErrorCode.IMAGE_PROCESSING_FAILED]: {\n        code: \'FILE_007\',\n        message: \'이미지 처리에 실패했습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n    [ErrorCode.NOTIFICATION_NOT_FOUND]: {\n        code: \'NOTIFICATION_001\',\n        message: \'알림을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.NOTIFICATION_ALREADY_READ]: {\n        code: \'NOTIFICATION_002\',\n        message: \'이미 읽은 알림입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.PUSH_TOKEN_INVALID]: {\n        code: \'NOTIFICATION_003\',\n        message: \'유효하지 않은 푸시 토큰입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.PUSH_SEND_FAILED]: {\n        code: \'NOTIFICATION_004\',\n        message: \'푸시 알림 전송에 실패했습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n    [ErrorCode.PUSH_PROVIDER_NOT_INITIALIZED]: {\n        code: \'NOTIFICATION_005\',\n        message: \'APNs 푸시 서비스가 초기화되지 않았습니다.\',\n        httpStatus: common_1.HttpStatus.SERVICE_UNAVAILABLE,\n    },\n    [ErrorCode.PUSH_PROVIDER_CONNECTION_FAILED]: {\n        code: \'NOTIFICATION_006\',\n        message: \'APNs 서버 연결에 실패했습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_GATEWAY,\n    },\n    [ErrorCode.PUSH_INVALID_DEVICE_TOKEN]: {\n        code: \'NOTIFICATION_007\',\n        message: \'유효하지 않은 디바이스 토큰입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.PUSH_PROVIDER_CONFIGURATION_ERROR]: {\n        code: \'NOTIFICATION_008\',\n        message: \'APNs 서비스 설정에 오류가 있습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n    [ErrorCode.REPORT_NOT_FOUND]: {\n        code: \'REPORT_001\',\n        message: \'신고 정보를 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.ALREADY_REPORTED]: {\n        code: \'REPORT_002\',\n        message: \'이미 신고된 콘텐츠입니다.\',\n        httpStatus: common_1.HttpStatus.CONFLICT,\n    },\n    [ErrorCode.CANNOT_REPORT_SELF]: {\n        code: \'REPORT_003\',\n        message: \'자신의 콘텐츠는 신고할 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_REPORT_TYPE]: {\n        code: \'REPORT_004\',\n        message: \'유효하지 않은 신고 타입입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_REPORT_REASON]: {\n        code: \'REPORT_005\',\n        message: \'유효하지 않은 신고 사유입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.REPORT_TARGET_NOT_FOUND]: {\n        code: \'REPORT_006\',\n        message: \'신고 대상을 찾을 수 없습니다.\',\n        httpStatus: common_1.HttpStatus.NOT_FOUND,\n    },\n    [ErrorCode.INSUFFICIENT_COINS]: {\n        code: \'COIN_001\',\n        message: \'코인이 부족합니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.INVALID_COIN_AMOUNT]: {\n        code: \'COIN_002\',\n        message: \'유효하지 않은 코인 금액입니다.\',\n        httpStatus: common_1.HttpStatus.BAD_REQUEST,\n    },\n    [ErrorCode.COIN_TRANSACTION_FAILED]: {\n        code: \'COIN_003\',\n        message: \'코인 지불에 실패했습니다.\',\n        httpStatus: common_1.HttpStatus.INTERNAL_SERVER_ERROR,\n    },\n};\nfunction getErrorInfo(errorCode) {\n    return exports.ERROR_CODE_INFO[errorCode];\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/types/error-code.enum.ts?\n}',
        );

        /***/
      },

    /***/ './src/types/friendship.enum.ts':
      /*!**************************************!*\
  !*** ./src/types/friendship.enum.ts ***!
  \**************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.FriendshipStatus = void 0;\nvar FriendshipStatus;\n(function (FriendshipStatus) {\n    FriendshipStatus["PENDING"] = "pending";\n    FriendshipStatus["ACCEPTED"] = "accepted";\n    FriendshipStatus["REJECTED"] = "rejected";\n    FriendshipStatus["BLOCKED"] = "blocked";\n})(FriendshipStatus || (exports.FriendshipStatus = FriendshipStatus = {}));\n\n\n//# sourceURL=webpack://soapft-backend/./src/types/friendship.enum.ts?\n}',
        );

        /***/
      },

    /***/ './src/types/notification.enum.ts':
      /*!****************************************!*\
  !*** ./src/types/notification.enum.ts ***!
  \****************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.NotificationType = void 0;\nvar NotificationType;\n(function (NotificationType) {\n    NotificationType["FRIEND_REQUEST"] = "friend_request";\n    NotificationType["FRIEND_ACCEPTED"] = "friend_accepted";\n    NotificationType["CHALLENGE_INVITE"] = "challenge_invite";\n    NotificationType["CHALLENGE_START"] = "challenge_start";\n    NotificationType["CHALLENGE_END"] = "challenge_end";\n    NotificationType["NEW_MESSAGE"] = "new_message";\n    NotificationType["POST_LIKE"] = "post_like";\n    NotificationType["POST_COMMENT"] = "post_comment";\n    NotificationType["MENTION"] = "mention";\n})(NotificationType || (exports.NotificationType = NotificationType = {}));\n\n\n//# sourceURL=webpack://soapft-backend/./src/types/notification.enum.ts?\n}',
        );

        /***/
      },

    /***/ './src/types/social-provider.enum.ts':
      /*!*******************************************!*\
  !*** ./src/types/social-provider.enum.ts ***!
  \*******************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SocialProvider = void 0;\nvar SocialProvider;\n(function (SocialProvider) {\n    SocialProvider["KAKAO"] = "KAKAO";\n    SocialProvider["NAVER"] = "NAVER";\n    SocialProvider["APPLE"] = "APPLE";\n})(SocialProvider || (exports.SocialProvider = SocialProvider = {}));\n\n\n//# sourceURL=webpack://soapft-backend/./src/types/social-provider.enum.ts?\n}',
        );

        /***/
      },

    /***/ './src/types/user-status.enum.ts':
      /*!***************************************!*\
  !*** ./src/types/user-status.enum.ts ***!
  \***************************************/
      /***/ (__unused_webpack_module, exports) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.UserStatusType = void 0;\nvar UserStatusType;\n(function (UserStatusType) {\n    UserStatusType["ACTIVE"] = "ACTIVE";\n    UserStatusType["DELETE"] = "DELETE";\n    UserStatusType["INCOMPLETE"] = "INCOMPLETE";\n})(UserStatusType || (exports.UserStatusType = UserStatusType = {}));\n\n\n//# sourceURL=webpack://soapft-backend/./src/types/user-status.enum.ts?\n}',
        );

        /***/
      },

    /***/ './src/utils/apple-jwt.util.ts':
      /*!*************************************!*\
  !*** ./src/utils/apple-jwt.util.ts ***!
  \*************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.decodeTokenHeader = decodeTokenHeader;\nconst jwt = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");\nfunction decodeTokenHeader(token) {\n    try {\n        const decoded = jwt.decode(token, { complete: true });\n        if (!decoded || typeof decoded === \'string\') {\n            throw new Error(\'Invalid token format\');\n        }\n        return decoded.header;\n    }\n    catch (error) {\n        throw new Error(`Failed to decode token header: ${error.message}`);\n    }\n}\n\n\n//# sourceURL=webpack://soapft-backend/./src/utils/apple-jwt.util.ts?\n}',
        );

        /***/
      },

    /***/ './src/utils/custom-exception.ts':
      /*!***************************************!*\
  !*** ./src/utils/custom-exception.ts ***!
  \***************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          "{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BusinessException = exports.CustomException = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ \"@nestjs/common\");\nconst error_code_enum_1 = __webpack_require__(/*! ../types/error-code.enum */ \"./src/types/error-code.enum.ts\");\nclass CustomException extends common_1.HttpException {\n    constructor(errorCode, customMessage, details) {\n        const errorInfo = (0, error_code_enum_1.getErrorInfo)(errorCode);\n        const message = customMessage || errorInfo.message;\n        super({\n            errorCode: errorInfo.code,\n            message,\n            timestamp: new Date().toISOString(),\n            details,\n        }, errorInfo.httpStatus);\n        this.errorCode = errorInfo.code;\n        this.timestamp = new Date().toISOString();\n    }\n    static throw(errorCode, customMessage, details) {\n        throw new CustomException(errorCode, customMessage, details);\n    }\n}\nexports.CustomException = CustomException;\nclass BusinessException {\n    static userNotFound(userUuid) {\n        CustomException.throw(error_code_enum_1.ErrorCode.USER_NOT_FOUND, undefined, { userUuid });\n    }\n    static insufficientCoins(required, current) {\n        CustomException.throw(error_code_enum_1.ErrorCode.INSUFFICIENT_COINS, `필요한 코인: ${required}, 보유 코인: ${current}`, { required, current });\n    }\n    static challengeNotFound(challengeUuid) {\n        CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_NOT_FOUND, undefined, {\n            challengeUuid,\n        });\n    }\n    static challengeAlreadyStarted() {\n        CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_ALREADY_STARTED);\n    }\n    static challengeFull(maxMember) {\n        CustomException.throw(error_code_enum_1.ErrorCode.CHALLENGE_FULL, `최대 참여 인원(${maxMember}명)을 초과했습니다.`, { maxMember });\n    }\n    static ageRestrictionNotMet(userAge, minAge, maxAge) {\n        CustomException.throw(error_code_enum_1.ErrorCode.AGE_RESTRICTION_NOT_MET, `참여 가능 연령: ${minAge}세 ~ ${maxAge}세 (현재: ${userAge}세)`, { userAge, minAge, maxAge });\n    }\n    static genderRestrictionNotMet(requiredGender, userGender) {\n        CustomException.throw(error_code_enum_1.ErrorCode.GENDER_RESTRICTION_NOT_MET, `${requiredGender} 전용 챌린지입니다.`, { requiredGender, userGender });\n    }\n    static postNotFound(postUuid) {\n        CustomException.throw(error_code_enum_1.ErrorCode.POST_NOT_FOUND, undefined, { postUuid });\n    }\n    static postImageLimitExceeded(limit, provided) {\n        CustomException.throw(error_code_enum_1.ErrorCode.POST_IMAGE_LIMIT_EXCEEDED, `이미지는 최대 ${limit}개까지 업로드 가능합니다. (현재: ${provided}개)`, { limit, provided });\n    }\n    static commentNotFound(commentId) {\n        CustomException.throw(error_code_enum_1.ErrorCode.COMMENT_NOT_FOUND, undefined, {\n            commentId,\n        });\n    }\n    static commentTooLong(maxLength, currentLength) {\n        CustomException.throw(error_code_enum_1.ErrorCode.COMMENT_TOO_LONG, `댓글은 최대 ${maxLength}자까지 작성 가능합니다. (현재: ${currentLength}자)`, { maxLength, currentLength });\n    }\n    static mentionedUserNotFound(userUuids) {\n        CustomException.throw(error_code_enum_1.ErrorCode.MENTIONED_USER_NOT_FOUND, `멘션된 사용자를 찾을 수 없습니다: ${userUuids.join(', ')}`, { userUuids });\n    }\n    static friendshipNotFound(friendshipId) {\n        CustomException.throw(error_code_enum_1.ErrorCode.FRIENDSHIP_NOT_FOUND, undefined, {\n            friendshipId,\n        });\n    }\n    static alreadyFriends(userUuid) {\n        CustomException.throw(error_code_enum_1.ErrorCode.ALREADY_FRIENDS, undefined, { userUuid });\n    }\n    static cannotFriendSelf() {\n        CustomException.throw(error_code_enum_1.ErrorCode.CANNOT_FRIEND_SELF);\n    }\n    static notFriendsCannotChat() {\n        CustomException.throw(error_code_enum_1.ErrorCode.NOT_FRIENDS_CANNOT_CHAT);\n    }\n    static chatRoomNotFound(roomUuid) {\n        CustomException.throw(error_code_enum_1.ErrorCode.CHAT_ROOM_NOT_FOUND, undefined, {\n            roomUuid,\n        });\n    }\n    static messageNotFound(messageId) {\n        CustomException.throw(error_code_enum_1.ErrorCode.MESSAGE_NOT_FOUND, undefined, {\n            messageId,\n        });\n    }\n    static cannotLeaveDirectChat() {\n        CustomException.throw(error_code_enum_1.ErrorCode.CANNOT_LEAVE_DIRECT_CHAT);\n    }\n    static messageTooLong(maxLength, currentLength) {\n        CustomException.throw(error_code_enum_1.ErrorCode.MESSAGE_TOO_LONG, `메시지는 최대 ${maxLength}자까지 작성 가능합니다. (현재: ${currentLength}자)`, { maxLength, currentLength });\n    }\n    static alreadyLiked() {\n        CustomException.throw(error_code_enum_1.ErrorCode.ALREADY_LIKED);\n    }\n    static cannotLikeOwnPost() {\n        CustomException.throw(error_code_enum_1.ErrorCode.CANNOT_LIKE_OWN_POST);\n    }\n    static notLikedPost() {\n        CustomException.throw(error_code_enum_1.ErrorCode.NOT_LIKED_POST);\n    }\n    static alreadyBlocked(userUuid) {\n        CustomException.throw(error_code_enum_1.ErrorCode.ALREADY_BLOCKED, undefined, { userUuid });\n    }\n    static cannotBlockSelf() {\n        CustomException.throw(error_code_enum_1.ErrorCode.CANNOT_BLOCK_SELF);\n    }\n    static blockedByUser(userUuid) {\n        CustomException.throw(error_code_enum_1.ErrorCode.BLOCKED_BY_USER, undefined, { userUuid });\n    }\n    static fileUploadFailed(fileName, reason) {\n        CustomException.throw(error_code_enum_1.ErrorCode.FILE_UPLOAD_FAILED, reason ? `파일 업로드 실패: ${reason}` : undefined, { fileName, reason });\n    }\n    static invalidFileType(allowedTypes, providedType) {\n        CustomException.throw(error_code_enum_1.ErrorCode.INVALID_FILE_TYPE, `허용된 파일 형식: ${allowedTypes.join(', ')} (제공된 형식: ${providedType})`, { allowedTypes, providedType });\n    }\n    static fileSizeExceeded(maxSize, currentSize) {\n        CustomException.throw(error_code_enum_1.ErrorCode.FILE_SIZE_EXCEEDED, `파일 크기 제한: ${maxSize}MB (현재: ${Math.round(currentSize / 1024 / 1024)}MB)`, { maxSize, currentSize });\n    }\n    static unauthorized() {\n        CustomException.throw(error_code_enum_1.ErrorCode.UNAUTHORIZED);\n    }\n    static forbidden() {\n        CustomException.throw(error_code_enum_1.ErrorCode.FORBIDDEN);\n    }\n    static invalidToken() {\n        CustomException.throw(error_code_enum_1.ErrorCode.INVALID_TOKEN);\n    }\n    static expiredToken() {\n        CustomException.throw(error_code_enum_1.ErrorCode.EXPIRED_TOKEN);\n    }\n    static notificationNotFound(notificationId) {\n        CustomException.throw(error_code_enum_1.ErrorCode.NOTIFICATION_NOT_FOUND, undefined, {\n            notificationId,\n        });\n    }\n    static pushProviderNotInitialized() {\n        CustomException.throw(error_code_enum_1.ErrorCode.PUSH_PROVIDER_NOT_INITIALIZED);\n    }\n    static pushProviderConnectionFailed(reason) {\n        CustomException.throw(error_code_enum_1.ErrorCode.PUSH_PROVIDER_CONNECTION_FAILED, reason ? `APNs 서버 연결 실패: ${reason}` : undefined, { reason });\n    }\n    static pushInvalidDeviceToken(deviceToken) {\n        CustomException.throw(error_code_enum_1.ErrorCode.PUSH_INVALID_DEVICE_TOKEN, undefined, {\n            deviceToken: deviceToken.substring(0, 8) + '...',\n        });\n    }\n    static pushProviderConfigurationError(reason) {\n        CustomException.throw(error_code_enum_1.ErrorCode.PUSH_PROVIDER_CONFIGURATION_ERROR, reason ? `APNs 설정 오류: ${reason}` : undefined, { reason });\n    }\n    static pushSendFailed(deviceToken, reason) {\n        CustomException.throw(error_code_enum_1.ErrorCode.PUSH_SEND_FAILED, reason ? `푸시 전송 실패: ${reason}` : undefined, { deviceToken: deviceToken.substring(0, 8) + '...', reason });\n    }\n}\nexports.BusinessException = BusinessException;\n\n\n//# sourceURL=webpack://soapft-backend/./src/utils/custom-exception.ts?\n}",
        );

        /***/
      },

    /***/ './src/utils/global-exception.filter.ts':
      /*!**********************************************!*\
  !*** ./src/utils/global-exception.filter.ts ***!
  \**********************************************/
      /***/ function (__unused_webpack_module, exports, __webpack_require__) {
        'use strict';
        eval(
          '{\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar GlobalExceptionFilter_1;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.GlobalExceptionFilter = void 0;\nconst common_1 = __webpack_require__(/*! @nestjs/common */ "@nestjs/common");\nconst custom_exception_1 = __webpack_require__(/*! ./custom-exception */ "./src/utils/custom-exception.ts");\nconst error_code_enum_1 = __webpack_require__(/*! ../types/error-code.enum */ "./src/types/error-code.enum.ts");\nlet GlobalExceptionFilter = GlobalExceptionFilter_1 = class GlobalExceptionFilter {\n    constructor() {\n        this.logger = new common_1.Logger(GlobalExceptionFilter_1.name);\n    }\n    catch(exception, host) {\n        const ctx = host.switchToHttp();\n        const response = ctx.getResponse();\n        const request = ctx.getRequest();\n        let status;\n        let errorCode;\n        let message;\n        let details;\n        if (exception instanceof custom_exception_1.CustomException) {\n            status = exception.getStatus();\n            const exceptionResponse = exception.getResponse();\n            errorCode = exceptionResponse.errorCode;\n            message = exceptionResponse.message;\n            details = exceptionResponse.details;\n        }\n        else if (exception instanceof common_1.HttpException) {\n            status = exception.getStatus();\n            const exceptionResponse = exception.getResponse();\n            if (typeof exceptionResponse === \'string\') {\n                errorCode = this.getErrorCodeByStatus(status);\n                message = exceptionResponse;\n            }\n            else {\n                errorCode = this.getErrorCodeByStatus(status);\n                message = exceptionResponse.message || exception.message;\n                details = exceptionResponse;\n            }\n        }\n        else {\n            status = common_1.HttpStatus.INTERNAL_SERVER_ERROR;\n            errorCode = error_code_enum_1.ErrorCode.INTERNAL_SERVER_ERROR;\n            message = \'서버 오류가 발생했습니다.\';\n            details =  true ? exception : 0;\n        }\n        this.logError(exception, request, status, errorCode, message);\n        const errorResponse = {\n            success: false,\n            errorCode,\n            message,\n            timestamp: new Date().toISOString(),\n            path: request.url,\n            method: request.method,\n            ...(details && { details }),\n        };\n        response.status(status).json(errorResponse);\n    }\n    getErrorCodeByStatus(status) {\n        switch (status) {\n            case common_1.HttpStatus.BAD_REQUEST:\n                return error_code_enum_1.ErrorCode.INVALID_INPUT_VALUE;\n            case common_1.HttpStatus.UNAUTHORIZED:\n                return error_code_enum_1.ErrorCode.UNAUTHORIZED;\n            case common_1.HttpStatus.FORBIDDEN:\n                return error_code_enum_1.ErrorCode.FORBIDDEN;\n            case common_1.HttpStatus.NOT_FOUND:\n                return error_code_enum_1.ErrorCode.RESOURCE_NOT_FOUND;\n            case common_1.HttpStatus.METHOD_NOT_ALLOWED:\n                return error_code_enum_1.ErrorCode.METHOD_NOT_ALLOWED;\n            case common_1.HttpStatus.TOO_MANY_REQUESTS:\n                return error_code_enum_1.ErrorCode.TOO_MANY_REQUESTS;\n            case common_1.HttpStatus.INTERNAL_SERVER_ERROR:\n            default:\n                return error_code_enum_1.ErrorCode.INTERNAL_SERVER_ERROR;\n        }\n    }\n    logError(exception, request, status, errorCode, message) {\n        const logMessage = {\n            errorCode,\n            message,\n            status,\n            method: request.method,\n            url: request.url,\n            userAgent: request.get(\'User-Agent\'),\n            ip: request.ip,\n            timestamp: new Date().toISOString(),\n        };\n        if (status >= 500) {\n            this.logger.error(`Server Error: ${JSON.stringify(logMessage)}`, exception instanceof Error ? exception.stack : undefined);\n        }\n        else if (status >= 400) {\n            this.logger.warn(`Client Error: ${JSON.stringify(logMessage)}`);\n        }\n        else {\n            this.logger.log(`Request: ${JSON.stringify(logMessage)}`);\n        }\n    }\n};\nexports.GlobalExceptionFilter = GlobalExceptionFilter;\nexports.GlobalExceptionFilter = GlobalExceptionFilter = GlobalExceptionFilter_1 = __decorate([\n    (0, common_1.Catch)()\n], GlobalExceptionFilter);\n\n\n//# sourceURL=webpack://soapft-backend/./src/utils/global-exception.filter.ts?\n}',
        );

        /***/
      },

    /***/ './src/utils/logger.service.ts':
      /*!*************************************!*\
  !*** ./src/utils/logger.service.ts ***!
  \*************************************/
      /***/ (__unused_webpack_module, exports, __webpack_require__) => {
        'use strict';
        eval(
          '{\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.LoggerService = void 0;\nconst winston_1 = __webpack_require__(/*! winston */ "winston");\nconst logging_config_1 = __webpack_require__(/*! ../../config/logging.config */ "./config/logging.config.ts");\nclass LoggerService {\n    constructor() {\n        this.logger = (0, winston_1.createLogger)(logging_config_1.winstonConfig);\n    }\n    static getInstance() {\n        if (!LoggerService.instance) {\n            LoggerService.instance = new LoggerService();\n        }\n        return LoggerService.instance;\n    }\n}\nexports.LoggerService = LoggerService;\n\n\n//# sourceURL=webpack://soapft-backend/./src/utils/logger.service.ts?\n}',
        );

        /***/
      },

    /***/ '@aws-sdk/client-bedrock-runtime':
      /*!**************************************************!*\
  !*** external "@aws-sdk/client-bedrock-runtime" ***!
  \**************************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@aws-sdk/client-bedrock-runtime');

        /***/
      },

    /***/ '@aws-sdk/client-s3':
      /*!*************************************!*\
  !*** external "@aws-sdk/client-s3" ***!
  \*************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@aws-sdk/client-s3');

        /***/
      },

    /***/ '@aws-sdk/lib-storage':
      /*!***************************************!*\
  !*** external "@aws-sdk/lib-storage" ***!
  \***************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@aws-sdk/lib-storage');

        /***/
      },

    /***/ '@nestjs/common':
      /*!*********************************!*\
  !*** external "@nestjs/common" ***!
  \*********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/common');

        /***/
      },

    /***/ '@nestjs/config':
      /*!*********************************!*\
  !*** external "@nestjs/config" ***!
  \*********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/config');

        /***/
      },

    /***/ '@nestjs/core':
      /*!*******************************!*\
  !*** external "@nestjs/core" ***!
  \*******************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/core');

        /***/
      },

    /***/ '@nestjs/jwt':
      /*!******************************!*\
  !*** external "@nestjs/jwt" ***!
  \******************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/jwt');

        /***/
      },

    /***/ '@nestjs/mapped-types':
      /*!***************************************!*\
  !*** external "@nestjs/mapped-types" ***!
  \***************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/mapped-types');

        /***/
      },

    /***/ '@nestjs/passport':
      /*!***********************************!*\
  !*** external "@nestjs/passport" ***!
  \***********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/passport');

        /***/
      },

    /***/ '@nestjs/platform-express':
      /*!*******************************************!*\
  !*** external "@nestjs/platform-express" ***!
  \*******************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/platform-express');

        /***/
      },

    /***/ '@nestjs/schedule':
      /*!***********************************!*\
  !*** external "@nestjs/schedule" ***!
  \***********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/schedule');

        /***/
      },

    /***/ '@nestjs/swagger':
      /*!**********************************!*\
  !*** external "@nestjs/swagger" ***!
  \**********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/swagger');

        /***/
      },

    /***/ '@nestjs/typeorm':
      /*!**********************************!*\
  !*** external "@nestjs/typeorm" ***!
  \**********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/typeorm');

        /***/
      },

    /***/ '@nestjs/websockets':
      /*!*************************************!*\
  !*** external "@nestjs/websockets" ***!
  \*************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('@nestjs/websockets');

        /***/
      },

    /***/ axios:
      /*!************************!*\
  !*** external "axios" ***!
  \************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('axios');

        /***/
      },

    /***/ bcryptjs:
      /*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('bcryptjs');

        /***/
      },

    /***/ 'class-transformer':
      /*!************************************!*\
  !*** external "class-transformer" ***!
  \************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('class-transformer');

        /***/
      },

    /***/ 'class-validator':
      /*!**********************************!*\
  !*** external "class-validator" ***!
  \**********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('class-validator');

        /***/
      },

    /***/ crypto:
      /*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('crypto');

        /***/
      },

    /***/ 'date-fns':
      /*!***************************!*\
  !*** external "date-fns" ***!
  \***************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('date-fns');

        /***/
      },

    /***/ dotenv:
      /*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('dotenv');

        /***/
      },

    /***/ fs:
      /*!*********************!*\
  !*** external "fs" ***!
  \*********************/
      /***/ (module) => {
        'use strict';
        module.exports = require('fs');

        /***/
      },

    /***/ jsonwebtoken:
      /*!*******************************!*\
  !*** external "jsonwebtoken" ***!
  \*******************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('jsonwebtoken');

        /***/
      },

    /***/ 'jwks-rsa':
      /*!***************************!*\
  !*** external "jwks-rsa" ***!
  \***************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('jwks-rsa');

        /***/
      },

    /***/ ms:
      /*!*********************!*\
  !*** external "ms" ***!
  \*********************/
      /***/ (module) => {
        'use strict';
        module.exports = require('ms');

        /***/
      },

    /***/ 'nest-winston':
      /*!*******************************!*\
  !*** external "nest-winston" ***!
  \*******************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('nest-winston');

        /***/
      },

    /***/ 'node-apn':
      /*!***************************!*\
  !*** external "node-apn" ***!
  \***************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('node-apn');

        /***/
      },

    /***/ 'passport-jwt':
      /*!*******************************!*\
  !*** external "passport-jwt" ***!
  \*******************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('passport-jwt');

        /***/
      },

    /***/ path:
      /*!***********************!*\
  !*** external "path" ***!
  \***********************/
      /***/ (module) => {
        'use strict';
        module.exports = require('path');

        /***/
      },

    /***/ 'socket.io':
      /*!****************************!*\
  !*** external "socket.io" ***!
  \****************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('socket.io');

        /***/
      },

    /***/ 'starving-orange':
      /*!**********************************!*\
  !*** external "starving-orange" ***!
  \**********************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('starving-orange');

        /***/
      },

    /***/ typeorm:
      /*!**************************!*\
  !*** external "typeorm" ***!
  \**************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('typeorm');

        /***/
      },

    /***/ ulid:
      /*!***********************!*\
  !*** external "ulid" ***!
  \***********************/
      /***/ (module) => {
        'use strict';
        module.exports = require('ulid');

        /***/
      },

    /***/ uuid:
      /*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
      /***/ (module) => {
        'use strict';
        module.exports = require('uuid');

        /***/
      },

    /***/ winston:
      /*!**************************!*\
  !*** external "winston" ***!
  \**************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('winston');

        /***/
      },

    /***/ 'winston-daily-rotate-file':
      /*!********************************************!*\
  !*** external "winston-daily-rotate-file" ***!
  \********************************************/
      /***/ (module) => {
        'use strict';
        module.exports = require('winston-daily-rotate-file');

        /***/
      },

    /******/
  };
  /************************************************************************/
  /******/ // The module cache
  /******/ var __webpack_module_cache__ = {};
  /******/
  /******/ // The require function
  /******/ function __webpack_require__(moduleId) {
    /******/ // Check if module is in cache
    /******/ var cachedModule = __webpack_module_cache__[moduleId];
    /******/ if (cachedModule !== undefined) {
      /******/ if (cachedModule.error !== undefined) throw cachedModule.error;
      /******/ return cachedModule.exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/ var module = (__webpack_module_cache__[moduleId] = {
      /******/ // no module.id needed
      /******/ // no module.loaded needed
      /******/ exports: {},
      /******/
    });
    /******/
    /******/ // Execute the module function
    /******/ try {
      /******/ var execOptions = {
        id: moduleId,
        module: module,
        factory: __webpack_modules__[moduleId],
        require: __webpack_require__,
      };
      /******/ __webpack_require__.i.forEach(function (handler) {
        handler(execOptions);
      });
      /******/ module = execOptions.module;
      /******/ execOptions.factory.call(
        module.exports,
        module,
        module.exports,
        execOptions.require,
      );
      /******/
    } catch (e) {
      /******/ module.error = e;
      /******/ throw e;
      /******/
    }
    /******/
    /******/ // Return the exports of the module
    /******/ return module.exports;
    /******/
  }
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/ __webpack_require__.m = __webpack_modules__;
  /******/
  /******/ // expose the module cache
  /******/ __webpack_require__.c = __webpack_module_cache__;
  /******/
  /******/ // expose the module execution interceptor
  /******/ __webpack_require__.i = [];
  /******/
  /************************************************************************/
  /******/ /* webpack/runtime/get javascript update chunk filename */
  /******/ (() => {
    /******/ // This function allow to reference all chunks
    /******/ __webpack_require__.hu = (chunkId) => {
      /******/ // return url for filenames based on template
      /******/ return (
        '' + chunkId + '.' + __webpack_require__.h() + '.hot-update.js'
      );
      /******/
    };
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/get update manifest filename */
  /******/ (() => {
    /******/ __webpack_require__.hmrF = () =>
      'main.' + __webpack_require__.h() + '.hot-update.json';
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/getFullHash */
  /******/ (() => {
    /******/ __webpack_require__.h = () => 'deda1d0d8906fa9137a0';
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hasOwnProperty shorthand */
  /******/ (() => {
    /******/ __webpack_require__.o = (obj, prop) =>
      Object.prototype.hasOwnProperty.call(obj, prop);
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/hot module replacement */
  /******/ (() => {
    /******/ var currentModuleData = {};
    /******/ var installedModules = __webpack_require__.c;
    /******/
    /******/ // module and require creation
    /******/ var currentChildModule;
    /******/ var currentParents = [];
    /******/
    /******/ // status
    /******/ var registeredStatusHandlers = [];
    /******/ var currentStatus = 'idle';
    /******/
    /******/ // while downloading
    /******/ var blockingPromises = 0;
    /******/ var blockingPromisesWaiting = [];
    /******/
    /******/ // The update info
    /******/ var currentUpdateApplyHandlers;
    /******/ var queuedInvalidatedModules;
    /******/
    /******/ __webpack_require__.hmrD = currentModuleData;
    /******/
    /******/ __webpack_require__.i.push(function (options) {
      /******/ var module = options.module;
      /******/ var require = createRequire(options.require, options.id);
      /******/ module.hot = createModuleHotObject(options.id, module);
      /******/ module.parents = currentParents;
      /******/ module.children = [];
      /******/ currentParents = [];
      /******/ options.require = require;
      /******/
    });
    /******/
    /******/ __webpack_require__.hmrC = {};
    /******/ __webpack_require__.hmrI = {};
    /******/
    /******/ function createRequire(require, moduleId) {
      /******/ var me = installedModules[moduleId];
      /******/ if (!me) return require;
      /******/ var fn = function (request) {
        /******/ if (me.hot.active) {
          /******/ if (installedModules[request]) {
            /******/ var parents = installedModules[request].parents;
            /******/ if (parents.indexOf(moduleId) === -1) {
              /******/ parents.push(moduleId);
              /******/
            }
            /******/
          } else {
            /******/ currentParents = [moduleId];
            /******/ currentChildModule = request;
            /******/
          }
          /******/ if (me.children.indexOf(request) === -1) {
            /******/ me.children.push(request);
            /******/
          }
          /******/
        } else {
          /******/ console.warn(
            /******/ '[HMR] unexpected require(' +
              /******/ request +
              /******/ ') from disposed module ' +
              /******/ moduleId,
            /******/
          );
          /******/ currentParents = [];
          /******/
        }
        /******/ return require(request);
        /******/
      };
      /******/ var createPropertyDescriptor = function (name) {
        /******/ return {
          /******/ configurable: true,
          /******/ enumerable: true,
          /******/ get: function () {
            /******/ return require[name];
            /******/
          },
          /******/ set: function (value) {
            /******/ require[name] = value;
            /******/
          },
          /******/
        };
        /******/
      };
      /******/ for (var name in require) {
        /******/ if (
          Object.prototype.hasOwnProperty.call(require, name) &&
          name !== 'e'
        ) {
          /******/ Object.defineProperty(
            fn,
            name,
            createPropertyDescriptor(name),
          );
          /******/
        }
        /******/
      }
      /******/ fn.e = function (chunkId, fetchPriority) {
        /******/ return trackBlockingPromise(require.e(chunkId, fetchPriority));
        /******/
      };
      /******/ return fn;
      /******/
    }
    /******/
    /******/ function createModuleHotObject(moduleId, me) {
      /******/ var _main = currentChildModule !== moduleId;
      /******/ var hot = {
        /******/ // private stuff
        /******/ _acceptedDependencies: {},
        /******/ _acceptedErrorHandlers: {},
        /******/ _declinedDependencies: {},
        /******/ _selfAccepted: false,
        /******/ _selfDeclined: false,
        /******/ _selfInvalidated: false,
        /******/ _disposeHandlers: [],
        /******/ _main: _main,
        /******/ _requireSelf: function () {
          /******/ currentParents = me.parents.slice();
          /******/ currentChildModule = _main ? undefined : moduleId;
          /******/ __webpack_require__(moduleId);
          /******/
        },
        /******/
        /******/ // Module API
        /******/ active: true,
        /******/ accept: function (dep, callback, errorHandler) {
          /******/ if (dep === undefined) hot._selfAccepted = true;
          /******/ else if (typeof dep === 'function') hot._selfAccepted = dep;
          /******/ else if (typeof dep === 'object' && dep !== null) {
            /******/ for (var i = 0; i < dep.length; i++) {
              /******/ hot._acceptedDependencies[dep[i]] =
                callback || function () {};
              /******/ hot._acceptedErrorHandlers[dep[i]] = errorHandler;
              /******/
            }
            /******/
          } else {
            /******/ hot._acceptedDependencies[dep] =
              callback || function () {};
            /******/ hot._acceptedErrorHandlers[dep] = errorHandler;
            /******/
          }
          /******/
        },
        /******/ decline: function (dep) {
          /******/ if (dep === undefined) hot._selfDeclined = true;
          /******/ else if (typeof dep === 'object' && dep !== null)
            /******/ for (var i = 0; i < dep.length; i++)
              /******/ hot._declinedDependencies[dep[i]] = true;
          /******/ else hot._declinedDependencies[dep] = true;
          /******/
        },
        /******/ dispose: function (callback) {
          /******/ hot._disposeHandlers.push(callback);
          /******/
        },
        /******/ addDisposeHandler: function (callback) {
          /******/ hot._disposeHandlers.push(callback);
          /******/
        },
        /******/ removeDisposeHandler: function (callback) {
          /******/ var idx = hot._disposeHandlers.indexOf(callback);
          /******/ if (idx >= 0) hot._disposeHandlers.splice(idx, 1);
          /******/
        },
        /******/ invalidate: function () {
          /******/ this._selfInvalidated = true;
          /******/ switch (currentStatus) {
            /******/ case 'idle':
              /******/ currentUpdateApplyHandlers = [];
              /******/ Object.keys(__webpack_require__.hmrI).forEach(
                function (key) {
                  /******/ __webpack_require__.hmrI[key](
                    /******/ moduleId,
                    /******/ currentUpdateApplyHandlers,
                    /******/
                  );
                  /******/
                },
              );
              /******/ setStatus('ready');
              /******/ break;
            /******/ case 'ready':
              /******/ Object.keys(__webpack_require__.hmrI).forEach(
                function (key) {
                  /******/ __webpack_require__.hmrI[key](
                    /******/ moduleId,
                    /******/ currentUpdateApplyHandlers,
                    /******/
                  );
                  /******/
                },
              );
              /******/ break;
            /******/ case 'prepare':
            /******/ case 'check':
            /******/ case 'dispose':
            /******/ case 'apply':
              /******/ (queuedInvalidatedModules =
                queuedInvalidatedModules || []).push(
                /******/ moduleId,
                /******/
              );
              /******/ break;
            /******/ default: // ignore requests in error states
              /******/ /******/ break;
            /******/
          }
          /******/
        },
        /******/
        /******/ // Management API
        /******/ check: hotCheck,
        /******/ apply: hotApply,
        /******/ status: function (l) {
          /******/ if (!l) return currentStatus;
          /******/ registeredStatusHandlers.push(l);
          /******/
        },
        /******/ addStatusHandler: function (l) {
          /******/ registeredStatusHandlers.push(l);
          /******/
        },
        /******/ removeStatusHandler: function (l) {
          /******/ var idx = registeredStatusHandlers.indexOf(l);
          /******/ if (idx >= 0) registeredStatusHandlers.splice(idx, 1);
          /******/
        },
        /******/
        /******/ // inherit from previous dispose call
        /******/ data: currentModuleData[moduleId],
        /******/
      };
      /******/ currentChildModule = undefined;
      /******/ return hot;
      /******/
    }
    /******/
    /******/ function setStatus(newStatus) {
      /******/ currentStatus = newStatus;
      /******/ var results = [];
      /******/
      /******/ for (var i = 0; i < registeredStatusHandlers.length; i++)
        /******/ results[i] = registeredStatusHandlers[i].call(null, newStatus);
      /******/
      /******/ return Promise.all(results).then(function () {});
      /******/
    }
    /******/
    /******/ function unblock() {
      /******/ if (--blockingPromises === 0) {
        /******/ setStatus('ready').then(function () {
          /******/ if (blockingPromises === 0) {
            /******/ var list = blockingPromisesWaiting;
            /******/ blockingPromisesWaiting = [];
            /******/ for (var i = 0; i < list.length; i++) {
              /******/ list[i]();
              /******/
            }
            /******/
          }
          /******/
        });
        /******/
      }
      /******/
    }
    /******/
    /******/ function trackBlockingPromise(promise) {
      /******/ switch (currentStatus) {
        /******/ case 'ready':
          /******/ setStatus('prepare');
        /******/ /* fallthrough */
        /******/ case 'prepare':
          /******/ blockingPromises++;
          /******/ promise.then(unblock, unblock);
          /******/ return promise;
        /******/ default:
          /******/ return promise;
        /******/
      }
      /******/
    }
    /******/
    /******/ function waitForBlockingPromises(fn) {
      /******/ if (blockingPromises === 0) return fn();
      /******/ return new Promise(function (resolve) {
        /******/ blockingPromisesWaiting.push(function () {
          /******/ resolve(fn());
          /******/
        });
        /******/
      });
      /******/
    }
    /******/
    /******/ function hotCheck(applyOnUpdate) {
      /******/ if (currentStatus !== 'idle') {
        /******/ throw new Error('check() is only allowed in idle status');
        /******/
      }
      /******/ return setStatus('check')
        /******/ .then(__webpack_require__.hmrM)
        /******/ .then(function (update) {
          /******/ if (!update) {
            /******/ return setStatus(
              applyInvalidatedModules() ? 'ready' : 'idle',
            ).then(
              /******/ function () {
                /******/ return null;
                /******/
              },
              /******/
            );
            /******/
          }
          /******/
          /******/ return setStatus('prepare').then(function () {
            /******/ var updatedModules = [];
            /******/ currentUpdateApplyHandlers = [];
            /******/
            /******/ return Promise.all(
              /******/ Object.keys(__webpack_require__.hmrC).reduce(function (
                /******/ promises,
                /******/ key,
                /******/
              ) {
                /******/ __webpack_require__.hmrC[key](
                  /******/ update.c,
                  /******/ update.r,
                  /******/ update.m,
                  /******/ promises,
                  /******/ currentUpdateApplyHandlers,
                  /******/ updatedModules,
                  /******/
                );
                /******/ return promises;
                /******/
              }, []),
              /******/
            ).then(function () {
              /******/ return waitForBlockingPromises(function () {
                /******/ if (applyOnUpdate) {
                  /******/ return internalApply(applyOnUpdate);
                  /******/
                }
                /******/ return setStatus('ready').then(function () {
                  /******/ return updatedModules;
                  /******/
                });
                /******/
              });
              /******/
            });
            /******/
          });
          /******/
        });
      /******/
    }
    /******/
    /******/ function hotApply(options) {
      /******/ if (currentStatus !== 'ready') {
        /******/ return Promise.resolve().then(function () {
          /******/ throw new Error(
            /******/ 'apply() is only allowed in ready status (state: ' +
              /******/ currentStatus +
              /******/ ')',
            /******/
          );
          /******/
        });
        /******/
      }
      /******/ return internalApply(options);
      /******/
    }
    /******/
    /******/ function internalApply(options) {
      /******/ options = options || {};
      /******/
      /******/ applyInvalidatedModules();
      /******/
      /******/ var results = currentUpdateApplyHandlers.map(function (handler) {
        /******/ return handler(options);
        /******/
      });
      /******/ currentUpdateApplyHandlers = undefined;
      /******/
      /******/ var errors = results
        /******/ .map(function (r) {
          /******/ return r.error;
          /******/
        })
        /******/ .filter(Boolean);
      /******/
      /******/ if (errors.length > 0) {
        /******/ return setStatus('abort').then(function () {
          /******/ throw errors[0];
          /******/
        });
        /******/
      }
      /******/
      /******/ // Now in "dispose" phase
      /******/ var disposePromise = setStatus('dispose');
      /******/
      /******/ results.forEach(function (result) {
        /******/ if (result.dispose) result.dispose();
        /******/
      });
      /******/
      /******/ // Now in "apply" phase
      /******/ var applyPromise = setStatus('apply');
      /******/
      /******/ var error;
      /******/ var reportError = function (err) {
        /******/ if (!error) error = err;
        /******/
      };
      /******/
      /******/ var outdatedModules = [];
      /******/ results.forEach(function (result) {
        /******/ if (result.apply) {
          /******/ var modules = result.apply(reportError);
          /******/ if (modules) {
            /******/ for (var i = 0; i < modules.length; i++) {
              /******/ outdatedModules.push(modules[i]);
              /******/
            }
            /******/
          }
          /******/
        }
        /******/
      });
      /******/
      /******/ return Promise.all([disposePromise, applyPromise]).then(
        function () {
          /******/ // handle errors in accept handlers and self accepted module load
          /******/ if (error) {
            /******/ return setStatus('fail').then(function () {
              /******/ throw error;
              /******/
            });
            /******/
          }
          /******/
          /******/ if (queuedInvalidatedModules) {
            /******/ return internalApply(options).then(function (list) {
              /******/ outdatedModules.forEach(function (moduleId) {
                /******/ if (list.indexOf(moduleId) < 0) list.push(moduleId);
                /******/
              });
              /******/ return list;
              /******/
            });
            /******/
          }
          /******/
          /******/ return setStatus('idle').then(function () {
            /******/ return outdatedModules;
            /******/
          });
          /******/
        },
      );
      /******/
    }
    /******/
    /******/ function applyInvalidatedModules() {
      /******/ if (queuedInvalidatedModules) {
        /******/ if (!currentUpdateApplyHandlers)
          currentUpdateApplyHandlers = [];
        /******/ Object.keys(__webpack_require__.hmrI).forEach(function (key) {
          /******/ queuedInvalidatedModules.forEach(function (moduleId) {
            /******/ __webpack_require__.hmrI[key](
              /******/ moduleId,
              /******/ currentUpdateApplyHandlers,
              /******/
            );
            /******/
          });
          /******/
        });
        /******/ queuedInvalidatedModules = undefined;
        /******/ return true;
        /******/
      }
      /******/
    }
    /******/
  })();
  /******/
  /******/ /* webpack/runtime/require chunk loading */
  /******/ (() => {
    /******/ // no baseURI
    /******/
    /******/ // object to store loaded chunks
    /******/ // "1" means "loaded", otherwise not loaded yet
    /******/ var installedChunks = (__webpack_require__.hmrS_require =
      __webpack_require__.hmrS_require || {
        /******/ main: 1,
        /******/
      });
    /******/
    /******/ // no on chunks loaded
    /******/
    /******/ // no chunk install function needed
    /******/
    /******/ // no chunk loading
    /******/
    /******/ // no external install chunk
    /******/
    /******/ function loadUpdateChunk(chunkId, updatedModulesList) {
      /******/ var update = require('./' + __webpack_require__.hu(chunkId));
      /******/ var updatedModules = update.modules;
      /******/ var runtime = update.runtime;
      /******/ for (var moduleId in updatedModules) {
        /******/ if (__webpack_require__.o(updatedModules, moduleId)) {
          /******/ currentUpdate[moduleId] = updatedModules[moduleId];
          /******/ if (updatedModulesList) updatedModulesList.push(moduleId);
          /******/
        }
        /******/
      }
      /******/ if (runtime) currentUpdateRuntime.push(runtime);
      /******/
    }
    /******/
    /******/ var currentUpdateChunks;
    /******/ var currentUpdate;
    /******/ var currentUpdateRemovedChunks;
    /******/ var currentUpdateRuntime;
    /******/ function applyHandler(options) {
      /******/ if (__webpack_require__.f)
        delete __webpack_require__.f.requireHmr;
      /******/ currentUpdateChunks = undefined;
      /******/ function getAffectedModuleEffects(updateModuleId) {
        /******/ var outdatedModules = [updateModuleId];
        /******/ var outdatedDependencies = {};
        /******/
        /******/ var queue = outdatedModules.map(function (id) {
          /******/ return {
            /******/ chain: [id],
            /******/ id: id,
            /******/
          };
          /******/
        });
        /******/ while (queue.length > 0) {
          /******/ var queueItem = queue.pop();
          /******/ var moduleId = queueItem.id;
          /******/ var chain = queueItem.chain;
          /******/ var module = __webpack_require__.c[moduleId];
          /******/ if (
            /******/ !module ||
            /******/ (module.hot._selfAccepted && !module.hot._selfInvalidated)
            /******/
          )
            /******/ continue;
          /******/ if (module.hot._selfDeclined) {
            /******/ return {
              /******/ type: 'self-declined',
              /******/ chain: chain,
              /******/ moduleId: moduleId,
              /******/
            };
            /******/
          }
          /******/ if (module.hot._main) {
            /******/ return {
              /******/ type: 'unaccepted',
              /******/ chain: chain,
              /******/ moduleId: moduleId,
              /******/
            };
            /******/
          }
          /******/ for (var i = 0; i < module.parents.length; i++) {
            /******/ var parentId = module.parents[i];
            /******/ var parent = __webpack_require__.c[parentId];
            /******/ if (!parent) continue;
            /******/ if (parent.hot._declinedDependencies[moduleId]) {
              /******/ return {
                /******/ type: 'declined',
                /******/ chain: chain.concat([parentId]),
                /******/ moduleId: moduleId,
                /******/ parentId: parentId,
                /******/
              };
              /******/
            }
            /******/ if (outdatedModules.indexOf(parentId) !== -1) continue;
            /******/ if (parent.hot._acceptedDependencies[moduleId]) {
              /******/ if (!outdatedDependencies[parentId])
                /******/ outdatedDependencies[parentId] = [];
              /******/ addAllToSet(outdatedDependencies[parentId], [moduleId]);
              /******/ continue;
              /******/
            }
            /******/ delete outdatedDependencies[parentId];
            /******/ outdatedModules.push(parentId);
            /******/ queue.push({
              /******/ chain: chain.concat([parentId]),
              /******/ id: parentId,
              /******/
            });
            /******/
          }
          /******/
        }
        /******/
        /******/ return {
          /******/ type: 'accepted',
          /******/ moduleId: updateModuleId,
          /******/ outdatedModules: outdatedModules,
          /******/ outdatedDependencies: outdatedDependencies,
          /******/
        };
        /******/
      }
      /******/
      /******/ function addAllToSet(a, b) {
        /******/ for (var i = 0; i < b.length; i++) {
          /******/ var item = b[i];
          /******/ if (a.indexOf(item) === -1) a.push(item);
          /******/
        }
        /******/
      }
      /******/
      /******/ // at begin all updates modules are outdated
      /******/ // the "outdated" status can propagate to parents if they don't accept the children
      /******/ var outdatedDependencies = {};
      /******/ var outdatedModules = [];
      /******/ var appliedUpdate = {};
      /******/
      /******/ var warnUnexpectedRequire = function warnUnexpectedRequire(
        module,
      ) {
        /******/ console.warn(
          /******/ '[HMR] unexpected require(' +
            module.id +
            ') to disposed module',
          /******/
        );
        /******/
      };
      /******/
      /******/ for (var moduleId in currentUpdate) {
        /******/ if (__webpack_require__.o(currentUpdate, moduleId)) {
          /******/ var newModuleFactory = currentUpdate[moduleId];
          /******/ var result = newModuleFactory
            ? /******/ getAffectedModuleEffects(moduleId)
            : /******/ {
                /******/ type: 'disposed',
                /******/ moduleId: moduleId,
                /******/
              };
          /******/ /** @type {Error|false} */
          /******/ var abortError = false;
          /******/ var doApply = false;
          /******/ var doDispose = false;
          /******/ var chainInfo = '';
          /******/ if (result.chain) {
            /******/ chainInfo =
              '\nUpdate propagation: ' + result.chain.join(' -> ');
            /******/
          }
          /******/ switch (result.type) {
            /******/ case 'self-declined':
              /******/ if (options.onDeclined) options.onDeclined(result);
              /******/ if (!options.ignoreDeclined)
                /******/ abortError = new Error(
                  /******/ 'Aborted because of self decline: ' +
                    /******/ result.moduleId +
                    /******/ chainInfo,
                  /******/
                );
              /******/ break;
            /******/ case 'declined':
              /******/ if (options.onDeclined) options.onDeclined(result);
              /******/ if (!options.ignoreDeclined)
                /******/ abortError = new Error(
                  /******/ 'Aborted because of declined dependency: ' +
                    /******/ result.moduleId +
                    /******/ ' in ' +
                    /******/ result.parentId +
                    /******/ chainInfo,
                  /******/
                );
              /******/ break;
            /******/ case 'unaccepted':
              /******/ if (options.onUnaccepted) options.onUnaccepted(result);
              /******/ if (!options.ignoreUnaccepted)
                /******/ abortError = new Error(
                  /******/ 'Aborted because ' +
                    moduleId +
                    ' is not accepted' +
                    chainInfo,
                  /******/
                );
              /******/ break;
            /******/ case 'accepted':
              /******/ if (options.onAccepted) options.onAccepted(result);
              /******/ doApply = true;
              /******/ break;
            /******/ case 'disposed':
              /******/ if (options.onDisposed) options.onDisposed(result);
              /******/ doDispose = true;
              /******/ break;
            /******/ default:
              /******/ throw new Error('Unexception type ' + result.type);
            /******/
          }
          /******/ if (abortError) {
            /******/ return {
              /******/ error: abortError,
              /******/
            };
            /******/
          }
          /******/ if (doApply) {
            /******/ appliedUpdate[moduleId] = newModuleFactory;
            /******/ addAllToSet(outdatedModules, result.outdatedModules);
            /******/ for (moduleId in result.outdatedDependencies) {
              /******/ if (
                __webpack_require__.o(result.outdatedDependencies, moduleId)
              ) {
                /******/ if (!outdatedDependencies[moduleId])
                  /******/ outdatedDependencies[moduleId] = [];
                /******/ addAllToSet(
                  /******/ outdatedDependencies[moduleId],
                  /******/ result.outdatedDependencies[moduleId],
                  /******/
                );
                /******/
              }
              /******/
            }
            /******/
          }
          /******/ if (doDispose) {
            /******/ addAllToSet(outdatedModules, [result.moduleId]);
            /******/ appliedUpdate[moduleId] = warnUnexpectedRequire;
            /******/
          }
          /******/
        }
        /******/
      }
      /******/ currentUpdate = undefined;
      /******/
      /******/ // Store self accepted outdated modules to require them later by the module system
      /******/ var outdatedSelfAcceptedModules = [];
      /******/ for (var j = 0; j < outdatedModules.length; j++) {
        /******/ var outdatedModuleId = outdatedModules[j];
        /******/ var module = __webpack_require__.c[outdatedModuleId];
        /******/ if (
          /******/ module &&
          /******/ (module.hot._selfAccepted || module.hot._main) &&
          /******/ // removed self-accepted modules should not be required
          /******/ appliedUpdate[outdatedModuleId] !== warnUnexpectedRequire &&
          /******/ // when called invalidate self-accepting is not possible
          /******/ !module.hot._selfInvalidated
          /******/
        ) {
          /******/ outdatedSelfAcceptedModules.push({
            /******/ module: outdatedModuleId,
            /******/ require: module.hot._requireSelf,
            /******/ errorHandler: module.hot._selfAccepted,
            /******/
          });
          /******/
        }
        /******/
      }
      /******/
      /******/ var moduleOutdatedDependencies;
      /******/
      /******/ return {
        /******/ dispose: function () {
          /******/ currentUpdateRemovedChunks.forEach(function (chunkId) {
            /******/ delete installedChunks[chunkId];
            /******/
          });
          /******/ currentUpdateRemovedChunks = undefined;
          /******/
          /******/ var idx;
          /******/ var queue = outdatedModules.slice();
          /******/ while (queue.length > 0) {
            /******/ var moduleId = queue.pop();
            /******/ var module = __webpack_require__.c[moduleId];
            /******/ if (!module) continue;
            /******/
            /******/ var data = {};
            /******/
            /******/ // Call dispose handlers
            /******/ var disposeHandlers = module.hot._disposeHandlers;
            /******/ for (j = 0; j < disposeHandlers.length; j++) {
              /******/ disposeHandlers[j].call(null, data);
              /******/
            }
            /******/ __webpack_require__.hmrD[moduleId] = data;
            /******/
            /******/ // disable module (this disables requires from this module)
            /******/ module.hot.active = false;
            /******/
            /******/ // remove module from cache
            /******/ delete __webpack_require__.c[moduleId];
            /******/
            /******/ // when disposing there is no need to call dispose handler
            /******/ delete outdatedDependencies[moduleId];
            /******/
            /******/ // remove "parents" references from all children
            /******/ for (j = 0; j < module.children.length; j++) {
              /******/ var child = __webpack_require__.c[module.children[j]];
              /******/ if (!child) continue;
              /******/ idx = child.parents.indexOf(moduleId);
              /******/ if (idx >= 0) {
                /******/ child.parents.splice(idx, 1);
                /******/
              }
              /******/
            }
            /******/
          }
          /******/
          /******/ // remove outdated dependency from module children
          /******/ var dependency;
          /******/ for (var outdatedModuleId in outdatedDependencies) {
            /******/ if (
              __webpack_require__.o(outdatedDependencies, outdatedModuleId)
            ) {
              /******/ module = __webpack_require__.c[outdatedModuleId];
              /******/ if (module) {
                /******/ moduleOutdatedDependencies =
                  /******/ outdatedDependencies[outdatedModuleId];
                /******/ for (
                  j = 0;
                  j < moduleOutdatedDependencies.length;
                  j++
                ) {
                  /******/ dependency = moduleOutdatedDependencies[j];
                  /******/ idx = module.children.indexOf(dependency);
                  /******/ if (idx >= 0) module.children.splice(idx, 1);
                  /******/
                }
                /******/
              }
              /******/
            }
            /******/
          }
          /******/
        },
        /******/ apply: function (reportError) {
          /******/ // insert new code
          /******/ for (var updateModuleId in appliedUpdate) {
            /******/ if (__webpack_require__.o(appliedUpdate, updateModuleId)) {
              /******/ __webpack_require__.m[updateModuleId] =
                appliedUpdate[updateModuleId];
              /******/
            }
            /******/
          }
          /******/
          /******/ // run new runtime modules
          /******/ for (var i = 0; i < currentUpdateRuntime.length; i++) {
            /******/ currentUpdateRuntime[i](__webpack_require__);
            /******/
          }
          /******/
          /******/ // call accept handlers
          /******/ for (var outdatedModuleId in outdatedDependencies) {
            /******/ if (
              __webpack_require__.o(outdatedDependencies, outdatedModuleId)
            ) {
              /******/ var module = __webpack_require__.c[outdatedModuleId];
              /******/ if (module) {
                /******/ moduleOutdatedDependencies =
                  /******/ outdatedDependencies[outdatedModuleId];
                /******/ var callbacks = [];
                /******/ var errorHandlers = [];
                /******/ var dependenciesForCallbacks = [];
                /******/ for (
                  var j = 0;
                  j < moduleOutdatedDependencies.length;
                  j++
                ) {
                  /******/ var dependency = moduleOutdatedDependencies[j];
                  /******/ var acceptCallback =
                    /******/ module.hot._acceptedDependencies[dependency];
                  /******/ var errorHandler =
                    /******/ module.hot._acceptedErrorHandlers[dependency];
                  /******/ if (acceptCallback) {
                    /******/ if (callbacks.indexOf(acceptCallback) !== -1)
                      continue;
                    /******/ callbacks.push(acceptCallback);
                    /******/ errorHandlers.push(errorHandler);
                    /******/ dependenciesForCallbacks.push(dependency);
                    /******/
                  }
                  /******/
                }
                /******/ for (var k = 0; k < callbacks.length; k++) {
                  /******/ try {
                    /******/ callbacks[k].call(
                      null,
                      moduleOutdatedDependencies,
                    );
                    /******/
                  } catch (err) {
                    /******/ if (typeof errorHandlers[k] === 'function') {
                      /******/ try {
                        /******/ errorHandlers[k](err, {
                          /******/ moduleId: outdatedModuleId,
                          /******/ dependencyId: dependenciesForCallbacks[k],
                          /******/
                        });
                        /******/
                      } catch (err2) {
                        /******/ if (options.onErrored) {
                          /******/ options.onErrored({
                            /******/ type: 'accept-error-handler-errored',
                            /******/ moduleId: outdatedModuleId,
                            /******/ dependencyId: dependenciesForCallbacks[k],
                            /******/ error: err2,
                            /******/ originalError: err,
                            /******/
                          });
                          /******/
                        }
                        /******/ if (!options.ignoreErrored) {
                          /******/ reportError(err2);
                          /******/ reportError(err);
                          /******/
                        }
                        /******/
                      }
                      /******/
                    } else {
                      /******/ if (options.onErrored) {
                        /******/ options.onErrored({
                          /******/ type: 'accept-errored',
                          /******/ moduleId: outdatedModuleId,
                          /******/ dependencyId: dependenciesForCallbacks[k],
                          /******/ error: err,
                          /******/
                        });
                        /******/
                      }
                      /******/ if (!options.ignoreErrored) {
                        /******/ reportError(err);
                        /******/
                      }
                      /******/
                    }
                    /******/
                  }
                  /******/
                }
                /******/
              }
              /******/
            }
            /******/
          }
          /******/
          /******/ // Load self accepted modules
          /******/ for (
            var o = 0;
            o < outdatedSelfAcceptedModules.length;
            o++
          ) {
            /******/ var item = outdatedSelfAcceptedModules[o];
            /******/ var moduleId = item.module;
            /******/ try {
              /******/ item.require(moduleId);
              /******/
            } catch (err) {
              /******/ if (typeof item.errorHandler === 'function') {
                /******/ try {
                  /******/ item.errorHandler(err, {
                    /******/ moduleId: moduleId,
                    /******/ module: __webpack_require__.c[moduleId],
                    /******/
                  });
                  /******/
                } catch (err1) {
                  /******/ if (options.onErrored) {
                    /******/ options.onErrored({
                      /******/ type: 'self-accept-error-handler-errored',
                      /******/ moduleId: moduleId,
                      /******/ error: err1,
                      /******/ originalError: err,
                      /******/
                    });
                    /******/
                  }
                  /******/ if (!options.ignoreErrored) {
                    /******/ reportError(err1);
                    /******/ reportError(err);
                    /******/
                  }
                  /******/
                }
                /******/
              } else {
                /******/ if (options.onErrored) {
                  /******/ options.onErrored({
                    /******/ type: 'self-accept-errored',
                    /******/ moduleId: moduleId,
                    /******/ error: err,
                    /******/
                  });
                  /******/
                }
                /******/ if (!options.ignoreErrored) {
                  /******/ reportError(err);
                  /******/
                }
                /******/
              }
              /******/
            }
            /******/
          }
          /******/
          /******/ return outdatedModules;
          /******/
        },
        /******/
      };
      /******/
    }
    /******/ __webpack_require__.hmrI.require = function (
      moduleId,
      applyHandlers,
    ) {
      /******/ if (!currentUpdate) {
        /******/ currentUpdate = {};
        /******/ currentUpdateRuntime = [];
        /******/ currentUpdateRemovedChunks = [];
        /******/ applyHandlers.push(applyHandler);
        /******/
      }
      /******/ if (!__webpack_require__.o(currentUpdate, moduleId)) {
        /******/ currentUpdate[moduleId] = __webpack_require__.m[moduleId];
        /******/
      }
      /******/
    };
    /******/ __webpack_require__.hmrC.require = function (
      /******/ chunkIds,
      /******/ removedChunks,
      /******/ removedModules,
      /******/ promises,
      /******/ applyHandlers,
      /******/ updatedModulesList,
      /******/
    ) {
      /******/ applyHandlers.push(applyHandler);
      /******/ currentUpdateChunks = {};
      /******/ currentUpdateRemovedChunks = removedChunks;
      /******/ currentUpdate = removedModules.reduce(function (obj, key) {
        /******/ obj[key] = false;
        /******/ return obj;
        /******/
      }, {});
      /******/ currentUpdateRuntime = [];
      /******/ chunkIds.forEach(function (chunkId) {
        /******/ if (
          /******/ __webpack_require__.o(installedChunks, chunkId) &&
          /******/ installedChunks[chunkId] !== undefined
          /******/
        ) {
          /******/ promises.push(loadUpdateChunk(chunkId, updatedModulesList));
          /******/ currentUpdateChunks[chunkId] = true;
          /******/
        } else {
          /******/ currentUpdateChunks[chunkId] = false;
          /******/
        }
        /******/
      });
      /******/ if (__webpack_require__.f) {
        /******/ __webpack_require__.f.requireHmr = function (
          chunkId,
          promises,
        ) {
          /******/ if (
            /******/ currentUpdateChunks &&
            /******/ __webpack_require__.o(currentUpdateChunks, chunkId) &&
            /******/ !currentUpdateChunks[chunkId]
            /******/
          ) {
            /******/ promises.push(loadUpdateChunk(chunkId));
            /******/ currentUpdateChunks[chunkId] = true;
            /******/
          }
          /******/
        };
        /******/
      }
      /******/
    };
    /******/
    /******/ __webpack_require__.hmrM = function () {
      /******/ return Promise.resolve()
        .then(function () {
          /******/ return require('./' + __webpack_require__.hmrF());
          /******/
        })
        ['catch'](function (err) {
          if (err.code !== 'MODULE_NOT_FOUND') throw err;
        });
      /******/
    };
    /******/
  })();
  /******/
  /************************************************************************/
  /******/
  /******/ // module cache are used so entry inlining is disabled
  /******/ // startup
  /******/ // Load entry module and return exports
  /******/ __webpack_require__('./node_modules/webpack/hot/poll.js?100');
  /******/ var __webpack_exports__ = __webpack_require__('./src/main.ts');
  /******/
  /******/
})();
